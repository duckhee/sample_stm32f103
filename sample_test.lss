
sample_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  080077f0  080077f0  000177f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002b0  20000000  08007ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  200002b0  08008150  000202b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000358  08008150  00020358  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000af73  00000000  00000000  000202d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024d7  00000000  00000000  0002b24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b84  00000000  00000000  0002d723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000be8  00000000  00000000  000332a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  00033e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000515e  00000000  00000000  0003490f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000328e  00000000  00000000  00039a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000006e  00000000  00000000  0003ccfb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d44  00000000  00000000  0003cd6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0003fab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  0003fb34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002b0 	.word	0x200002b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080077d8 	.word	0x080077d8

08000134 <frame_dummy>:
 8000134:	4b08      	ldr	r3, [pc, #32]	; (8000158 <frame_dummy+0x24>)
 8000136:	b510      	push	{r4, lr}
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4908      	ldr	r1, [pc, #32]	; (800015c <frame_dummy+0x28>)
 800013c:	4808      	ldr	r0, [pc, #32]	; (8000160 <frame_dummy+0x2c>)
 800013e:	f3af 8000 	nop.w
 8000142:	4808      	ldr	r0, [pc, #32]	; (8000164 <frame_dummy+0x30>)
 8000144:	6803      	ldr	r3, [r0, #0]
 8000146:	b903      	cbnz	r3, 800014a <frame_dummy+0x16>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	4b07      	ldr	r3, [pc, #28]	; (8000168 <frame_dummy+0x34>)
 800014c:	2b00      	cmp	r3, #0
 800014e:	d0fb      	beq.n	8000148 <frame_dummy+0x14>
 8000150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000154:	4718      	bx	r3
 8000156:	bf00      	nop
 8000158:	00000000 	.word	0x00000000
 800015c:	200002b4 	.word	0x200002b4
 8000160:	080077d8 	.word	0x080077d8
 8000164:	200002b0 	.word	0x200002b0
 8000168:	00000000 	.word	0x00000000

0800016c <strlen>:
 800016c:	4603      	mov	r3, r0
 800016e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1a18      	subs	r0, r3, r0
 8000178:	3801      	subs	r0, #1
 800017a:	4770      	bx	lr

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf14      	ite	ne
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e720      	b.n	80002c0 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aedc 	beq.w	800026e <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6c1      	b.n	800026e <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <Reset_Handler>:
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e003      	b.n	8000b88 <LoopCopyDataInit>

08000b80 <CopyDataInit>:
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <LoopFillZerobss+0xc>)
 8000b82:	585b      	ldr	r3, [r3, r1]
 8000b84:	5043      	str	r3, [r0, r1]
 8000b86:	3104      	adds	r1, #4

08000b88 <LoopCopyDataInit>:
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <LoopFillZerobss+0x10>)
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x14>)
 8000b8c:	1842      	adds	r2, r0, r1
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3f6      	bcc.n	8000b80 <CopyDataInit>
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <LoopFillZerobss+0x18>)
 8000b94:	e002      	b.n	8000b9c <LoopFillZerobss>

08000b96 <FillZerobss>:
 8000b96:	2300      	movs	r3, #0
 8000b98:	f842 3b04 	str.w	r3, [r2], #4

08000b9c <LoopFillZerobss>:
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <LoopFillZerobss+0x1c>)
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3f9      	bcc.n	8000b96 <FillZerobss>
 8000ba2:	f002 f907 	bl	8002db4 <main>
 8000ba6:	4770      	bx	lr
 8000ba8:	08007ea0 	.word	0x08007ea0
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	200002b0 	.word	0x200002b0
 8000bb4:	200002b0 	.word	0x200002b0
 8000bb8:	20000358 	.word	0x20000358

08000bbc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000bbc:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	9300      	str	r3, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 8000bd8:	9b01      	ldr	r3, [sp, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8000bde:	9b00      	ldr	r3, [sp, #0]
 8000be0:	b91b      	cbnz	r3, 8000bea <SetSysClockTo72+0x2e>
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000be8:	d1f1      	bne.n	8000bce <SetSysClockTo72+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bf2:	d002      	beq.n	8000bfa <SetSysClockTo72+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	e001      	b.n	8000bfe <SetSysClockTo72+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9300      	str	r3, [sp, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d13b      	bne.n	8000c7c <SetSysClockTo72+0xc0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <SetSysClockTo72+0xcc>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	f042 0210 	orr.w	r2, r2, #16
 8000c0c:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f022 0203 	bic.w	r2, r2, #3
 8000c14:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	f042 0202 	orr.w	r2, r2, #2
 8000c1c:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000c1e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK/2 */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c30:	605a      	str	r2, [r3, #4]

    /* ADCCLK = PCLK2/6 */
    RCC->CFGR |= (uint32_t)RCC_CFGR_ADCPRE_DIV6;
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c38:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000c40:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
#ifdef EXT_CLOCK_SOURCE_12M
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8000c48:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c50:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c5a:	d0fa      	beq.n	8000c52 <SetSysClockTo72+0x96>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	f022 0203 	bic.w	r2, r2, #3
 8000c64:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	f042 0202 	orr.w	r2, r2, #2
 8000c6c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SetSysClockTo72+0xc8>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d1f9      	bne.n	8000c6e <SetSysClockTo72+0xb2>
 8000c7a:	e000      	b.n	8000c7e <SetSysClockTo72+0xc2>
 8000c7c:	e7fe      	b.n	8000c7c <SetSysClockTo72+0xc0>
    /* Go to infinite loop */
    while (1)
    {
    }
  }
}
 8000c7e:	b002      	add	sp, #8
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40022000 	.word	0x40022000

08000c8c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c8c:	b508      	push	{r3, lr}
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000c8e:	f7ff ff95 	bl	8000bbc <SetSysClockTo72>
 8000c92:	bd08      	pop	{r3, pc}

08000c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0x44>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000ca0:	6859      	ldr	r1, [r3, #4]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <SystemInit+0x48>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000cae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cb2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000cc2:	605a      	str	r2, [r3, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cc4:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cc8:	609a      	str	r2, [r3, #8]
  RCC->CFGR2 = 0x00000000;
#endif /* STM32F10X_CL */
    
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000cca:	f7ff ffdf 	bl	8000c8c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SystemInit+0x4c>)
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	bd08      	pop	{r3, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	f8ff0000 	.word	0xf8ff0000
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <LED_Off_Red>:
{
    GPIO_ResetBits(GPIO_LED, GPIO_LED1_PIN);
}

void LED_Off_Red (void)
{
 8000ce4:	b508      	push	{r3, lr}
    GPIO_SetBits(GPIO_LED, GPIO_LED1_PIN);
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <LED_Off_Red+0x10>)
 8000cec:	f000 fa28 	bl	8001140 <GPIO_SetBits>
 8000cf0:	bd08      	pop	{r3, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <LED_Off_Yellow>:
{
    GPIO_ResetBits(GPIO_LED, GPIO_LED2_PIN);
}

void LED_Off_Yellow (void)
{
 8000cf8:	b508      	push	{r3, lr}
    GPIO_SetBits(GPIO_LED, GPIO_LED2_PIN);
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4801      	ldr	r0, [pc, #4]	; (8000d04 <LED_Off_Yellow+0xc>)
 8000cfe:	f000 fa1f 	bl	8001140 <GPIO_SetBits>
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <LED_Off_Blue>:
{
    GPIO_ResetBits(GPIO_LED, GPIO_LED3_PIN);
}

void LED_Off_Blue (void)
{
 8000d08:	b508      	push	{r3, lr}
    GPIO_SetBits(GPIO_LED, GPIO_LED3_PIN);
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4802      	ldr	r0, [pc, #8]	; (8000d18 <LED_Off_Blue+0x10>)
 8000d10:	f000 fa16 	bl	8001140 <GPIO_SetBits>
 8000d14:	bd08      	pop	{r3, pc}
 8000d16:	bf00      	nop
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <LED_Off_All>:
    LED_On_Yellow();
    LED_On_Blue();
}

void LED_Off_All (void)
{
 8000d1c:	b508      	push	{r3, lr}
    LED_Off_Red();
 8000d1e:	f7ff ffe1 	bl	8000ce4 <LED_Off_Red>
    LED_Off_Yellow();
 8000d22:	f7ff ffe9 	bl	8000cf8 <LED_Off_Yellow>
    LED_Off_Blue();
 8000d26:	f7ff ffef 	bl	8000d08 <LED_Off_Blue>
 8000d2a:	bd08      	pop	{r3, pc}

08000d2c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8000d30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8000d34:	d00f      	beq.n	8000d56 <NVIC_PriorityGroupConfig+0x2a>
 8000d36:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
 8000d3a:	d00c      	beq.n	8000d56 <NVIC_PriorityGroupConfig+0x2a>
 8000d3c:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8000d40:	d009      	beq.n	8000d56 <NVIC_PriorityGroupConfig+0x2a>
 8000d42:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000d46:	d006      	beq.n	8000d56 <NVIC_PriorityGroupConfig+0x2a>
 8000d48:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8000d4c:	d003      	beq.n	8000d56 <NVIC_PriorityGroupConfig+0x2a>
 8000d4e:	2162      	movs	r1, #98	; 0x62
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <NVIC_PriorityGroupConfig+0x38>)
 8000d52:	f001 fda3 	bl	800289c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000d56:	f044 64bf 	orr.w	r4, r4, #100139008	; 0x5f80000
 8000d5a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8000d5e:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <NVIC_PriorityGroupConfig+0x3c>)
 8000d60:	60dc      	str	r4, [r3, #12]
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	080077f0 	.word	0x080077f0
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	4604      	mov	r4, r0
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8000d70:	78c3      	ldrb	r3, [r0, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d903      	bls.n	8000d7e <NVIC_Init+0x12>
 8000d76:	2174      	movs	r1, #116	; 0x74
 8000d78:	481f      	ldr	r0, [pc, #124]	; (8000df8 <NVIC_Init+0x8c>)
 8000d7a:	f001 fd8f 	bl	800289c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8000d7e:	7863      	ldrb	r3, [r4, #1]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d903      	bls.n	8000d8c <NVIC_Init+0x20>
 8000d84:	2175      	movs	r1, #117	; 0x75
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <NVIC_Init+0x8c>)
 8000d88:	f001 fd88 	bl	800289c <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8000d8c:	78a3      	ldrb	r3, [r4, #2]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d903      	bls.n	8000d9a <NVIC_Init+0x2e>
 8000d92:	2176      	movs	r1, #118	; 0x76
 8000d94:	4818      	ldr	r0, [pc, #96]	; (8000df8 <NVIC_Init+0x8c>)
 8000d96:	f001 fd81 	bl	800289c <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d9a:	78e3      	ldrb	r3, [r4, #3]
 8000d9c:	b1fb      	cbz	r3, 8000dde <NVIC_Init+0x72>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <NVIC_Init+0x90>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000da8:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;
 8000dac:	220f      	movs	r2, #15
 8000dae:	40da      	lsrs	r2, r3

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000db0:	7863      	ldrb	r3, [r4, #1]
 8000db2:	fa03 f101 	lsl.w	r1, r3, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000db6:	78a3      	ldrb	r3, [r4, #2]
 8000db8:	4013      	ands	r3, r2
 8000dba:	430b      	orrs	r3, r1
    tmppriority = tmppriority << 0x04;
 8000dbc:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000dbe:	7822      	ldrb	r2, [r4, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	490f      	ldr	r1, [pc, #60]	; (8000e00 <NVIC_Init+0x94>)
 8000dc4:	440a      	add	r2, r1
 8000dc6:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dca:	7823      	ldrb	r3, [r4, #0]
 8000dcc:	0958      	lsrs	r0, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dd8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8000ddc:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dde:	7823      	ldrb	r3, [r4, #0]
 8000de0:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dec:	3220      	adds	r2, #32
 8000dee:	4904      	ldr	r1, [pc, #16]	; (8000e00 <NVIC_Init+0x94>)
 8000df0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	bf00      	nop
 8000df8:	080077f0 	.word	0x080077f0
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4605      	mov	r5, r0
 8000e08:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
 8000e0a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8000e0e:	d006      	beq.n	8000e1e <NVIC_SetVectorTable+0x1a>
 8000e10:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8000e14:	d003      	beq.n	8000e1e <NVIC_SetVectorTable+0x1a>
 8000e16:	219d      	movs	r1, #157	; 0x9d
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <NVIC_SetVectorTable+0x38>)
 8000e1a:	f001 fd3f 	bl	800289c <assert_failed>
  assert_param(IS_NVIC_OFFSET(Offset));  
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <NVIC_SetVectorTable+0x3c>)
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d903      	bls.n	8000e2c <NVIC_SetVectorTable+0x28>
 8000e24:	219e      	movs	r1, #158	; 0x9e
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <NVIC_SetVectorTable+0x38>)
 8000e28:	f001 fd38 	bl	800289c <assert_failed>
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000e2c:	f024 4160 	bic.w	r1, r4, #3758096384	; 0xe0000000
 8000e30:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000e34:	4329      	orrs	r1, r5
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <NVIC_SetVectorTable+0x40>)
 8000e38:	6099      	str	r1, [r3, #8]
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	080077f0 	.word	0x080077f0
 8000e40:	0007fffe 	.word	0x0007fffe
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 8000e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8000e50:	d002      	beq.n	8000e58 <DMA_ClearFlag+0x10>
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <DMA_ClearFlag+0x30>)
 8000e54:	4003      	ands	r3, r0
 8000e56:	b903      	cbnz	r3, 8000e5a <DMA_ClearFlag+0x12>
 8000e58:	b924      	cbnz	r4, 8000e64 <DMA_ClearFlag+0x1c>
 8000e5a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <DMA_ClearFlag+0x34>)
 8000e60:	f001 fd1c 	bl	800289c <assert_failed>
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000e64:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000e68:	d002      	beq.n	8000e70 <DMA_ClearFlag+0x28>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <DMA_ClearFlag+0x38>)
 8000e6c:	605c      	str	r4, [r3, #4]
 8000e6e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <DMA_ClearFlag+0x3c>)
 8000e72:	605c      	str	r4, [r3, #4]
 8000e74:	bd10      	pop	{r4, pc}
 8000e76:	bf00      	nop
 8000e78:	eff00000 	.word	0xeff00000
 8000e7c:	08007820 	.word	0x08007820
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020000 	.word	0x40020000

08000e88 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	4604      	mov	r4, r0
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8000e8c:	7903      	ldrb	r3, [r0, #4]
 8000e8e:	b12b      	cbz	r3, 8000e9c <EXTI_Init+0x14>
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d003      	beq.n	8000e9c <EXTI_Init+0x14>
 8000e94:	2169      	movs	r1, #105	; 0x69
 8000e96:	4830      	ldr	r0, [pc, #192]	; (8000f58 <EXTI_Init+0xd0>)
 8000e98:	f001 fd00 	bl	800289c <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8000e9c:	7963      	ldrb	r3, [r4, #5]
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d007      	beq.n	8000eb2 <EXTI_Init+0x2a>
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d005      	beq.n	8000eb2 <EXTI_Init+0x2a>
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d003      	beq.n	8000eb2 <EXTI_Init+0x2a>
 8000eaa:	216a      	movs	r1, #106	; 0x6a
 8000eac:	482a      	ldr	r0, [pc, #168]	; (8000f58 <EXTI_Init+0xd0>)
 8000eae:	f001 fcf5 	bl	800289c <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	0d13      	lsrs	r3, r2, #20
 8000eb6:	051b      	lsls	r3, r3, #20
 8000eb8:	b903      	cbnz	r3, 8000ebc <EXTI_Init+0x34>
 8000eba:	b91a      	cbnz	r2, 8000ec4 <EXTI_Init+0x3c>
 8000ebc:	216b      	movs	r1, #107	; 0x6b
 8000ebe:	4826      	ldr	r0, [pc, #152]	; (8000f58 <EXTI_Init+0xd0>)
 8000ec0:	f001 fcec 	bl	800289c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8000ec4:	79a3      	ldrb	r3, [r4, #6]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d903      	bls.n	8000ed2 <EXTI_Init+0x4a>
 8000eca:	216c      	movs	r1, #108	; 0x6c
 8000ecc:	4822      	ldr	r0, [pc, #136]	; (8000f58 <EXTI_Init+0xd0>)
 8000ece:	f001 fce5 	bl	800289c <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ed2:	79a3      	ldrb	r3, [r4, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d033      	beq.n	8000f40 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <EXTI_Init+0xd4>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6821      	ldr	r1, [r4, #0]
 8000ede:	ea22 0201 	bic.w	r2, r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	ea22 0201 	bic.w	r2, r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000eee:	7922      	ldrb	r2, [r4, #4]
 8000ef0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000ef4:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ef8:	6810      	ldr	r0, [r2, #0]
 8000efa:	6821      	ldr	r1, [r4, #0]
 8000efc:	4301      	orrs	r1, r0
 8000efe:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	6821      	ldr	r1, [r4, #0]
 8000f04:	ea22 0201 	bic.w	r2, r2, r1
 8000f08:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	6821      	ldr	r1, [r4, #0]
 8000f0e:	ea22 0201 	bic.w	r2, r2, r1
 8000f12:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000f14:	7963      	ldrb	r3, [r4, #5]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d109      	bne.n	8000f2e <EXTI_Init+0xa6>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <EXTI_Init+0xd4>)
 8000f1c:	6899      	ldr	r1, [r3, #8]
 8000f1e:	6822      	ldr	r2, [r4, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000f24:	68d9      	ldr	r1, [r3, #12]
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	bd10      	pop	{r4, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f32:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000f40:	7923      	ldrb	r3, [r4, #4]
 8000f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f46:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	6821      	ldr	r1, [r4, #0]
 8000f4e:	ea22 0201 	bic.w	r2, r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	bf00      	nop
 8000f58:	08007858 	.word	0x08007858
 8000f5c:	40010400 	.word	0x40010400

08000f60 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8000f64:	1e43      	subs	r3, r0, #1
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d933      	bls.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f6a:	2804      	cmp	r0, #4
 8000f6c:	d031      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f6e:	2808      	cmp	r0, #8
 8000f70:	d02f      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f72:	2810      	cmp	r0, #16
 8000f74:	d02d      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f76:	2820      	cmp	r0, #32
 8000f78:	d02b      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f7a:	2840      	cmp	r0, #64	; 0x40
 8000f7c:	d029      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f7e:	2880      	cmp	r0, #128	; 0x80
 8000f80:	d027      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f82:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000f86:	d024      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f88:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f8c:	d021      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f8e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000f92:	d01e      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f94:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000f98:	d01b      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000f9a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000f9e:	d018      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fa0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000fa4:	d015      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fa6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000faa:	d012      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000fb0:	d00f      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fb2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000fb6:	d00c      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fb8:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8000fbc:	d009      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fbe:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000fc2:	d006      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fc4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8000fc8:	d003      	beq.n	8000fd2 <EXTI_GetITStatus+0x72>
 8000fca:	21e4      	movs	r1, #228	; 0xe4
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <EXTI_GetITStatus+0x8c>)
 8000fce:	f001 fc65 	bl	800289c <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <EXTI_GetITStatus+0x90>)
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	4023      	ands	r3, r4
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000fd8:	6952      	ldr	r2, [r2, #20]
 8000fda:	4214      	tst	r4, r2
 8000fdc:	d002      	beq.n	8000fe4 <EXTI_GetITStatus+0x84>
 8000fde:	b91b      	cbnz	r3, 8000fe8 <EXTI_GetITStatus+0x88>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	bd10      	pop	{r4, pc}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	bd10      	pop	{r4, pc}
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
  {
    bitstatus = SET;
 8000fe8:	2001      	movs	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	08007858 	.word	0x08007858
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8000ff8:	0d03      	lsrs	r3, r0, #20
 8000ffa:	051b      	lsls	r3, r3, #20
 8000ffc:	b903      	cbnz	r3, 8001000 <EXTI_ClearITPendingBit+0xc>
 8000ffe:	b918      	cbnz	r0, 8001008 <EXTI_ClearITPendingBit+0x14>
 8001000:	21fb      	movs	r1, #251	; 0xfb
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <EXTI_ClearITPendingBit+0x1c>)
 8001004:	f001 fc4a 	bl	800289c <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <EXTI_ClearITPendingBit+0x20>)
 800100a:	615c      	str	r4, [r3, #20]
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop
 8001010:	08007858 	.word	0x08007858
 8001014:	40010400 	.word	0x40010400

08001018 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	4605      	mov	r5, r0
 800101c:	460c      	mov	r4, r1
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <GPIO_Init+0x120>)
 8001020:	4298      	cmp	r0, r3
 8001022:	d01b      	beq.n	800105c <GPIO_Init+0x44>
 8001024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001028:	4298      	cmp	r0, r3
 800102a:	d017      	beq.n	800105c <GPIO_Init+0x44>
 800102c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001030:	4298      	cmp	r0, r3
 8001032:	d013      	beq.n	800105c <GPIO_Init+0x44>
 8001034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001038:	4298      	cmp	r0, r3
 800103a:	d00f      	beq.n	800105c <GPIO_Init+0x44>
 800103c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001040:	4298      	cmp	r0, r3
 8001042:	d00b      	beq.n	800105c <GPIO_Init+0x44>
 8001044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001048:	4298      	cmp	r0, r3
 800104a:	d007      	beq.n	800105c <GPIO_Init+0x44>
 800104c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001050:	4298      	cmp	r0, r3
 8001052:	d003      	beq.n	800105c <GPIO_Init+0x44>
 8001054:	21b1      	movs	r1, #177	; 0xb1
 8001056:	4839      	ldr	r0, [pc, #228]	; (800113c <GPIO_Init+0x124>)
 8001058:	f001 fc20 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 800105c:	78e3      	ldrb	r3, [r4, #3]
 800105e:	b18b      	cbz	r3, 8001084 <GPIO_Init+0x6c>
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00f      	beq.n	8001084 <GPIO_Init+0x6c>
 8001064:	2b28      	cmp	r3, #40	; 0x28
 8001066:	d00d      	beq.n	8001084 <GPIO_Init+0x6c>
 8001068:	2b48      	cmp	r3, #72	; 0x48
 800106a:	d00b      	beq.n	8001084 <GPIO_Init+0x6c>
 800106c:	2b14      	cmp	r3, #20
 800106e:	d009      	beq.n	8001084 <GPIO_Init+0x6c>
 8001070:	2b10      	cmp	r3, #16
 8001072:	d007      	beq.n	8001084 <GPIO_Init+0x6c>
 8001074:	2b1c      	cmp	r3, #28
 8001076:	d005      	beq.n	8001084 <GPIO_Init+0x6c>
 8001078:	2b18      	cmp	r3, #24
 800107a:	d003      	beq.n	8001084 <GPIO_Init+0x6c>
 800107c:	21b2      	movs	r1, #178	; 0xb2
 800107e:	482f      	ldr	r0, [pc, #188]	; (800113c <GPIO_Init+0x124>)
 8001080:	f001 fc0c 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
 8001084:	8823      	ldrh	r3, [r4, #0]
 8001086:	b91b      	cbnz	r3, 8001090 <GPIO_Init+0x78>
 8001088:	21b3      	movs	r1, #179	; 0xb3
 800108a:	482c      	ldr	r0, [pc, #176]	; (800113c <GPIO_Init+0x124>)
 800108c:	f001 fc06 	bl	800289c <assert_failed>
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001090:	78e3      	ldrb	r3, [r4, #3]
 8001092:	f003 060f 	and.w	r6, r3, #15
 8001096:	4630      	mov	r0, r6
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001098:	f013 0f10 	tst.w	r3, #16
 800109c:	d00a      	beq.n	80010b4 <GPIO_Init+0x9c>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 800109e:	78a3      	ldrb	r3, [r4, #2]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d903      	bls.n	80010b0 <GPIO_Init+0x98>
 80010a8:	21ba      	movs	r1, #186	; 0xba
 80010aa:	4824      	ldr	r0, [pc, #144]	; (800113c <GPIO_Init+0x124>)
 80010ac:	f001 fbf6 	bl	800289c <assert_failed>
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80010b0:	78a0      	ldrb	r0, [r4, #2]
 80010b2:	4330      	orrs	r0, r6
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80010b4:	7823      	ldrb	r3, [r4, #0]
 80010b6:	b1e3      	cbz	r3, 80010f2 <GPIO_Init+0xda>
  {
    tmpreg = GPIOx->CRL;
 80010b8:	682e      	ldr	r6, [r5, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	e016      	b.n	80010ec <GPIO_Init+0xd4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80010be:	2201      	movs	r2, #1
 80010c0:	409a      	lsls	r2, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010c2:	8821      	ldrh	r1, [r4, #0]
      if (currentpin == pos)
 80010c4:	ea32 0101 	bics.w	r1, r2, r1
 80010c8:	d10f      	bne.n	80010ea <GPIO_Init+0xd2>
      {
        pos = pinpos << 2;
 80010ca:	0099      	lsls	r1, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80010cc:	270f      	movs	r7, #15
 80010ce:	408f      	lsls	r7, r1
        tmpreg &= ~pinmask;
 80010d0:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80010d4:	fa00 f101 	lsl.w	r1, r0, r1
 80010d8:	430e      	orrs	r6, r1
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80010da:	78e1      	ldrb	r1, [r4, #3]
 80010dc:	2928      	cmp	r1, #40	; 0x28
 80010de:	d101      	bne.n	80010e4 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80010e0:	616a      	str	r2, [r5, #20]
 80010e2:	e002      	b.n	80010ea <GPIO_Init+0xd2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80010e4:	2948      	cmp	r1, #72	; 0x48
 80010e6:	d100      	bne.n	80010ea <GPIO_Init+0xd2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80010e8:	612a      	str	r2, [r5, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010ea:	3301      	adds	r3, #1
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d9e6      	bls.n	80010be <GPIO_Init+0xa6>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80010f0:	602e      	str	r6, [r5, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80010f2:	8823      	ldrh	r3, [r4, #0]
 80010f4:	2bff      	cmp	r3, #255	; 0xff
 80010f6:	d91e      	bls.n	8001136 <GPIO_Init+0x11e>
  {
    tmpreg = GPIOx->CRH;
 80010f8:	686e      	ldr	r6, [r5, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	e018      	b.n	8001130 <GPIO_Init+0x118>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80010fe:	f103 0108 	add.w	r1, r3, #8
 8001102:	2201      	movs	r2, #1
 8001104:	408a      	lsls	r2, r1
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001106:	8821      	ldrh	r1, [r4, #0]
      if (currentpin == pos)
 8001108:	ea32 0101 	bics.w	r1, r2, r1
 800110c:	d10f      	bne.n	800112e <GPIO_Init+0x116>
      {
        pos = pinpos << 2;
 800110e:	0099      	lsls	r1, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001110:	270f      	movs	r7, #15
 8001112:	408f      	lsls	r7, r1
        tmpreg &= ~pinmask;
 8001114:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001118:	fa00 f101 	lsl.w	r1, r0, r1
 800111c:	430e      	orrs	r6, r1
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800111e:	78e1      	ldrb	r1, [r4, #3]
 8001120:	2928      	cmp	r1, #40	; 0x28
 8001122:	d100      	bne.n	8001126 <GPIO_Init+0x10e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001124:	616a      	str	r2, [r5, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001126:	78e1      	ldrb	r1, [r4, #3]
 8001128:	2948      	cmp	r1, #72	; 0x48
 800112a:	d100      	bne.n	800112e <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800112c:	612a      	str	r2, [r5, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800112e:	3301      	adds	r3, #1
 8001130:	2b07      	cmp	r3, #7
 8001132:	d9e4      	bls.n	80010fe <GPIO_Init+0xe6>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001134:	606e      	str	r6, [r5, #4]
 8001136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001138:	40010800 	.word	0x40010800
 800113c:	08007890 	.word	0x08007890

08001140 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <GPIO_SetBits+0x58>)
 8001148:	4298      	cmp	r0, r3
 800114a:	d01c      	beq.n	8001186 <GPIO_SetBits+0x46>
 800114c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001150:	4298      	cmp	r0, r3
 8001152:	d018      	beq.n	8001186 <GPIO_SetBits+0x46>
 8001154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001158:	4298      	cmp	r0, r3
 800115a:	d014      	beq.n	8001186 <GPIO_SetBits+0x46>
 800115c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001160:	4298      	cmp	r0, r3
 8001162:	d010      	beq.n	8001186 <GPIO_SetBits+0x46>
 8001164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001168:	4298      	cmp	r0, r3
 800116a:	d00c      	beq.n	8001186 <GPIO_SetBits+0x46>
 800116c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001170:	4298      	cmp	r0, r3
 8001172:	d008      	beq.n	8001186 <GPIO_SetBits+0x46>
 8001174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001178:	4298      	cmp	r0, r3
 800117a:	d004      	beq.n	8001186 <GPIO_SetBits+0x46>
 800117c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <GPIO_SetBits+0x5c>)
 8001182:	f001 fb8b 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001186:	b925      	cbnz	r5, 8001192 <GPIO_SetBits+0x52>
 8001188:	f240 1169 	movw	r1, #361	; 0x169
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <GPIO_SetBits+0x5c>)
 800118e:	f001 fb85 	bl	800289c <assert_failed>
  
  GPIOx->BSRR = GPIO_Pin;
 8001192:	6125      	str	r5, [r4, #16]
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop
 8001198:	40010800 	.word	0x40010800
 800119c:	08007890 	.word	0x08007890

080011a0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <GPIO_ResetBits+0x58>)
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d01c      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b0:	4298      	cmp	r0, r3
 80011b2:	d018      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b8:	4298      	cmp	r0, r3
 80011ba:	d014      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c0:	4298      	cmp	r0, r3
 80011c2:	d010      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c8:	4298      	cmp	r0, r3
 80011ca:	d00c      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011d0:	4298      	cmp	r0, r3
 80011d2:	d008      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011d8:	4298      	cmp	r0, r3
 80011da:	d004      	beq.n	80011e6 <GPIO_ResetBits+0x46>
 80011dc:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <GPIO_ResetBits+0x5c>)
 80011e2:	f001 fb5b 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011e6:	b925      	cbnz	r5, 80011f2 <GPIO_ResetBits+0x52>
 80011e8:	f240 1179 	movw	r1, #377	; 0x179
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <GPIO_ResetBits+0x5c>)
 80011ee:	f001 fb55 	bl	800289c <assert_failed>
  
  GPIOx->BRR = GPIO_Pin;
 80011f2:	6165      	str	r5, [r4, #20]
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop
 80011f8:	40010800 	.word	0x40010800
 80011fc:	08007890 	.word	0x08007890

08001200 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <GPIO_WriteBit+0xbc>)
 800120a:	4298      	cmp	r0, r3
 800120c:	d01c      	beq.n	8001248 <GPIO_WriteBit+0x48>
 800120e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001212:	4298      	cmp	r0, r3
 8001214:	d018      	beq.n	8001248 <GPIO_WriteBit+0x48>
 8001216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800121a:	4298      	cmp	r0, r3
 800121c:	d014      	beq.n	8001248 <GPIO_WriteBit+0x48>
 800121e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001222:	4298      	cmp	r0, r3
 8001224:	d010      	beq.n	8001248 <GPIO_WriteBit+0x48>
 8001226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122a:	4298      	cmp	r0, r3
 800122c:	d00c      	beq.n	8001248 <GPIO_WriteBit+0x48>
 800122e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001232:	4298      	cmp	r0, r3
 8001234:	d008      	beq.n	8001248 <GPIO_WriteBit+0x48>
 8001236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123a:	4298      	cmp	r0, r3
 800123c:	d004      	beq.n	8001248 <GPIO_WriteBit+0x48>
 800123e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <GPIO_WriteBit+0xc0>)
 8001244:	f001 fb2a 	bl	800289c <assert_failed>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 8001248:	1e6b      	subs	r3, r5, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d928      	bls.n	80012a2 <GPIO_WriteBit+0xa2>
 8001250:	2d04      	cmp	r5, #4
 8001252:	d026      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001254:	2d08      	cmp	r5, #8
 8001256:	d024      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001258:	2d10      	cmp	r5, #16
 800125a:	d022      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 800125c:	2d20      	cmp	r5, #32
 800125e:	d020      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001260:	2d40      	cmp	r5, #64	; 0x40
 8001262:	d01e      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001264:	2d80      	cmp	r5, #128	; 0x80
 8001266:	d01c      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001268:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800126c:	d019      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 800126e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001272:	d016      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001274:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001278:	d013      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 800127a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800127e:	d010      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001280:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8001284:	d00d      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001286:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800128a:	d00a      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 800128c:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8001290:	d007      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001292:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8001296:	d004      	beq.n	80012a2 <GPIO_WriteBit+0xa2>
 8001298:	f240 118d 	movw	r1, #397	; 0x18d
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <GPIO_WriteBit+0xc0>)
 800129e:	f001 fafd 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
 80012a2:	2e01      	cmp	r6, #1
 80012a4:	d904      	bls.n	80012b0 <GPIO_WriteBit+0xb0>
 80012a6:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <GPIO_WriteBit+0xc0>)
 80012ac:	f001 faf6 	bl	800289c <assert_failed>
  
  if (BitVal != Bit_RESET)
 80012b0:	b10e      	cbz	r6, 80012b6 <GPIO_WriteBit+0xb6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	6125      	str	r5, [r4, #16]
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80012b6:	6165      	str	r5, [r4, #20]
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	bf00      	nop
 80012bc:	40010800 	.word	0x40010800
 80012c0:	08007890 	.word	0x08007890

080012c4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <GPIO_Write+0x4c>)
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d01c      	beq.n	800130a <GPIO_Write+0x46>
 80012d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d4:	4298      	cmp	r0, r3
 80012d6:	d018      	beq.n	800130a <GPIO_Write+0x46>
 80012d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012dc:	4298      	cmp	r0, r3
 80012de:	d014      	beq.n	800130a <GPIO_Write+0x46>
 80012e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d010      	beq.n	800130a <GPIO_Write+0x46>
 80012e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d00c      	beq.n	800130a <GPIO_Write+0x46>
 80012f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012f4:	4298      	cmp	r0, r3
 80012f6:	d008      	beq.n	800130a <GPIO_Write+0x46>
 80012f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012fc:	4298      	cmp	r0, r3
 80012fe:	d004      	beq.n	800130a <GPIO_Write+0x46>
 8001300:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <GPIO_Write+0x50>)
 8001306:	f001 fac9 	bl	800289c <assert_failed>
  
  GPIOx->ODR = PortVal;
 800130a:	60e5      	str	r5, [r4, #12]
 800130c:	bd38      	pop	{r3, r4, r5, pc}
 800130e:	bf00      	nop
 8001310:	40010800 	.word	0x40010800
 8001314:	08007890 	.word	0x08007890

08001318 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	4605      	mov	r5, r0
 800131c:	460c      	mov	r4, r1
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
 800131e:	2806      	cmp	r0, #6
 8001320:	d904      	bls.n	800132c <GPIO_EXTILineConfig+0x14>
 8001322:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <GPIO_EXTILineConfig+0x50>)
 8001328:	f001 fab8 	bl	800289c <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 800132c:	2c0f      	cmp	r4, #15
 800132e:	d904      	bls.n	800133a <GPIO_EXTILineConfig+0x22>
 8001330:	f240 2145 	movw	r1, #581	; 0x245
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <GPIO_EXTILineConfig+0x50>)
 8001336:	f001 fab1 	bl	800289c <assert_failed>
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800133a:	f004 0203 	and.w	r2, r4, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	200f      	movs	r0, #15
 8001342:	fa00 f602 	lsl.w	r6, r0, r2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001346:	08a1      	lsrs	r1, r4, #2
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <GPIO_EXTILineConfig+0x54>)
 800134a:	3102      	adds	r1, #2
 800134c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001350:	ea20 0006 	bic.w	r0, r0, r6
 8001354:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001358:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800135c:	4095      	lsls	r5, r2
 800135e:	4305      	orrs	r5, r0
 8001360:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8001364:	bd70      	pop	{r4, r5, r6, pc}
 8001366:	bf00      	nop
 8001368:	08007890 	.word	0x08007890
 800136c:	40010000 	.word	0x40010000

08001370 <PWR_EnterSTOPMode>:
  *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4605      	mov	r5, r0
 8001374:	460c      	mov	r4, r1
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 8001376:	2801      	cmp	r0, #1
 8001378:	d903      	bls.n	8001382 <PWR_EnterSTOPMode+0x12>
 800137a:	21d0      	movs	r1, #208	; 0xd0
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <PWR_EnterSTOPMode+0x44>)
 800137e:	f001 fa8d 	bl	800289c <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 8001382:	1e63      	subs	r3, r4, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d903      	bls.n	8001392 <PWR_EnterSTOPMode+0x22>
 800138a:	21d1      	movs	r1, #209	; 0xd1
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <PWR_EnterSTOPMode+0x44>)
 800138e:	f001 fa85 	bl	800289c <assert_failed>
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <PWR_EnterSTOPMode+0x48>)
 8001394:	6818      	ldr	r0, [r3, #0]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8001396:	f020 0003 	bic.w	r0, r0, #3
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800139a:	4328      	orrs	r0, r5
  /* Store the new value */
  PWR->CR = tmpreg;
 800139c:	6018      	str	r0, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <PWR_EnterSTOPMode+0x4c>)
 80013a0:	6813      	ldr	r3, [r2, #0]
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80013a8:	2c01      	cmp	r4, #1
 80013aa:	d101      	bne.n	80013b0 <PWR_EnterSTOPMode+0x40>

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 80013ac:	bf30      	wfi
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 80013b0:	bf20      	wfe
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	080078c8 	.word	0x080078c8
 80013b8:	40007000 	.word	0x40007000
 80013bc:	e000ed10 	.word	0xe000ed10

080013c0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80013c0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
 80013c2:	4604      	mov	r4, r0
 80013c4:	b150      	cbz	r0, 80013dc <RCC_HSEConfig+0x1c>
 80013c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80013ca:	d007      	beq.n	80013dc <RCC_HSEConfig+0x1c>
 80013cc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80013d0:	d004      	beq.n	80013dc <RCC_HSEConfig+0x1c>
 80013d2:	f240 1111 	movw	r1, #273	; 0x111
 80013d6:	480f      	ldr	r0, [pc, #60]	; (8001414 <RCC_HSEConfig+0x54>)
 80013d8:	f001 fa60 	bl	800289c <assert_failed>
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <RCC_HSEConfig+0x58>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e4:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ec:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80013ee:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80013f2:	d003      	beq.n	80013fc <RCC_HSEConfig+0x3c>
 80013f4:	f5b4 2f80 	cmp.w	r4, #262144	; 0x40000
 80013f8:	d006      	beq.n	8001408 <RCC_HSEConfig+0x48>
 80013fa:	bd10      	pop	{r4, pc}
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <RCC_HSEConfig+0x58>)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
      break;
 8001406:	bd10      	pop	{r4, pc}
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <RCC_HSEConfig+0x58>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	bd10      	pop	{r4, pc}
 8001414:	08007900 	.word	0x08007900
 8001418:	40021000 	.word	0x40021000

0800141c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800141c:	b510      	push	{r4, lr}
 800141e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8001420:	2801      	cmp	r0, #1
 8001422:	d904      	bls.n	800142e <RCC_PLLCmd+0x12>
 8001424:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <RCC_PLLCmd+0x18>)
 800142a:	f001 fa37 	bl	800289c <assert_failed>

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800142e:	4b02      	ldr	r3, [pc, #8]	; (8001438 <RCC_PLLCmd+0x1c>)
 8001430:	601c      	str	r4, [r3, #0]
 8001432:	bd10      	pop	{r4, pc}
 8001434:	08007900 	.word	0x08007900
 8001438:	42420060 	.word	0x42420060

0800143c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800143c:	b510      	push	{r4, lr}
 800143e:	4604      	mov	r4, r0
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 8001440:	2802      	cmp	r0, #2
 8001442:	d904      	bls.n	800144e <RCC_SYSCLKConfig+0x12>
 8001444:	f44f 710d 	mov.w	r1, #564	; 0x234
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <RCC_SYSCLKConfig+0x20>)
 800144a:	f001 fa27 	bl	800289c <assert_failed>
  tmpreg = RCC->CFGR;
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <RCC_SYSCLKConfig+0x24>)
 8001450:	6858      	ldr	r0, [r3, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001452:	f020 0003 	bic.w	r0, r0, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001456:	4320      	orrs	r0, r4
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001458:	6058      	str	r0, [r3, #4]
 800145a:	bd10      	pop	{r4, pc}
 800145c:	08007900 	.word	0x08007900
 8001460:	40021000 	.word	0x40021000

08001464 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <RCC_GetSYSCLKSource+0xc>)
 8001466:	6858      	ldr	r0, [r3, #4]
}
 8001468:	f000 000c 	and.w	r0, r0, #12
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001474:	b410      	push	{r4}
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <RCC_GetClocksFreq+0xa8>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800147e:	2b04      	cmp	r3, #4
 8001480:	d005      	beq.n	800148e <RCC_GetClocksFreq+0x1a>
 8001482:	2b08      	cmp	r3, #8
 8001484:	d006      	beq.n	8001494 <RCC_GetClocksFreq+0x20>
 8001486:	bb13      	cbnz	r3, 80014ce <RCC_GetClocksFreq+0x5a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <RCC_GetClocksFreq+0xac>)
 800148a:	6003      	str	r3, [r0, #0]
      break;
 800148c:	e021      	b.n	80014d2 <RCC_GetClocksFreq+0x5e>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <RCC_GetClocksFreq+0xb0>)
 8001490:	6003      	str	r3, [r0, #0]
      break;
 8001492:	e01e      	b.n	80014d2 <RCC_GetClocksFreq+0x5e>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <RCC_GetClocksFreq+0xa8>)
 8001496:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001498:	6852      	ldr	r2, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800149a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800149e:	3302      	adds	r3, #2
      
      if (pllsource == 0x00)
 80014a0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80014a4:	d104      	bne.n	80014b0 <RCC_GetClocksFreq+0x3c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <RCC_GetClocksFreq+0xb4>)
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	6003      	str	r3, [r0, #0]
 80014ae:	e010      	b.n	80014d2 <RCC_GetClocksFreq+0x5e>
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <RCC_GetClocksFreq+0xa8>)
 80014b2:	6852      	ldr	r2, [r2, #4]
 80014b4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80014b8:	d004      	beq.n	80014c4 <RCC_GetClocksFreq+0x50>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <RCC_GetClocksFreq+0xb8>)
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	6003      	str	r3, [r0, #0]
 80014c2:	e006      	b.n	80014d2 <RCC_GetClocksFreq+0x5e>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <RCC_GetClocksFreq+0xb0>)
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	6003      	str	r3, [r0, #0]
 80014cc:	e001      	b.n	80014d2 <RCC_GetClocksFreq+0x5e>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <RCC_GetClocksFreq+0xac>)
 80014d0:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80014d2:	4912      	ldr	r1, [pc, #72]	; (800151c <RCC_GetClocksFreq+0xa8>)
 80014d4:	684b      	ldr	r3, [r1, #4]
  tmp = tmp >> 4;
 80014d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80014da:	4c15      	ldr	r4, [pc, #84]	; (8001530 <RCC_GetClocksFreq+0xbc>)
 80014dc:	5ce3      	ldrb	r3, [r4, r3]
 80014de:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80014e0:	6803      	ldr	r3, [r0, #0]
 80014e2:	40d3      	lsrs	r3, r2
 80014e4:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80014e6:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 8;
 80014e8:	f3c2 2202 	ubfx	r2, r2, #8, #3
  presc = APBAHBPrescTable[tmp];
 80014ec:	5ca2      	ldrb	r2, [r4, r2]
 80014ee:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80014f0:	fa23 f202 	lsr.w	r2, r3, r2
 80014f4:	6082      	str	r2, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80014f6:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 11;
 80014f8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  presc = APBAHBPrescTable[tmp];
 80014fc:	5ca2      	ldrb	r2, [r4, r2]
 80014fe:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001500:	40d3      	lsrs	r3, r2
 8001502:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001504:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 14;
 8001506:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 800150a:	490a      	ldr	r1, [pc, #40]	; (8001534 <RCC_GetClocksFreq+0xc0>)
 800150c:	5c8a      	ldrb	r2, [r1, r2]
 800150e:	b2d2      	uxtb	r2, r2
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001510:	fbb3 f3f2 	udiv	r3, r3, r2
 8001514:	6103      	str	r3, [r0, #16]
}
 8001516:	bc10      	pop	{r4}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200
 8001524:	00b71b00 	.word	0x00b71b00
 8001528:	003d0900 	.word	0x003d0900
 800152c:	005b8d80 	.word	0x005b8d80
 8001530:	20000004 	.word	0x20000004
 8001534:	20000000 	.word	0x20000000

08001538 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 800153e:	f420 63aa 	bic.w	r3, r0, #1360	; 0x550
 8001542:	f023 0307 	bic.w	r3, r3, #7
 8001546:	b903      	cbnz	r3, 800154a <RCC_AHBPeriphClockCmd+0x12>
 8001548:	b920      	cbnz	r0, 8001554 <RCC_AHBPeriphClockCmd+0x1c>
 800154a:	f240 411a 	movw	r1, #1050	; 0x41a
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <RCC_AHBPeriphClockCmd+0x44>)
 8001550:	f001 f9a4 	bl	800289c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8001554:	2d01      	cmp	r5, #1
 8001556:	d904      	bls.n	8001562 <RCC_AHBPeriphClockCmd+0x2a>
 8001558:	f240 411b 	movw	r1, #1051	; 0x41b
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <RCC_AHBPeriphClockCmd+0x44>)
 800155e:	f001 f99d 	bl	800289c <assert_failed>

  if (NewState != DISABLE)
 8001562:	b125      	cbz	r5, 800156e <RCC_AHBPeriphClockCmd+0x36>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <RCC_AHBPeriphClockCmd+0x48>)
 8001566:	6953      	ldr	r3, [r2, #20]
 8001568:	431c      	orrs	r4, r3
 800156a:	6154      	str	r4, [r2, #20]
 800156c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <RCC_AHBPeriphClockCmd+0x48>)
 8001570:	6953      	ldr	r3, [r2, #20]
 8001572:	ea23 0404 	bic.w	r4, r3, r4
 8001576:	6154      	str	r4, [r2, #20]
 8001578:	bd38      	pop	{r3, r4, r5, pc}
 800157a:	bf00      	nop
 800157c:	08007900 	.word	0x08007900
 8001580:	40021000 	.word	0x40021000

08001584 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 800158a:	f420 437f 	bic.w	r3, r0, #65280	; 0xff00
 800158e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 8001592:	b903      	cbnz	r3, 8001596 <RCC_APB2PeriphClockCmd+0x12>
 8001594:	b920      	cbnz	r0, 80015a0 <RCC_APB2PeriphClockCmd+0x1c>
 8001596:	f240 4137 	movw	r1, #1079	; 0x437
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <RCC_APB2PeriphClockCmd+0x44>)
 800159c:	f001 f97e 	bl	800289c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80015a0:	2d01      	cmp	r5, #1
 80015a2:	d904      	bls.n	80015ae <RCC_APB2PeriphClockCmd+0x2a>
 80015a4:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <RCC_APB2PeriphClockCmd+0x44>)
 80015aa:	f001 f977 	bl	800289c <assert_failed>
  if (NewState != DISABLE)
 80015ae:	b125      	cbz	r5, 80015ba <RCC_APB2PeriphClockCmd+0x36>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <RCC_APB2PeriphClockCmd+0x48>)
 80015b2:	6993      	ldr	r3, [r2, #24]
 80015b4:	431c      	orrs	r4, r3
 80015b6:	6194      	str	r4, [r2, #24]
 80015b8:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <RCC_APB2PeriphClockCmd+0x48>)
 80015bc:	6993      	ldr	r3, [r2, #24]
 80015be:	ea23 0404 	bic.w	r4, r3, r4
 80015c2:	6194      	str	r4, [r2, #24]
 80015c4:	bd38      	pop	{r3, r4, r5, pc}
 80015c6:	bf00      	nop
 80015c8:	08007900 	.word	0x08007900
 80015cc:	40021000 	.word	0x40021000

080015d0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80015d0:	b510      	push	{r4, lr}
 80015d2:	4604      	mov	r4, r0
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 80015d4:	2821      	cmp	r0, #33	; 0x21
 80015d6:	d018      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015d8:	2831      	cmp	r0, #49	; 0x31
 80015da:	d016      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015dc:	2839      	cmp	r0, #57	; 0x39
 80015de:	d014      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015e0:	2841      	cmp	r0, #65	; 0x41
 80015e2:	d012      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015e4:	2861      	cmp	r0, #97	; 0x61
 80015e6:	d010      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015e8:	287a      	cmp	r0, #122	; 0x7a
 80015ea:	d00e      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015ec:	287b      	cmp	r0, #123	; 0x7b
 80015ee:	d00c      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015f0:	287c      	cmp	r0, #124	; 0x7c
 80015f2:	d00a      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015f4:	287d      	cmp	r0, #125	; 0x7d
 80015f6:	d008      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015f8:	287e      	cmp	r0, #126	; 0x7e
 80015fa:	d006      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 80015fc:	287f      	cmp	r0, #127	; 0x7f
 80015fe:	d004      	beq.n	800160a <RCC_GetFlagStatus+0x3a>
 8001600:	f240 511d 	movw	r1, #1309	; 0x51d
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <RCC_GetFlagStatus+0x6c>)
 8001606:	f001 f949 	bl	800289c <assert_failed>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800160a:	0963      	lsrs	r3, r4, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800160c:	2b01      	cmp	r3, #1
 800160e:	d102      	bne.n	8001616 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->CR;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <RCC_GetFlagStatus+0x70>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	e006      	b.n	8001624 <RCC_GetFlagStatus+0x54>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001616:	2b02      	cmp	r3, #2
 8001618:	d102      	bne.n	8001620 <RCC_GetFlagStatus+0x50>
  {
    statusreg = RCC->BDCR;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <RCC_GetFlagStatus+0x70>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	e001      	b.n	8001624 <RCC_GetFlagStatus+0x54>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <RCC_GetFlagStatus+0x70>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001624:	f004 041f 	and.w	r4, r4, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001628:	fa23 f404 	lsr.w	r4, r3, r4
 800162c:	f014 0f01 	tst.w	r4, #1
 8001630:	d001      	beq.n	8001636 <RCC_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 8001632:	2001      	movs	r0, #1
 8001634:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8001636:	2000      	movs	r0, #0
  }

  /* Return the flag status */
  return bitstatus;
}
 8001638:	bd10      	pop	{r4, pc}
 800163a:	bf00      	nop
 800163c:	08007900 	.word	0x08007900
 8001640:	40021000 	.word	0x40021000

08001644 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001644:	b500      	push	{lr}
 8001646:	b083      	sub	sp, #12
  __IO uint32_t StartUpCounter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800164c:	2031      	movs	r0, #49	; 0x31
 800164e:	f7ff ffbf 	bl	80015d0 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8001652:	9b01      	ldr	r3, [sp, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800165e:	d001      	beq.n	8001664 <RCC_WaitForHSEStartUp+0x20>
 8001660:	2800      	cmp	r0, #0
 8001662:	d0f3      	beq.n	800164c <RCC_WaitForHSEStartUp+0x8>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001664:	2031      	movs	r0, #49	; 0x31
 8001666:	f7ff ffb3 	bl	80015d0 <RCC_GetFlagStatus>
 800166a:	b108      	cbz	r0, 8001670 <RCC_WaitForHSEStartUp+0x2c>
  {
    status = SUCCESS;
 800166c:	2001      	movs	r0, #1
 800166e:	e000      	b.n	8001672 <RCC_WaitForHSEStartUp+0x2e>
  }
  else
  {
    status = ERROR;
 8001670:	2000      	movs	r0, #0
  }  
  return (status);
}
 8001672:	b003      	add	sp, #12
 8001674:	f85d fb04 	ldr.w	pc, [sp], #4

08001678 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001678:	b530      	push	{r4, r5, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  uint32_t usartxbase = 0;
  RCC_ClocksTypeDef RCC_ClocksStatus;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <USART_Init+0x164>)
 8001682:	4298      	cmp	r0, r3
 8001684:	d013      	beq.n	80016ae <USART_Init+0x36>
 8001686:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800168a:	4298      	cmp	r0, r3
 800168c:	d00f      	beq.n	80016ae <USART_Init+0x36>
 800168e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001692:	4298      	cmp	r0, r3
 8001694:	d00b      	beq.n	80016ae <USART_Init+0x36>
 8001696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800169a:	4298      	cmp	r0, r3
 800169c:	d007      	beq.n	80016ae <USART_Init+0x36>
 800169e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a2:	4298      	cmp	r0, r3
 80016a4:	d003      	beq.n	80016ae <USART_Init+0x36>
 80016a6:	21ad      	movs	r1, #173	; 0xad
 80016a8:	484d      	ldr	r0, [pc, #308]	; (80017e0 <USART_Init+0x168>)
 80016aa:	f001 f8f7 	bl	800289c <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <USART_Init+0x16c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d903      	bls.n	80016c0 <USART_Init+0x48>
 80016b8:	21ae      	movs	r1, #174	; 0xae
 80016ba:	4849      	ldr	r0, [pc, #292]	; (80017e0 <USART_Init+0x168>)
 80016bc:	f001 f8ee 	bl	800289c <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80016c0:	88ab      	ldrh	r3, [r5, #4]
 80016c2:	b133      	cbz	r3, 80016d2 <USART_Init+0x5a>
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c8:	d003      	beq.n	80016d2 <USART_Init+0x5a>
 80016ca:	21af      	movs	r1, #175	; 0xaf
 80016cc:	4844      	ldr	r0, [pc, #272]	; (80017e0 <USART_Init+0x168>)
 80016ce:	f001 f8e5 	bl	800289c <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 80016d2:	88eb      	ldrh	r3, [r5, #6]
 80016d4:	b163      	cbz	r3, 80016f0 <USART_Init+0x78>
 80016d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016da:	d009      	beq.n	80016f0 <USART_Init+0x78>
 80016dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e0:	d006      	beq.n	80016f0 <USART_Init+0x78>
 80016e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016e6:	d003      	beq.n	80016f0 <USART_Init+0x78>
 80016e8:	21b0      	movs	r1, #176	; 0xb0
 80016ea:	483d      	ldr	r0, [pc, #244]	; (80017e0 <USART_Init+0x168>)
 80016ec:	f001 f8d6 	bl	800289c <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 80016f0:	892b      	ldrh	r3, [r5, #8]
 80016f2:	b14b      	cbz	r3, 8001708 <USART_Init+0x90>
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d006      	beq.n	8001708 <USART_Init+0x90>
 80016fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016fe:	d003      	beq.n	8001708 <USART_Init+0x90>
 8001700:	21b1      	movs	r1, #177	; 0xb1
 8001702:	4837      	ldr	r0, [pc, #220]	; (80017e0 <USART_Init+0x168>)
 8001704:	f001 f8ca 	bl	800289c <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8001708:	896a      	ldrh	r2, [r5, #10]
 800170a:	f022 030c 	bic.w	r3, r2, #12
 800170e:	b29b      	uxth	r3, r3
 8001710:	b903      	cbnz	r3, 8001714 <USART_Init+0x9c>
 8001712:	b91a      	cbnz	r2, 800171c <USART_Init+0xa4>
 8001714:	21b2      	movs	r1, #178	; 0xb2
 8001716:	4832      	ldr	r0, [pc, #200]	; (80017e0 <USART_Init+0x168>)
 8001718:	f001 f8c0 	bl	800289c <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 800171c:	89ab      	ldrh	r3, [r5, #12]
 800171e:	b163      	cbz	r3, 800173a <USART_Init+0xc2>
 8001720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001724:	d009      	beq.n	800173a <USART_Init+0xc2>
 8001726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172a:	d006      	beq.n	800173a <USART_Init+0xc2>
 800172c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001730:	d003      	beq.n	800173a <USART_Init+0xc2>
 8001732:	21b3      	movs	r1, #179	; 0xb3
 8001734:	482a      	ldr	r0, [pc, #168]	; (80017e0 <USART_Init+0x168>)
 8001736:	f001 f8b1 	bl	800289c <assert_failed>
  /* The hardware flow control is available only for USART1, USART2 and USART3 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 800173a:	89ab      	ldrh	r3, [r5, #12]
 800173c:	b173      	cbz	r3, 800175c <USART_Init+0xe4>
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <USART_Init+0x164>)
 8001740:	429c      	cmp	r4, r3
 8001742:	d00b      	beq.n	800175c <USART_Init+0xe4>
 8001744:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8001748:	429c      	cmp	r4, r3
 800174a:	d007      	beq.n	800175c <USART_Init+0xe4>
 800174c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001750:	429c      	cmp	r4, r3
 8001752:	d003      	beq.n	800175c <USART_Init+0xe4>
 8001754:	21b7      	movs	r1, #183	; 0xb7
 8001756:	4822      	ldr	r0, [pc, #136]	; (80017e0 <USART_Init+0x168>)
 8001758:	f001 f8a0 	bl	800289c <assert_failed>
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800175c:	8a23      	ldrh	r3, [r4, #16]
 800175e:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001760:	88ea      	ldrh	r2, [r5, #6]
 8001762:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001766:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001768:	8223      	strh	r3, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	b29b      	uxth	r3, r3
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800176e:	88aa      	ldrh	r2, [r5, #4]
 8001770:	8929      	ldrh	r1, [r5, #8]
            USART_InitStruct->USART_Mode;
 8001772:	8968      	ldrh	r0, [r5, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001774:	430a      	orrs	r2, r1
 8001776:	4302      	orrs	r2, r0
 8001778:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800177c:	f023 030c 	bic.w	r3, r3, #12
 8001780:	4313      	orrs	r3, r2
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001782:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001784:	8aa3      	ldrh	r3, [r4, #20]
 8001786:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001788:	89aa      	ldrh	r2, [r5, #12]
 800178a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800178e:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001790:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001792:	a801      	add	r0, sp, #4
 8001794:	f7ff fe6e 	bl	8001474 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <USART_Init+0x164>)
 800179a:	429c      	cmp	r4, r3
 800179c:	d101      	bne.n	80017a2 <USART_Init+0x12a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800179e:	9a04      	ldr	r2, [sp, #16]
 80017a0:	e000      	b.n	80017a4 <USART_Init+0x12c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80017a2:	9a03      	ldr	r2, [sp, #12]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 80017a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fbb2 f2f3 	udiv	r2, r2, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <USART_Init+0x170>)
 80017b6:	fba3 1002 	umull	r1, r0, r3, r2
 80017ba:	0940      	lsrs	r0, r0, #5
 80017bc:	0100      	lsls	r0, r0, #4
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 80017be:	0901      	lsrs	r1, r0, #4
 80017c0:	2564      	movs	r5, #100	; 0x64
 80017c2:	fb05 2211 	mls	r2, r5, r1, r2
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	3232      	adds	r2, #50	; 0x32
 80017ca:	fba3 2302 	umull	r2, r3, r3, r2
 80017ce:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80017d2:	4303      	orrs	r3, r0
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8123      	strh	r3, [r4, #8]
}
 80017d8:	b007      	add	sp, #28
 80017da:	bd30      	pop	{r4, r5, pc}
 80017dc:	40013800 	.word	0x40013800
 80017e0:	08007938 	.word	0x08007938
 80017e4:	0044aa1f 	.word	0x0044aa1f
 80017e8:	51eb851f 	.word	0x51eb851f

080017ec <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4604      	mov	r4, r0
 80017f0:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <USART_Cmd+0x60>)
 80017f4:	4298      	cmp	r0, r3
 80017f6:	d014      	beq.n	8001822 <USART_Cmd+0x36>
 80017f8:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d010      	beq.n	8001822 <USART_Cmd+0x36>
 8001800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001804:	4298      	cmp	r0, r3
 8001806:	d00c      	beq.n	8001822 <USART_Cmd+0x36>
 8001808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800180c:	4298      	cmp	r0, r3
 800180e:	d008      	beq.n	8001822 <USART_Cmd+0x36>
 8001810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001814:	4298      	cmp	r0, r3
 8001816:	d004      	beq.n	8001822 <USART_Cmd+0x36>
 8001818:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <USART_Cmd+0x64>)
 800181e:	f001 f83d 	bl	800289c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8001822:	2d01      	cmp	r5, #1
 8001824:	d904      	bls.n	8001830 <USART_Cmd+0x44>
 8001826:	f240 1143 	movw	r1, #323	; 0x143
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <USART_Cmd+0x64>)
 800182c:	f001 f836 	bl	800289c <assert_failed>
  
  if (NewState != DISABLE)
 8001830:	b12d      	cbz	r5, 800183e <USART_Cmd+0x52>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800183a:	81a3      	strh	r3, [r4, #12]
 800183c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001846:	b29b      	uxth	r3, r3
 8001848:	81a3      	strh	r3, [r4, #12]
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	40013800 	.word	0x40013800
 8001850:	08007938 	.word	0x08007938

08001854 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <USART_SendData+0x50>)
 800185c:	4298      	cmp	r0, r3
 800185e:	d014      	beq.n	800188a <USART_SendData+0x36>
 8001860:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8001864:	4298      	cmp	r0, r3
 8001866:	d010      	beq.n	800188a <USART_SendData+0x36>
 8001868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186c:	4298      	cmp	r0, r3
 800186e:	d00c      	beq.n	800188a <USART_SendData+0x36>
 8001870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001874:	4298      	cmp	r0, r3
 8001876:	d008      	beq.n	800188a <USART_SendData+0x36>
 8001878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800187c:	4298      	cmp	r0, r3
 800187e:	d004      	beq.n	800188a <USART_SendData+0x36>
 8001880:	f240 2132 	movw	r1, #562	; 0x232
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <USART_SendData+0x54>)
 8001886:	f001 f809 	bl	800289c <assert_failed>
  assert_param(IS_USART_DATA(Data)); 
 800188a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800188e:	d304      	bcc.n	800189a <USART_SendData+0x46>
 8001890:	f240 2133 	movw	r1, #563	; 0x233
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <USART_SendData+0x54>)
 8001896:	f001 f801 	bl	800289c <assert_failed>
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800189a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800189e:	80a5      	strh	r5, [r4, #4]
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	08007938 	.word	0x08007938

080018ac <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4605      	mov	r5, r0
 80018b0:	460c      	mov	r4, r1
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <USART_GetFlagStatus+0xa0>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d014      	beq.n	80018e2 <USART_GetFlagStatus+0x36>
 80018b8:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80018bc:	4298      	cmp	r0, r3
 80018be:	d010      	beq.n	80018e2 <USART_GetFlagStatus+0x36>
 80018c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c4:	4298      	cmp	r0, r3
 80018c6:	d00c      	beq.n	80018e2 <USART_GetFlagStatus+0x36>
 80018c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018cc:	4298      	cmp	r0, r3
 80018ce:	d008      	beq.n	80018e2 <USART_GetFlagStatus+0x36>
 80018d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d4:	4298      	cmp	r0, r3
 80018d6:	d004      	beq.n	80018e2 <USART_GetFlagStatus+0x36>
 80018d8:	f240 3113 	movw	r1, #787	; 0x313
 80018dc:	481c      	ldr	r0, [pc, #112]	; (8001950 <USART_GetFlagStatus+0xa4>)
 80018de:	f000 ffdd 	bl	800289c <assert_failed>
  assert_param(IS_USART_FLAG(USART_FLAG));
 80018e2:	2c01      	cmp	r4, #1
 80018e4:	d018      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018e6:	2c80      	cmp	r4, #128	; 0x80
 80018e8:	d016      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018ea:	2c40      	cmp	r4, #64	; 0x40
 80018ec:	d014      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018ee:	2c20      	cmp	r4, #32
 80018f0:	d012      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018f2:	2c10      	cmp	r4, #16
 80018f4:	d010      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018f6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80018fa:	d00d      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 80018fc:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001900:	d00a      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 8001902:	2c08      	cmp	r4, #8
 8001904:	d008      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 8001906:	2c04      	cmp	r4, #4
 8001908:	d006      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 800190a:	2c02      	cmp	r4, #2
 800190c:	d004      	beq.n	8001918 <USART_GetFlagStatus+0x6c>
 800190e:	f44f 7145 	mov.w	r1, #788	; 0x314
 8001912:	480f      	ldr	r0, [pc, #60]	; (8001950 <USART_GetFlagStatus+0xa4>)
 8001914:	f000 ffc2 	bl	800289c <assert_failed>
  /* The CTS flag is not available for UART4 and UART5 */
  if (USART_FLAG == USART_FLAG_CTS)
 8001918:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800191c:	d10f      	bne.n	800193e <USART_GetFlagStatus+0x92>
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <USART_GetFlagStatus+0xa0>)
 8001920:	429d      	cmp	r5, r3
 8001922:	d00c      	beq.n	800193e <USART_GetFlagStatus+0x92>
 8001924:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8001928:	429d      	cmp	r5, r3
 800192a:	d008      	beq.n	800193e <USART_GetFlagStatus+0x92>
 800192c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001930:	429d      	cmp	r5, r3
 8001932:	d004      	beq.n	800193e <USART_GetFlagStatus+0x92>
 8001934:	f44f 7146 	mov.w	r1, #792	; 0x318
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <USART_GetFlagStatus+0xa4>)
 800193a:	f000 ffaf 	bl	800289c <assert_failed>
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800193e:	882b      	ldrh	r3, [r5, #0]
 8001940:	421c      	tst	r4, r3
 8001942:	d001      	beq.n	8001948 <USART_GetFlagStatus+0x9c>
  {
    bitstatus = SET;
 8001944:	2001      	movs	r0, #1
 8001946:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    bitstatus = RESET;
 8001948:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800194a:	bd38      	pop	{r3, r4, r5, pc}
 800194c:	40013800 	.word	0x40013800
 8001950:	08007938 	.word	0x08007938

08001954 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8001954:	b508      	push	{r3, lr}
  if (Length == 0)
 8001956:	b920      	cbnz	r0, 8001962 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <Standard_GetConfiguration+0x20>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001960:	bd08      	pop	{r3, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <Standard_GetConfiguration+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800196a:	4b02      	ldr	r3, [pc, #8]	; (8001974 <Standard_GetConfiguration+0x20>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	300a      	adds	r0, #10
}
 8001970:	bd08      	pop	{r3, pc}
 8001972:	bf00      	nop
 8001974:	20000320 	.word	0x20000320
 8001978:	2000031c 	.word	0x2000031c

0800197c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800197c:	b508      	push	{r3, lr}
  if (Length == 0)
 800197e:	b920      	cbnz	r0, 800198a <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <Standard_GetInterface+0x20>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001988:	bd08      	pop	{r3, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <Standard_GetInterface+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8001992:	4b02      	ldr	r3, [pc, #8]	; (800199c <Standard_GetInterface+0x20>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	300c      	adds	r0, #12
}
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop
 800199c:	20000320 	.word	0x20000320
 80019a0:	2000031c 	.word	0x2000031c

080019a4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80019a4:	b508      	push	{r3, lr}
  if (Length == 0)
 80019a6:	b920      	cbnz	r0, 80019b2 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <Standard_GetStatus+0xac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	821a      	strh	r2, [r3, #16]
    return 0;
 80019b0:	bd08      	pop	{r3, pc}
  }

  StatusInfo.w = 0;
 80019b2:	2200      	movs	r2, #0
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <Standard_GetStatus+0xb0>)
 80019b6:	801a      	strh	r2, [r3, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <Standard_GetStatus+0xac>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	7813      	ldrb	r3, [r2, #0]
 80019be:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80019c2:	d115      	bne.n	80019f0 <Standard_GetStatus+0x4c>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80019c4:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80019c6:	f013 0f20 	tst.w	r3, #32
 80019ca:	d002      	beq.n	80019d2 <Standard_GetStatus+0x2e>
    {
      SetBit(StatusInfo0, 1);
 80019cc:	2102      	movs	r1, #2
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <Standard_GetStatus+0xb0>)
 80019d0:	7011      	strb	r1, [r2, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80019d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019d6:	d005      	beq.n	80019e4 <Standard_GetStatus+0x40>
    {
      ClrBit(StatusInfo0, 0);
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <Standard_GetStatus+0xb0>)
 80019da:	7813      	ldrb	r3, [r2, #0]
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	7013      	strb	r3, [r2, #0]
 80019e2:	e02b      	b.n	8001a3c <Standard_GetStatus+0x98>
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <Standard_GetStatus+0xb0>)
 80019e6:	7813      	ldrb	r3, [r2, #0]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	7013      	strb	r3, [r2, #0]
 80019ee:	e025      	b.n	8001a3c <Standard_GetStatus+0x98>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d029      	beq.n	8001a48 <Standard_GetStatus+0xa4>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d129      	bne.n	8001a4c <Standard_GetStatus+0xa8>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80019f8:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80019fa:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
 80019fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001a02:	d00d      	beq.n	8001a20 <Standard_GetStatus+0x7c>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a0a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d111      	bne.n	8001a3c <Standard_GetStatus+0x98>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <Standard_GetStatus+0xb0>)
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e00d      	b.n	8001a3c <Standard_GetStatus+0x98>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a26:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	d102      	bne.n	8001a3c <Standard_GetStatus+0x98>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001a36:	2201      	movs	r2, #1
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <Standard_GetStatus+0xb0>)
 8001a3a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <Standard_GetStatus+0xb4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <Standard_GetStatus+0xb0>)
 8001a46:	bd08      	pop	{r3, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <Standard_GetStatus+0xb0>)
 8001a4a:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 8001a4c:	2000      	movs	r0, #0
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	20000320 	.word	0x20000320
 8001a54:	200002f0 	.word	0x200002f0
 8001a58:	2000031c 	.word	0x2000031c

08001a5c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <DataStageIn+0x98>)
 8001a60:	681d      	ldr	r5, [r3, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8001a62:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;
 8001a64:	7a2b      	ldrb	r3, [r5, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001a66:	b9cc      	cbnz	r4, 8001a9c <DataStageIn+0x40>
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d117      	bne.n	8001a9c <DataStageIn+0x40>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <DataStageIn+0x9c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10e      	bne.n	8001a92 <DataStageIn+0x36>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <DataStageIn+0xa0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <DataStageIn+0xa4>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	2130      	movs	r1, #48	; 0x30
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <DataStageIn+0xa8>)
 8001a88:	8019      	strh	r1, [r3, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <DataStageIn+0x9c>)
 8001a8c:	701a      	strb	r2, [r3, #0]
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
      ControlState = LAST_IN_DATA;
 8001a8e:	2604      	movs	r6, #4
 8001a90:	e02b      	b.n	8001aea <DataStageIn+0x8e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001a92:	2210      	movs	r2, #16
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <DataStageIn+0xa8>)
 8001a96:	801a      	strh	r2, [r3, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8001a98:	2607      	movs	r6, #7
 8001a9a:	e026      	b.n	8001aea <DataStageIn+0x8e>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001a9c:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001a9e:	429c      	cmp	r4, r3
 8001aa0:	d801      	bhi.n	8001aa6 <DataStageIn+0x4a>
 8001aa2:	2604      	movs	r6, #4
 8001aa4:	e000      	b.n	8001aa8 <DataStageIn+0x4c>
 8001aa6:	2602      	movs	r6, #2

  if (Length > save_wLength)
 8001aa8:	429c      	cmp	r4, r3
 8001aaa:	d300      	bcc.n	8001aae <DataStageIn+0x52>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001aac:	461c      	mov	r4, r3
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001aae:	69ab      	ldr	r3, [r5, #24]
 8001ab0:	b2a4      	uxth	r4, r4
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4798      	blx	r3
 8001ab6:	4607      	mov	r7, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 fe95 	bl	80027e8 <GetEPTxAddr>
 8001abe:	4622      	mov	r2, r4
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f000 fdaa 	bl	800261c <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8001ac8:	4621      	mov	r1, r4
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 fea8 	bl	8002820 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001ad0:	8a2b      	ldrh	r3, [r5, #16]
 8001ad2:	1b1b      	subs	r3, r3, r4
 8001ad4:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8001ad6:	8a6b      	ldrh	r3, [r5, #18]
 8001ad8:	441c      	add	r4, r3
 8001ada:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8001adc:	2230      	movs	r2, #48	; 0x30
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <DataStageIn+0xa8>)
 8001ae0:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001ae2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <DataStageIn+0xac>)
 8001ae8:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001aea:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <DataStageIn+0x98>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	721e      	strb	r6, [r3, #8]
 8001af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000320 	.word	0x20000320
 8001af8:	200002cc 	.word	0x200002cc
 8001afc:	40005c50 	.word	0x40005c50
 8001b00:	20003002 	.word	0x20003002
 8001b04:	20000328 	.word	0x20000328
 8001b08:	20000326 	.word	0x20000326

08001b0c <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	b082      	sub	sp, #8
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <Data_Setup0+0x1f8>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	7853      	ldrb	r3, [r2, #1]


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d116      	bne.n	8001b48 <Data_Setup0+0x3c>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001b1a:	7813      	ldrb	r3, [r2, #0]
 8001b1c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
 8001b20:	d178      	bne.n	8001c14 <Data_Setup0+0x108>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8001b22:	7893      	ldrb	r3, [r2, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <Data_Setup0+0x24>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001b28:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <Data_Setup0+0x1fc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	e090      	b.n	8001c52 <Data_Setup0+0x146>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d103      	bne.n	8001b3c <Data_Setup0+0x30>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001b34:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <Data_Setup0+0x1fc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	e08a      	b.n	8001c52 <Data_Setup0+0x146>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d16b      	bne.n	8001c18 <Data_Setup0+0x10c>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001b40:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <Data_Setup0+0x1fc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	e084      	b.n	8001c52 <Data_Setup0+0x146>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d141      	bne.n	8001bd0 <Data_Setup0+0xc4>
 8001b4c:	8851      	ldrh	r1, [r2, #2]
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d13e      	bne.n	8001bd0 <Data_Setup0+0xc4>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001b52:	6851      	ldr	r1, [r2, #4]
 8001b54:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8001b58:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001b5c:	d138      	bne.n	8001bd0 <Data_Setup0+0xc4>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001b5e:	7813      	ldrb	r3, [r2, #0]
 8001b60:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001b64:	d102      	bne.n	8001b6c <Data_Setup0+0x60>
        && (pInformation->USBwIndex == 0))
 8001b66:	8891      	ldrh	r1, [r2, #4]
 8001b68:	2900      	cmp	r1, #0
 8001b6a:	d057      	beq.n	8001c1c <Data_Setup0+0x110>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10d      	bne.n	8001b8c <Data_Setup0+0x80>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001b70:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <Data_Setup0+0x1fc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2100      	movs	r1, #0
 8001b78:	7950      	ldrb	r0, [r2, #5]
 8001b7a:	4798      	blx	r3
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d14f      	bne.n	8001c20 <Data_Setup0+0x114>
          && (pInformation->Current_Configuration != 0))
 8001b80:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <Data_Setup0+0x1f8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	7a9b      	ldrb	r3, [r3, #10]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d14c      	bne.n	8001c24 <Data_Setup0+0x118>
 8001b8a:	e062      	b.n	8001c52 <Data_Setup0+0x146>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d14b      	bne.n	8001c28 <Data_Setup0+0x11c>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001b90:	7953      	ldrb	r3, [r2, #5]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	f003 0070 	and.w	r0, r3, #112	; 0x70
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001b9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b9e:	d008      	beq.n	8001bb2 <Data_Setup0+0xa6>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001ba0:	0093      	lsls	r3, r2, #2
 8001ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ba6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bb0:	e007      	b.n	8001bc2 <Data_Setup0+0xb6>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001bb2:	0093      	lsls	r3, r2, #2
 8001bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bb8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001bc2:	4952      	ldr	r1, [pc, #328]	; (8001d0c <Data_Setup0+0x200>)
 8001bc4:	7809      	ldrb	r1, [r1, #0]
 8001bc6:	428a      	cmp	r2, r1
 8001bc8:	d230      	bcs.n	8001c2c <Data_Setup0+0x120>
 8001bca:	bb88      	cbnz	r0, 8001c30 <Data_Setup0+0x124>
          && (Status != 0))
 8001bcc:	bb93      	cbnz	r3, 8001c34 <Data_Setup0+0x128>
 8001bce:	e040      	b.n	8001c52 <Data_Setup0+0x146>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d105      	bne.n	8001be0 <Data_Setup0+0xd4>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001bd4:	7813      	ldrb	r3, [r2, #0]
 8001bd6:	f013 0f7f 	tst.w	r3, #127	; 0x7f
 8001bda:	d02d      	beq.n	8001c38 <Data_Setup0+0x12c>
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e038      	b.n	8001c52 <Data_Setup0+0x146>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d12b      	bne.n	8001c3c <Data_Setup0+0x130>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001be4:	7813      	ldrb	r3, [r2, #0]
 8001be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d128      	bne.n	8001c40 <Data_Setup0+0x134>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001bee:	7a93      	ldrb	r3, [r2, #10]
 8001bf0:	b343      	cbz	r3, 8001c44 <Data_Setup0+0x138>
 8001bf2:	8853      	ldrh	r3, [r2, #2]
 8001bf4:	bb43      	cbnz	r3, 8001c48 <Data_Setup0+0x13c>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001bf6:	6853      	ldr	r3, [r2, #4]
 8001bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d124      	bne.n	8001c4c <Data_Setup0+0x140>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <Data_Setup0+0x1fc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2100      	movs	r1, #0
 8001c0a:	7950      	ldrb	r0, [r2, #5]
 8001c0c:	4798      	blx	r3
 8001c0e:	b1f8      	cbz	r0, 8001c50 <Data_Setup0+0x144>
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e01e      	b.n	8001c52 <Data_Setup0+0x146>
 8001c14:	2300      	movs	r3, #0
 8001c16:	e01c      	b.n	8001c52 <Data_Setup0+0x146>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e01a      	b.n	8001c52 <Data_Setup0+0x146>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <Data_Setup0+0x204>)
 8001c1e:	e018      	b.n	8001c52 <Data_Setup0+0x146>
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e016      	b.n	8001c52 <Data_Setup0+0x146>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
          && (pInformation->Current_Configuration != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <Data_Setup0+0x204>)
 8001c26:	e014      	b.n	8001c52 <Data_Setup0+0x146>
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e012      	b.n	8001c52 <Data_Setup0+0x146>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e010      	b.n	8001c52 <Data_Setup0+0x146>
 8001c30:	2300      	movs	r3, #0
 8001c32:	e00e      	b.n	8001c52 <Data_Setup0+0x146>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <Data_Setup0+0x204>)
 8001c36:	e00c      	b.n	8001c52 <Data_Setup0+0x146>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <Data_Setup0+0x208>)
 8001c3a:	e00a      	b.n	8001c52 <Data_Setup0+0x146>
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e008      	b.n	8001c52 <Data_Setup0+0x146>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e006      	b.n	8001c52 <Data_Setup0+0x146>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e004      	b.n	8001c52 <Data_Setup0+0x146>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e002      	b.n	8001c52 <Data_Setup0+0x146>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <Data_Setup0+0x146>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <Data_Setup0+0x20c>)
    }

  }
  
  if (CopyRoutine)
 8001c52:	b143      	cbz	r3, 8001c66 <Data_Setup0+0x15a>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <Data_Setup0+0x1f8>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	2400      	movs	r4, #0
 8001c5a:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001c5c:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001c62:	4620      	mov	r0, r4
 8001c64:	e00d      	b.n	8001c82 <Data_Setup0+0x176>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <Data_Setup0+0x1fc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <Data_Setup0+0x1f8>)
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	7850      	ldrb	r0, [r2, #1]
 8001c72:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001c74:	2803      	cmp	r0, #3
 8001c76:	d104      	bne.n	8001c82 <Data_Setup0+0x176>
    {
      pInformation->ControlState = PAUSE;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <Data_Setup0+0x1f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2209      	movs	r2, #9
 8001c7e:	721a      	strb	r2, [r3, #8]
      return;
 8001c80:	e03e      	b.n	8001d00 <Data_Setup0+0x1f4>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <Data_Setup0+0x1f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	8a1a      	ldrh	r2, [r3, #16]
 8001c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	d102      	bne.n	8001c96 <Data_Setup0+0x18a>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001c90:	2209      	movs	r2, #9
 8001c92:	721a      	strb	r2, [r3, #8]
    return;
 8001c94:	e034      	b.n	8001d00 <Data_Setup0+0x1f4>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001c96:	2802      	cmp	r0, #2
 8001c98:	d000      	beq.n	8001c9c <Data_Setup0+0x190>
 8001c9a:	b912      	cbnz	r2, 8001ca2 <Data_Setup0+0x196>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	721a      	strb	r2, [r3, #8]
    return;
 8001ca0:	e02e      	b.n	8001d00 <Data_Setup0+0x1f4>
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001ca2:	f993 1000 	ldrsb.w	r1, [r3]
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	da24      	bge.n	8001cf4 <Data_Setup0+0x1e8>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001caa:	88d9      	ldrh	r1, [r3, #6]
 8001cac:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001cae:	9801      	ldr	r0, [sp, #4]
 8001cb0:	4282      	cmp	r2, r0
 8001cb2:	d902      	bls.n	8001cba <Data_Setup0+0x1ae>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001cb4:	9a01      	ldr	r2, [sp, #4]
 8001cb6:	821a      	strh	r2, [r3, #16]
 8001cb8:	e014      	b.n	8001ce4 <Data_Setup0+0x1d8>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d212      	bcs.n	8001ce4 <Data_Setup0+0x1d8>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001cbe:	4912      	ldr	r1, [pc, #72]	; (8001d08 <Data_Setup0+0x1fc>)
 8001cc0:	6809      	ldr	r1, [r1, #0]
 8001cc2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8001cc6:	b288      	uxth	r0, r1
 8001cc8:	4282      	cmp	r2, r0
 8001cca:	d203      	bcs.n	8001cd4 <Data_Setup0+0x1c8>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <Data_Setup0+0x210>)
 8001cd0:	7011      	strb	r1, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <Data_Setup0+0x1d8>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8001cd4:	fb92 f0f1 	sdiv	r0, r2, r1
 8001cd8:	fb01 2210 	mls	r2, r1, r0, r2
 8001cdc:	b912      	cbnz	r2, 8001ce4 <Data_Setup0+0x1d8>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <Data_Setup0+0x210>)
 8001ce2:	7011      	strb	r1, [r2, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001ce4:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <Data_Setup0+0x1fc>)
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001cec:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001cee:	f7ff feb5 	bl	8001a5c <DataStageIn>
 8001cf2:	e005      	b.n	8001d00 <Data_Setup0+0x1f4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001cf8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <Data_Setup0+0x214>)
 8001cfe:	801a      	strh	r2, [r3, #0]
  }

  return;
}
 8001d00:	b002      	add	sp, #8
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	20000320 	.word	0x20000320
 8001d08:	200002f8 	.word	0x200002f8
 8001d0c:	200000a0 	.word	0x200000a0
 8001d10:	080019a5 	.word	0x080019a5
 8001d14:	08001955 	.word	0x08001955
 8001d18:	0800197d 	.word	0x0800197d
 8001d1c:	200002cc 	.word	0x200002cc
 8001d20:	20000326 	.word	0x20000326

08001d24 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <DataStageOut+0x94>)
 8001d28:	681c      	ldr	r4, [r3, #0]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001d2a:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001d2c:	69a3      	ldr	r3, [r4, #24]
 8001d2e:	b1b3      	cbz	r3, 8001d5e <DataStageOut+0x3a>
 8001d30:	b1aa      	cbz	r2, 8001d5e <DataStageOut+0x3a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001d32:	8aa1      	ldrh	r1, [r4, #20]
    if (Length > save_rLength)
 8001d34:	428a      	cmp	r2, r1
 8001d36:	d300      	bcc.n	8001d3a <DataStageOut+0x16>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001d38:	460a      	mov	r2, r1
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001d3a:	b295      	uxth	r5, r2
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	4798      	blx	r3
 8001d40:	4606      	mov	r6, r0
    pEPinfo->Usb_rLength -= Length;
 8001d42:	8a23      	ldrh	r3, [r4, #16]
 8001d44:	1b5b      	subs	r3, r3, r5
 8001d46:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001d48:	8a63      	ldrh	r3, [r4, #18]
 8001d4a:	442b      	add	r3, r5
 8001d4c:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 fd58 	bl	8002804 <GetEPRxAddr>
 8001d54:	462a      	mov	r2, r5
 8001d56:	4601      	mov	r1, r0
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f000 fc75 	bl	8002648 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8001d5e:	8a23      	ldrh	r3, [r4, #16]
 8001d60:	b153      	cbz	r3, 8001d78 <DataStageOut+0x54>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001d62:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <DataStageOut+0x98>)
 8001d68:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	f000 fd57 	bl	8002820 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <DataStageOut+0x9c>)
 8001d76:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001d78:	8a23      	ldrh	r3, [r4, #16]
 8001d7a:	8aa2      	ldrh	r2, [r4, #20]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d304      	bcc.n	8001d8a <DataStageOut+0x66>
  {
    pInformation->ControlState = OUT_DATA;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <DataStageOut+0x94>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2203      	movs	r2, #3
 8001d86:	721a      	strb	r2, [r3, #8]
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001d8a:	b123      	cbz	r3, 8001d96 <DataStageOut+0x72>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <DataStageOut+0x94>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2205      	movs	r2, #5
 8001d92:	721a      	strb	r2, [r3, #8]
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if (pEPinfo->Usb_rLength == 0)
 8001d96:	b973      	cbnz	r3, 8001db6 <DataStageOut+0x92>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <DataStageOut+0x94>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2206      	movs	r2, #6
 8001d9e:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <DataStageOut+0xa0>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	b292      	uxth	r2, r2
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <DataStageOut+0xa4>)
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	2230      	movs	r2, #48	; 0x30
 8001db2:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <DataStageOut+0x9c>)
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
 8001db8:	20000320 	.word	0x20000320
 8001dbc:	20000326 	.word	0x20000326
 8001dc0:	20000328 	.word	0x20000328
 8001dc4:	40005c50 	.word	0x40005c50
 8001dc8:	20003002 	.word	0x20003002

08001dcc <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001dcc:	b508      	push	{r3, lr}

  if ((pInformation->USBwValue0 <=
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <Standard_SetConfiguration+0x34>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001dd4:	490b      	ldr	r1, [pc, #44]	; (8001e04 <Standard_SetConfiguration+0x38>)
 8001dd6:	7849      	ldrb	r1, [r1, #1]
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d80a      	bhi.n	8001df2 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001ddc:	7899      	ldrb	r1, [r3, #2]
 8001dde:	b951      	cbnz	r1, 8001df6 <Standard_SetConfiguration+0x2a>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001de0:	8899      	ldrh	r1, [r3, #4]
 8001de2:	b951      	cbnz	r1, 8001dfa <Standard_SetConfiguration+0x2e>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001de4:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <Standard_SetConfiguration+0x3c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4798      	blx	r3
    return USB_SUCCESS;
 8001dee:	2000      	movs	r0, #0
 8001df0:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001df2:	2002      	movs	r0, #2
 8001df4:	bd08      	pop	{r3, pc}
 8001df6:	2002      	movs	r0, #2
 8001df8:	bd08      	pop	{r3, pc}
 8001dfa:	2002      	movs	r0, #2
  }
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000320 	.word	0x20000320
 8001e04:	200000a0 	.word	0x200000a0
 8001e08:	2000031c 	.word	0x2000031c

08001e0c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001e0c:	b510      	push	{r4, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Standard_SetInterface+0x50>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	4c12      	ldr	r4, [pc, #72]	; (8001e60 <Standard_SetInterface+0x54>)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	78d9      	ldrb	r1, [r3, #3]
 8001e1a:	7958      	ldrb	r0, [r3, #5]
 8001e1c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	7a9a      	ldrb	r2, [r3, #10]
 8001e22:	b182      	cbz	r2, 8001e46 <Standard_SetInterface+0x3a>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001e24:	b988      	cbnz	r0, 8001e4a <Standard_SetInterface+0x3e>
 8001e26:	791a      	ldrb	r2, [r3, #4]
 8001e28:	b98a      	cbnz	r2, 8001e4e <Standard_SetInterface+0x42>
        || (pInformation->USBwValue1 != 0))
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	b98b      	cbnz	r3, 8001e52 <Standard_SetInterface+0x46>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
 8001e2e:	b990      	cbnz	r0, 8001e56 <Standard_SetInterface+0x4a>
    {
      pUser_Standard_Requests->User_SetInterface();
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <Standard_SetInterface+0x58>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	795a      	ldrb	r2, [r3, #5]
 8001e3c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001e3e:	78da      	ldrb	r2, [r3, #3]
 8001e40:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8001e42:	2000      	movs	r0, #0
 8001e44:	bd10      	pop	{r4, pc}
    }

  }

  return USB_UNSUPPORT;
 8001e46:	2002      	movs	r0, #2
 8001e48:	bd10      	pop	{r4, pc}
  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
        || (pInformation->USBwValue1 != 0))
    {
      return  USB_UNSUPPORT;
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	2002      	movs	r0, #2
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	2002      	movs	r0, #2
 8001e54:	bd10      	pop	{r4, pc}
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8001e56:	2002      	movs	r0, #2
}
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002f8 	.word	0x200002f8
 8001e60:	20000320 	.word	0x20000320
 8001e64:	2000031c 	.word	0x2000031c

08001e68 <Standard_ClearFeature>:
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
  uint32_t     Type_Rec = Type_Recipient;
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <Standard_ClearFeature+0x108>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	7813      	ldrb	r3, [r2, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e6e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001e72:	d105      	bne.n	8001e80 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001e74:	7a53      	ldrb	r3, [r2, #9]
 8001e76:	f023 0320 	bic.w	r3, r3, #32
 8001e7a:	7253      	strb	r3, [r2, #9]
    return USB_SUCCESS;
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4770      	bx	lr
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d168      	bne.n	8001f56 <Standard_ClearFeature+0xee>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001e84:	8853      	ldrh	r3, [r2, #2]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d167      	bne.n	8001f5a <Standard_ClearFeature+0xf2>
        || (pInformation->USBwIndex1 != 0))
 8001e8a:	7913      	ldrb	r3, [r2, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d166      	bne.n	8001f5e <Standard_ClearFeature+0xf6>
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001e90:	b510      	push	{r4, lr}
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001e92:	7951      	ldrb	r1, [r2, #5]
    rEP = wIndex0 & ~0x80;
 8001e94:	f021 0080 	bic.w	r0, r1, #128	; 0x80
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001e98:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e9c:	d008      	beq.n	8001eb0 <Standard_ClearFeature+0x48>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001e9e:	0083      	lsls	r3, r0, #2
 8001ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ea4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001eae:	e007      	b.n	8001ec0 <Standard_ClearFeature+0x58>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001eb0:	0083      	lsls	r3, r0, #2
 8001eb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eb6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001ec0:	4c2c      	ldr	r4, [pc, #176]	; (8001f74 <Standard_ClearFeature+0x10c>)
 8001ec2:	7824      	ldrb	r4, [r4, #0]
 8001ec4:	42a0      	cmp	r0, r4
 8001ec6:	d24c      	bcs.n	8001f62 <Standard_ClearFeature+0xfa>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d04c      	beq.n	8001f66 <Standard_ClearFeature+0xfe>
        || (pInformation->Current_Configuration == 0))
 8001ecc:	7a93      	ldrb	r3, [r2, #10]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d04b      	beq.n	8001f6a <Standard_ClearFeature+0x102>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001ed2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ed6:	d012      	beq.n	8001efe <Standard_ClearFeature+0x96>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001ed8:	0083      	lsls	r3, r0, #2
 8001eda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ede:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d12e      	bne.n	8001f4a <Standard_ClearFeature+0xe2>
      {
        ClearDTOG_TX(Related_Endpoint);
 8001eec:	b2c4      	uxtb	r4, r0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f000 fc46 	bl	8002780 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001ef4:	2130      	movs	r1, #48	; 0x30
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f000 fbcc 	bl	8002694 <SetEPTxStatus>
 8001efc:	e025      	b.n	8001f4a <Standard_ClearFeature+0xe2>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001efe:	0084      	lsls	r4, r0, #2
 8001f00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001f04:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f12:	d11a      	bne.n	8001f4a <Standard_ClearFeature+0xe2>
      {
        if (Related_Endpoint == ENDP0)
 8001f14:	b970      	cbnz	r0, 8001f34 <Standard_ClearFeature+0xcc>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <Standard_ClearFeature+0x110>)
 8001f18:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001f1c:	f000 fc8e 	bl	800283c <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	e00a      	b.n	8001f4a <Standard_ClearFeature+0xe2>
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001f34:	f000 fc10 	bl	8002758 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f44:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f48:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <Standard_ClearFeature+0x114>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	4798      	blx	r3
    return USB_SUCCESS;
 8001f52:	2000      	movs	r0, #0
 8001f54:	bd10      	pop	{r4, pc}
  }

  return USB_UNSUPPORT;
 8001f56:	2002      	movs	r0, #2
}
 8001f58:	4770      	bx	lr
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
        || (pInformation->USBwIndex1 != 0))
    {
      return USB_UNSUPPORT;
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	4770      	bx	lr
 8001f5e:	2002      	movs	r0, #2
 8001f60:	4770      	bx	lr
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 8001f62:	2002      	movs	r0, #2
 8001f64:	bd10      	pop	{r4, pc}
 8001f66:	2002      	movs	r0, #2
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	2002      	movs	r0, #2
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
}
 8001f6c:	bd10      	pop	{r4, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000320 	.word	0x20000320
 8001f74:	200000a0 	.word	0x200000a0
 8001f78:	20000038 	.word	0x20000038
 8001f7c:	2000031c 	.word	0x2000031c

08001f80 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001f80:	b510      	push	{r4, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t   Status;

  wIndex0 = pInformation->USBwIndex0;
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <Standard_SetEndPointFeature+0xa4>)
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	7941      	ldrb	r1, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8001f88:	f021 0280 	bic.w	r2, r1, #128	; 0x80
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001f8c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f90:	d008      	beq.n	8001fa4 <Standard_SetEndPointFeature+0x24>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001f92:	0093      	lsls	r3, r2, #2
 8001f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001fa2:	e007      	b.n	8001fb4 <Standard_SetEndPointFeature+0x34>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001fa4:	0093      	lsls	r3, r2, #2
 8001fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001faa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001fb4:	4c1c      	ldr	r4, [pc, #112]	; (8002028 <Standard_SetEndPointFeature+0xa8>)
 8001fb6:	7824      	ldrb	r4, [r4, #0]
 8001fb8:	42a2      	cmp	r2, r4
 8001fba:	d22a      	bcs.n	8002012 <Standard_SetEndPointFeature+0x92>
      || pInformation->USBwValue != 0 || Status == 0
 8001fbc:	8844      	ldrh	r4, [r0, #2]
 8001fbe:	bb54      	cbnz	r4, 8002016 <Standard_SetEndPointFeature+0x96>
 8001fc0:	b35b      	cbz	r3, 800201a <Standard_SetEndPointFeature+0x9a>
      || pInformation->Current_Configuration == 0)
 8001fc2:	7a83      	ldrb	r3, [r0, #10]
 8001fc4:	b35b      	cbz	r3, 800201e <Standard_SetEndPointFeature+0x9e>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001fc6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fca:	d00e      	beq.n	8001fea <Standard_SetEndPointFeature+0x6a>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001fcc:	0093      	lsls	r3, r2, #2
 8001fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fd2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe2:	f082 0210 	eor.w	r2, r2, #16
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e00d      	b.n	8002006 <Standard_SetEndPointFeature+0x86>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001fea:	0093      	lsls	r3, r2, #2
 8001fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ff0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ffc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002000:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8002004:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <Standard_SetEndPointFeature+0xac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4798      	blx	r3
  return USB_SUCCESS;
 800200e:	2000      	movs	r0, #0
 8002010:	bd10      	pop	{r4, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8002012:	2002      	movs	r0, #2
 8002014:	bd10      	pop	{r4, pc}
 8002016:	2002      	movs	r0, #2
 8002018:	bd10      	pop	{r4, pc}
 800201a:	2002      	movs	r0, #2
 800201c:	bd10      	pop	{r4, pc}
 800201e:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8002020:	bd10      	pop	{r4, pc}
 8002022:	bf00      	nop
 8002024:	20000320 	.word	0x20000320
 8002028:	200000a0 	.word	0x200000a0
 800202c:	2000031c 	.word	0x2000031c

08002030 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8002030:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <Standard_SetDeviceFeature+0x1c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	7a53      	ldrb	r3, [r2, #9]
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <Standard_SetDeviceFeature+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4798      	blx	r3
  return USB_SUCCESS;
}
 8002046:	2000      	movs	r0, #0
 8002048:	bd08      	pop	{r3, pc}
 800204a:	bf00      	nop
 800204c:	20000320 	.word	0x20000320
 8002050:	2000031c 	.word	0x2000031c

08002054 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 8002054:	b510      	push	{r4, lr}
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <NoData_Setup0+0x10c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	7854      	ldrb	r4, [r2, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800205c:	7813      	ldrb	r3, [r2, #0]
 800205e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002062:	d131      	bne.n	80020c8 <NoData_Setup0+0x74>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002064:	2c09      	cmp	r4, #9
 8002066:	d102      	bne.n	800206e <NoData_Setup0+0x1a>
    {
      Result = Standard_SetConfiguration();
 8002068:	f7ff feb0 	bl	8001dcc <Standard_SetConfiguration>
 800206c:	e052      	b.n	8002114 <NoData_Setup0+0xc0>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800206e:	2c05      	cmp	r4, #5
 8002070:	d10e      	bne.n	8002090 <NoData_Setup0+0x3c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002072:	f992 3003 	ldrsb.w	r3, [r2, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db62      	blt.n	8002140 <NoData_Setup0+0xec>
 800207a:	7893      	ldrb	r3, [r2, #2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d161      	bne.n	8002144 <NoData_Setup0+0xf0>
          || (pInformation->USBwIndex != 0)
 8002080:	8893      	ldrh	r3, [r2, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d160      	bne.n	8002148 <NoData_Setup0+0xf4>
          || (pInformation->Current_Configuration != 0))
 8002086:	7a93      	ldrb	r3, [r2, #10]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d15f      	bne.n	800214c <NoData_Setup0+0xf8>
        ControlState = STALLED;
        goto exit_NoData_Setup0;
      }
      else
      {
        Result = USB_SUCCESS;
 800208c:	2000      	movs	r0, #0
 800208e:	e041      	b.n	8002114 <NoData_Setup0+0xc0>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002090:	2c03      	cmp	r4, #3
 8002092:	d10b      	bne.n	80020ac <NoData_Setup0+0x58>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8002094:	78d3      	ldrb	r3, [r2, #3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d129      	bne.n	80020ee <NoData_Setup0+0x9a>
          && (pInformation->USBwIndex == 0)
 800209a:	8893      	ldrh	r3, [r2, #4]
 800209c:	bb4b      	cbnz	r3, 80020f2 <NoData_Setup0+0x9e>
          && (ValBit(pInformation->Current_Feature, 5)))
 800209e:	7a53      	ldrb	r3, [r2, #9]
 80020a0:	f013 0f20 	tst.w	r3, #32
 80020a4:	d027      	beq.n	80020f6 <NoData_Setup0+0xa2>
      {
        Result = Standard_SetDeviceFeature();
 80020a6:	f7ff ffc3 	bl	8002030 <Standard_SetDeviceFeature>
 80020aa:	e033      	b.n	8002114 <NoData_Setup0+0xc0>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80020ac:	2c01      	cmp	r4, #1
 80020ae:	d124      	bne.n	80020fa <NoData_Setup0+0xa6>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80020b0:	78d3      	ldrb	r3, [r2, #3]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d123      	bne.n	80020fe <NoData_Setup0+0xaa>
          && pInformation->USBwIndex == 0
 80020b6:	8893      	ldrh	r3, [r2, #4]
 80020b8:	bb1b      	cbnz	r3, 8002102 <NoData_Setup0+0xae>
          && ValBit(pInformation->Current_Feature, 5))
 80020ba:	7a53      	ldrb	r3, [r2, #9]
 80020bc:	f013 0f20 	tst.w	r3, #32
 80020c0:	d021      	beq.n	8002106 <NoData_Setup0+0xb2>
      {
        Result = Standard_ClearFeature();
 80020c2:	f7ff fed1 	bl	8001e68 <Standard_ClearFeature>
 80020c6:	e025      	b.n	8002114 <NoData_Setup0+0xc0>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d104      	bne.n	80020d6 <NoData_Setup0+0x82>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80020cc:	2c0b      	cmp	r4, #11
 80020ce:	d11c      	bne.n	800210a <NoData_Setup0+0xb6>
    {
      Result = Standard_SetInterface();
 80020d0:	f7ff fe9c 	bl	8001e0c <Standard_SetInterface>
 80020d4:	e01e      	b.n	8002114 <NoData_Setup0+0xc0>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d119      	bne.n	800210e <NoData_Setup0+0xba>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80020da:	2c01      	cmp	r4, #1
 80020dc:	d102      	bne.n	80020e4 <NoData_Setup0+0x90>
    {
      Result = Standard_ClearFeature();
 80020de:	f7ff fec3 	bl	8001e68 <Standard_ClearFeature>
 80020e2:	e017      	b.n	8002114 <NoData_Setup0+0xc0>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80020e4:	2c03      	cmp	r4, #3
 80020e6:	d114      	bne.n	8002112 <NoData_Setup0+0xbe>
    {
      Result = Standard_SetEndPointFeature();
 80020e8:	f7ff ff4a 	bl	8001f80 <Standard_SetEndPointFeature>
 80020ec:	e012      	b.n	8002114 <NoData_Setup0+0xc0>
      {
        Result = Standard_SetDeviceFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 80020ee:	2002      	movs	r0, #2
 80020f0:	e010      	b.n	8002114 <NoData_Setup0+0xc0>
 80020f2:	2002      	movs	r0, #2
 80020f4:	e00e      	b.n	8002114 <NoData_Setup0+0xc0>
 80020f6:	2002      	movs	r0, #2
 80020f8:	e00c      	b.n	8002114 <NoData_Setup0+0xc0>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
 80020fa:	2002      	movs	r0, #2
 80020fc:	e00a      	b.n	8002114 <NoData_Setup0+0xc0>
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 80020fe:	2002      	movs	r0, #2
 8002100:	e008      	b.n	8002114 <NoData_Setup0+0xc0>
 8002102:	2002      	movs	r0, #2
 8002104:	e006      	b.n	8002114 <NoData_Setup0+0xc0>
 8002106:	2002      	movs	r0, #2
 8002108:	e004      	b.n	8002114 <NoData_Setup0+0xc0>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
 800210a:	2002      	movs	r0, #2
 800210c:	e002      	b.n	8002114 <NoData_Setup0+0xc0>
      Result = Standard_SetEndPointFeature();
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 800210e:	2002      	movs	r0, #2
 8002110:	e000      	b.n	8002114 <NoData_Setup0+0xc0>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
 8002112:	2002      	movs	r0, #2
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002114:	b130      	cbz	r0, 8002124 <NoData_Setup0+0xd0>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <NoData_Setup0+0x110>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	4620      	mov	r0, r4
 800211e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002120:	2803      	cmp	r0, #3
 8002122:	d015      	beq.n	8002150 <NoData_Setup0+0xfc>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8002124:	b9b0      	cbnz	r0, 8002154 <NoData_Setup0+0x100>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <NoData_Setup0+0x114>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	b292      	uxth	r2, r2
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <NoData_Setup0+0x118>)
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	2230      	movs	r2, #48	; 0x30
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <NoData_Setup0+0x11c>)
 800213a:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800213c:	2206      	movs	r2, #6
 800213e:	e00a      	b.n	8002156 <NoData_Setup0+0x102>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8002140:	2208      	movs	r2, #8
 8002142:	e008      	b.n	8002156 <NoData_Setup0+0x102>
 8002144:	2208      	movs	r2, #8
 8002146:	e006      	b.n	8002156 <NoData_Setup0+0x102>
 8002148:	2208      	movs	r2, #8
 800214a:	e004      	b.n	8002156 <NoData_Setup0+0x102>
 800214c:	2208      	movs	r2, #8
 800214e:	e002      	b.n	8002156 <NoData_Setup0+0x102>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8002150:	2209      	movs	r2, #9
 8002152:	e000      	b.n	8002156 <NoData_Setup0+0x102>
    }
  }

  if (Result != USB_SUCCESS)
  {
    ControlState = STALLED;
 8002154:	2208      	movs	r2, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002156:	4b02      	ldr	r3, [pc, #8]	; (8002160 <NoData_Setup0+0x10c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	721a      	strb	r2, [r3, #8]
 800215c:	bd10      	pop	{r4, pc}
 800215e:	bf00      	nop
 8002160:	20000320 	.word	0x20000320
 8002164:	200002f8 	.word	0x200002f8
 8002168:	40005c50 	.word	0x40005c50
 800216c:	20003002 	.word	0x20003002
 8002170:	20000328 	.word	0x20000328

08002174 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <Standard_GetDescriptorData+0x18>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800217a:	b920      	cbnz	r0, 8002186 <Standard_GetDescriptorData+0x12>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800217c:	8888      	ldrh	r0, [r1, #4]
 800217e:	1ac3      	subs	r3, r0, r3
 8002180:	8213      	strh	r3, [r2, #16]
    return 0;
 8002182:	2000      	movs	r0, #0
 8002184:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8002186:	6808      	ldr	r0, [r1, #0]
 8002188:	4418      	add	r0, r3
}
 800218a:	4770      	bx	lr
 800218c:	20000320 	.word	0x20000320

08002190 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8002190:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <Post0_Process+0x30>)
 8002194:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002198:	2000      	movs	r0, #0
 800219a:	f000 fb4f 	bl	800283c <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <Post0_Process+0x34>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	7a18      	ldrb	r0, [r3, #8]
 80021a4:	2808      	cmp	r0, #8
 80021a6:	d106      	bne.n	80021b6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80021a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <Post0_Process+0x38>)
 80021ae:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80021b0:	2210      	movs	r2, #16
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <Post0_Process+0x3c>)
 80021b4:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80021b6:	2809      	cmp	r0, #9
 80021b8:	bf14      	ite	ne
 80021ba:	2000      	movne	r0, #0
 80021bc:	2001      	moveq	r0, #1
 80021be:	bd08      	pop	{r3, pc}
 80021c0:	20000038 	.word	0x20000038
 80021c4:	20000320 	.word	0x20000320
 80021c8:	20000326 	.word	0x20000326
 80021cc:	20000328 	.word	0x20000328

080021d0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
  {
    uint8_t* b;
    uint16_t* w;
  } pBuf;

  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <Setup0_Process+0x70>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	b292      	uxth	r2, r2
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <Setup0_Process+0x74>)
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	881b      	ldrh	r3, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <Setup0_Process+0x78>)
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	7a11      	ldrb	r1, [r2, #8]
 80021e6:	2909      	cmp	r1, #9
 80021e8:	d01b      	beq.n	8002222 <Setup0_Process+0x52>
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80021f4:	1c5d      	adds	r5, r3, #1
 80021f6:	7819      	ldrb	r1, [r3, #0]
 80021f8:	7011      	strb	r1, [r2, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80021fa:	4c13      	ldr	r4, [pc, #76]	; (8002248 <Setup0_Process+0x78>)
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	7053      	strb	r3, [r2, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002202:	6826      	ldr	r6, [r4, #0]
 8002204:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 8002208:	f000 fb3a 	bl	8002880 <ByteSwap>
 800220c:	8070      	strh	r0, [r6, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800220e:	6826      	ldr	r6, [r4, #0]
 8002210:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8002214:	f000 fb34 	bl	8002880 <ByteSwap>
 8002218:	80b0      	strh	r0, [r6, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	f8b5 200b 	ldrh.w	r2, [r5, #11]
 8002220:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <Setup0_Process+0x78>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800222a:	88db      	ldrh	r3, [r3, #6]
 800222c:	b913      	cbnz	r3, 8002234 <Setup0_Process+0x64>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 800222e:	f7ff ff11 	bl	8002054 <NoData_Setup0>
 8002232:	e001      	b.n	8002238 <Setup0_Process+0x68>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 8002234:	f7ff fc6a 	bl	8001b0c <Data_Setup0>
  }
  return Post0_Process();
 8002238:	f7ff ffaa 	bl	8002190 <Post0_Process>
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	bf00      	nop
 8002240:	40005c50 	.word	0x40005c50
 8002244:	20003004 	.word	0x20003004
 8002248:	20000320 	.word	0x20000320

0800224c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800224c:	b508      	push	{r3, lr}
  uint32_t ControlState = pInformation->ControlState;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <Out0_Process+0x3c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	7a1b      	ldrb	r3, [r3, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8002254:	2b03      	cmp	r3, #3
 8002256:	d001      	beq.n	800225c <Out0_Process+0x10>
 8002258:	2b05      	cmp	r3, #5
 800225a:	d105      	bne.n	8002268 <Out0_Process+0x1c>
  {
    DataStageOut();
 800225c:	f7ff fd62 	bl	8001d24 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <Out0_Process+0x3c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	7a1a      	ldrb	r2, [r3, #8]
 8002266:	e008      	b.n	800227a <Out0_Process+0x2e>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002268:	2b07      	cmp	r3, #7
 800226a:	d105      	bne.n	8002278 <Out0_Process+0x2c>
  {
    (*pProperty->Process_Status_OUT)();
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <Out0_Process+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4798      	blx	r3
    ControlState = STALLED;
 8002274:	2208      	movs	r2, #8
 8002276:	e000      	b.n	800227a <Out0_Process+0x2e>
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8002278:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800227a:	4b03      	ldr	r3, [pc, #12]	; (8002288 <Out0_Process+0x3c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002280:	f7ff ff86 	bl	8002190 <Post0_Process>
}
 8002284:	bd08      	pop	{r3, pc}
 8002286:	bf00      	nop
 8002288:	20000320 	.word	0x20000320
 800228c:	200002f8 	.word	0x200002f8

08002290 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002290:	b430      	push	{r4, r5}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <SetDeviceAddress+0x3c>)
 8002294:	781d      	ldrb	r5, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002296:	2100      	movs	r1, #0
 8002298:	e00f      	b.n	80022ba <SetDeviceAddress+0x2a>
 800229a:	b2cc      	uxtb	r4, r1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800229c:	00a3      	lsls	r3, r4, #2
 800229e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022b0:	0412      	lsls	r2, r2, #16
 80022b2:	0c12      	lsrs	r2, r2, #16
 80022b4:	4322      	orrs	r2, r4
 80022b6:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80022b8:	3101      	adds	r1, #1
 80022ba:	42a9      	cmp	r1, r5
 80022bc:	d3ed      	bcc.n	800229a <SetDeviceAddress+0xa>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80022be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <SetDeviceAddress+0x40>)
 80022c4:	6018      	str	r0, [r3, #0]
}
 80022c6:	bc30      	pop	{r4, r5}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200000a0 	.word	0x200000a0
 80022d0:	40005c4c 	.word	0x40005c4c

080022d4 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80022d4:	b508      	push	{r3, lr}
  uint32_t ControlState = pInformation->ControlState;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <In0_Process+0x58>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	7a13      	ldrb	r3, [r2, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d001      	beq.n	80022e4 <In0_Process+0x10>
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d105      	bne.n	80022f0 <In0_Process+0x1c>
  {
    DataStageIn();
 80022e4:	f7ff fbba 	bl	8001a5c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <In0_Process+0x58>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	7a1a      	ldrb	r2, [r3, #8]
 80022ee:	e016      	b.n	800231e <In0_Process+0x4a>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d113      	bne.n	800231c <In0_Process+0x48>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80022f4:	7853      	ldrb	r3, [r2, #1]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10a      	bne.n	8002310 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80022fa:	7813      	ldrb	r3, [r2, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80022fc:	f013 0f7f 	tst.w	r3, #127	; 0x7f
 8002300:	d106      	bne.n	8002310 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002302:	78d0      	ldrb	r0, [r2, #3]
 8002304:	f7ff ffc4 	bl	8002290 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <In0_Process+0x5c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <In0_Process+0x60>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4798      	blx	r3
    ControlState = STALLED;
 8002318:	2208      	movs	r2, #8
 800231a:	e000      	b.n	800231e <In0_Process+0x4a>
  }

  else
  {
    ControlState = STALLED;
 800231c:	2208      	movs	r2, #8
  }

  pInformation->ControlState = ControlState;
 800231e:	4b03      	ldr	r3, [pc, #12]	; (800232c <In0_Process+0x58>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002324:	f7ff ff34 	bl	8002190 <Post0_Process>
}
 8002328:	bd08      	pop	{r3, pc}
 800232a:	bf00      	nop
 800232c:	20000320 	.word	0x20000320
 8002330:	2000031c 	.word	0x2000031c
 8002334:	200002f8 	.word	0x200002f8

08002338 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800233c:	b510      	push	{r4, lr}
  uint32_t wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800233e:	e159      	b.n	80025f4 <CTR_LP+0x2b8>
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 8002340:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002344:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <CTR_LP+0x244>)
 8002346:	601a      	str	r2, [r3, #0]
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002348:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <CTR_LP+0x248>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	4a8d      	ldr	r2, [pc, #564]	; (8002588 <CTR_LP+0x24c>)
 8002352:	7013      	strb	r3, [r2, #0]
    if (EPindex == 0)
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 811f 	bne.w	8002598 <CTR_LP+0x25c>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 800235a:	4a8c      	ldr	r2, [pc, #560]	; (800258c <CTR_LP+0x250>)
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002362:	498b      	ldr	r1, [pc, #556]	; (8002590 <CTR_LP+0x254>)
 8002364:	800b      	strh	r3, [r1, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800236c:	4989      	ldr	r1, [pc, #548]	; (8002594 <CTR_LP+0x258>)
 800236e:	800b      	strh	r3, [r1, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002380:	6013      	str	r3, [r2, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800238a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238e:	f083 0320 	eor.w	r3, r3, #32
 8002392:	6013      	str	r3, [r2, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002394:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <CTR_LP+0x248>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d139      	bne.n	8002416 <CTR_LP+0xda>

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */


        _ClearEP_CTR_TX(ENDP0);
 80023a2:	4614      	mov	r4, r2
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	6013      	str	r3, [r2, #0]
        In0_Process();
 80023b4:	f7ff ff8e 	bl	80022d4 <In0_Process>

           /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4a72      	ldr	r2, [pc, #456]	; (8002590 <CTR_LP+0x254>)
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80023ce:	b289      	uxth	r1, r1
 80023d0:	b109      	cbz	r1, 80023d6 <CTR_LP+0x9a>
 80023d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023da:	b292      	uxth	r2, r2
 80023dc:	b10a      	cbz	r2, 80023e2 <CTR_LP+0xa6>
 80023de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023e2:	4a6a      	ldr	r2, [pc, #424]	; (800258c <CTR_LP+0x250>)
 80023e4:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <CTR_LP+0x258>)
 80023f6:	8812      	ldrh	r2, [r2, #0]
 80023f8:	f002 0110 	and.w	r1, r2, #16
 80023fc:	b289      	uxth	r1, r1
 80023fe:	b109      	cbz	r1, 8002404 <CTR_LP+0xc8>
 8002400:	f083 0310 	eor.w	r3, r3, #16
 8002404:	f002 0220 	and.w	r2, r2, #32
 8002408:	b292      	uxth	r2, r2
 800240a:	b10a      	cbz	r2, 8002410 <CTR_LP+0xd4>
 800240c:	f083 0320 	eor.w	r3, r3, #32
 8002410:	4a5e      	ldr	r2, [pc, #376]	; (800258c <CTR_LP+0x250>)
 8002412:	6013      	str	r3, [r2, #0]
          return;
 8002414:	bd10      	pop	{r4, pc}
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <CTR_LP+0x250>)
 8002418:	681b      	ldr	r3, [r3, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 800241a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800241e:	d039      	beq.n	8002494 <CTR_LP+0x158>
        {
          _ClearEP_CTR_TX(ENDP0);
 8002420:	4c5a      	ldr	r4, [pc, #360]	; (800258c <CTR_LP+0x250>)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	6023      	str	r3, [r4, #0]
          In0_Process();
 8002432:	f7ff ff4f 	bl	80022d4 <In0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	b29b      	uxth	r3, r3
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <CTR_LP+0x254>)
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 800244c:	b289      	uxth	r1, r1
 800244e:	b109      	cbz	r1, 8002454 <CTR_LP+0x118>
 8002450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002454:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002458:	b292      	uxth	r2, r2
 800245a:	b10a      	cbz	r2, 8002460 <CTR_LP+0x124>
 800245c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <CTR_LP+0x250>)
 8002462:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002470:	b29b      	uxth	r3, r3
 8002472:	4a48      	ldr	r2, [pc, #288]	; (8002594 <CTR_LP+0x258>)
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	f002 0110 	and.w	r1, r2, #16
 800247a:	b289      	uxth	r1, r1
 800247c:	b109      	cbz	r1, 8002482 <CTR_LP+0x146>
 800247e:	f083 0310 	eor.w	r3, r3, #16
 8002482:	f002 0220 	and.w	r2, r2, #32
 8002486:	b292      	uxth	r2, r2
 8002488:	b10a      	cbz	r2, 800248e <CTR_LP+0x152>
 800248a:	f083 0320 	eor.w	r3, r3, #32
 800248e:	4a3f      	ldr	r2, [pc, #252]	; (800258c <CTR_LP+0x250>)
 8002490:	6013      	str	r3, [r2, #0]
          return;
 8002492:	bd10      	pop	{r4, pc}
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8002494:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002498:	d037      	beq.n	800250a <CTR_LP+0x1ce>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800249a:	4c3c      	ldr	r4, [pc, #240]	; (800258c <CTR_LP+0x250>)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	051b      	lsls	r3, r3, #20
 80024a4:	0d1b      	lsrs	r3, r3, #20
 80024a6:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 80024a8:	f7ff fe92 	bl	80021d0 <Setup0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4a35      	ldr	r2, [pc, #212]	; (8002590 <CTR_LP+0x254>)
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80024c2:	b289      	uxth	r1, r1
 80024c4:	b109      	cbz	r1, 80024ca <CTR_LP+0x18e>
 80024c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024ce:	b292      	uxth	r2, r2
 80024d0:	b10a      	cbz	r2, 80024d6 <CTR_LP+0x19a>
 80024d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024d6:	4a2d      	ldr	r2, [pc, #180]	; (800258c <CTR_LP+0x250>)
 80024d8:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <CTR_LP+0x258>)
 80024ea:	8812      	ldrh	r2, [r2, #0]
 80024ec:	f002 0110 	and.w	r1, r2, #16
 80024f0:	b289      	uxth	r1, r1
 80024f2:	b109      	cbz	r1, 80024f8 <CTR_LP+0x1bc>
 80024f4:	f083 0310 	eor.w	r3, r3, #16
 80024f8:	f002 0220 	and.w	r2, r2, #32
 80024fc:	b292      	uxth	r2, r2
 80024fe:	b10a      	cbz	r2, 8002504 <CTR_LP+0x1c8>
 8002500:	f083 0320 	eor.w	r3, r3, #32
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <CTR_LP+0x250>)
 8002506:	6013      	str	r3, [r2, #0]
          return;
 8002508:	bd10      	pop	{r4, pc}
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800250a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800250e:	d071      	beq.n	80025f4 <CTR_LP+0x2b8>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002510:	4c1e      	ldr	r4, [pc, #120]	; (800258c <CTR_LP+0x250>)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002518:	051b      	lsls	r3, r3, #20
 800251a:	0d1b      	lsrs	r3, r3, #20
 800251c:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800251e:	f7ff fe95 	bl	800224c <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	b29b      	uxth	r3, r3
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <CTR_LP+0x254>)
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8002538:	b289      	uxth	r1, r1
 800253a:	b109      	cbz	r1, 8002540 <CTR_LP+0x204>
 800253c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002540:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002544:	b292      	uxth	r2, r2
 8002546:	b10a      	cbz	r2, 800254c <CTR_LP+0x210>
 8002548:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <CTR_LP+0x250>)
 800254e:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255c:	b29b      	uxth	r3, r3
 800255e:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <CTR_LP+0x258>)
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	f002 0110 	and.w	r1, r2, #16
 8002566:	b289      	uxth	r1, r1
 8002568:	b109      	cbz	r1, 800256e <CTR_LP+0x232>
 800256a:	f083 0310 	eor.w	r3, r3, #16
 800256e:	f002 0220 	and.w	r2, r2, #32
 8002572:	b292      	uxth	r2, r2
 8002574:	b10a      	cbz	r2, 800257a <CTR_LP+0x23e>
 8002576:	f083 0320 	eor.w	r3, r3, #32
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <CTR_LP+0x250>)
 800257c:	6013      	str	r3, [r2, #0]
          return;
 800257e:	bd10      	pop	{r4, pc}
 8002580:	40005c44 	.word	0x40005c44
 8002584:	2000034c 	.word	0x2000034c
 8002588:	200002fc 	.word	0x200002fc
 800258c:	40005c00 	.word	0x40005c00
 8002590:	20000326 	.word	0x20000326
 8002594:	20000328 	.word	0x20000328
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800259e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80025a2:	681c      	ldr	r4, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 80025a4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80025a8:	d00c      	beq.n	80025c4 <CTR_LP+0x288>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025b0:	0512      	lsls	r2, r2, #20
 80025b2:	0d12      	lsrs	r2, r2, #20
 80025b4:	601a      	str	r2, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <CTR_LP+0x2cc>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <CTR_LP+0x2d0>)
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80025c4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80025c8:	d014      	beq.n	80025f4 <CTR_LP+0x2b8>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80025ca:	490f      	ldr	r1, [pc, #60]	; (8002608 <CTR_LP+0x2cc>)
 80025cc:	780b      	ldrb	r3, [r1, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f422 42e1 	bic.w	r2, r2, #28800	; 0x7080
 80025de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025e2:	0412      	lsls	r2, r2, #16
 80025e4:	0c12      	lsrs	r2, r2, #16
 80025e6:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80025e8:	780b      	ldrb	r3, [r1, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	4a08      	ldr	r2, [pc, #32]	; (8002610 <CTR_LP+0x2d4>)
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  uint32_t wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <CTR_LP+0x2d8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b299      	uxth	r1, r3
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <CTR_LP+0x2dc>)
 80025fc:	8011      	strh	r1, [r2, #0]
 80025fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002602:	f47f ae9d 	bne.w	8002340 <CTR_LP+0x4>
 8002606:	bd10      	pop	{r4, pc}
 8002608:	200002fc 	.word	0x200002fc
 800260c:	200000c0 	.word	0x200000c0
 8002610:	200000a4 	.word	0x200000a4
 8002614:	40005c44 	.word	0x40005c44
 8002618:	2000034c 	.word	0x2000034c

0800261c <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800261c:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800261e:	3201      	adds	r2, #1
 8002620:	1052      	asrs	r2, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002622:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002626:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800262a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800262c:	e007      	b.n	800263e <UserToPMABufferCopy+0x22>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800262e:	7803      	ldrb	r3, [r0, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002630:	7844      	ldrb	r4, [r0, #1]
 8002632:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    *pdwVal++ = temp2;
 8002636:	f821 3b04 	strh.w	r3, [r1], #4
    pdwVal++;
    pbUsrBuf++;
 800263a:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800263c:	3a01      	subs	r2, #1
 800263e:	2a00      	cmp	r2, #0
 8002640:	d1f5      	bne.n	800262e <UserToPMABufferCopy+0x12>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002642:	bc10      	pop	{r4}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <PMAToUserBufferCopy>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002648:	3201      	adds	r2, #1
 800264a:	1052      	asrs	r2, r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800264c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002650:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 8002654:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002656:	e004      	b.n	8002662 <PMAToUserBufferCopy+0x1a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002658:	680b      	ldr	r3, [r1, #0]
 800265a:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800265e:	3a01      	subs	r2, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002660:	3104      	adds	r1, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002662:	2a00      	cmp	r2, #0
 8002664:	d1f8      	bne.n	8002658 <PMAToUserBufferCopy+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002666:	4770      	bx	lr

08002668 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8002668:	f020 0007 	bic.w	r0, r0, #7
 800266c:	b280      	uxth	r0, r0
 800266e:	4b01      	ldr	r3, [pc, #4]	; (8002674 <SetBTABLE+0xc>)
 8002670:	6018      	str	r0, [r3, #0]
 8002672:	4770      	bx	lr
 8002674:	40005c50 	.word	0x40005c50

08002678 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8002678:	0080      	lsls	r0, r0, #2
 800267a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800267e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	4319      	orrs	r1, r3
 800268e:	b289      	uxth	r1, r1
 8002690:	6001      	str	r1, [r0, #0]
 8002692:	4770      	bx	lr

08002694 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002694:	0080      	lsls	r0, r0, #2
 8002696:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800269a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f001 0210 	and.w	r2, r1, #16
 80026b0:	b292      	uxth	r2, r2
 80026b2:	b10a      	cbz	r2, 80026b8 <SetEPTxStatus+0x24>
 80026b4:	f083 0310 	eor.w	r3, r3, #16
 80026b8:	f001 0120 	and.w	r1, r1, #32
 80026bc:	b289      	uxth	r1, r1
 80026be:	b109      	cbz	r1, 80026c4 <SetEPTxStatus+0x30>
 80026c0:	f083 0320 	eor.w	r3, r3, #32
 80026c4:	6003      	str	r3, [r0, #0]
 80026c6:	4770      	bx	lr

080026c8 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80026c8:	0080      	lsls	r0, r0, #2
 80026ca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80026ce:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80026d2:	6803      	ldr	r3, [r0, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
 80026e4:	b292      	uxth	r2, r2
 80026e6:	b10a      	cbz	r2, 80026ec <SetEPRxStatus+0x24>
 80026e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026ec:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80026f0:	b289      	uxth	r1, r1
 80026f2:	b109      	cbz	r1, 80026f8 <SetEPRxStatus+0x30>
 80026f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026f8:	6003      	str	r3, [r0, #0]
 80026fa:	4770      	bx	lr

080026fc <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80026fc:	0080      	lsls	r0, r0, #2
 80026fe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002702:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002712:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002716:	6003      	str	r3, [r0, #0]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop

0800271c <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800271c:	0080      	lsls	r0, r0, #2
 800271e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002722:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002726:	6803      	ldr	r3, [r0, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002736:	6003      	str	r3, [r0, #0]
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800273c:	0080      	lsls	r0, r0, #2
 800273e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002742:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002746:	6803      	ldr	r3, [r0, #0]
 8002748:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800274c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	6003      	str	r3, [r0, #0]
 8002756:	4770      	bx	lr

08002758 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002758:	0080      	lsls	r0, r0, #2
 800275a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800275e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002762:	6803      	ldr	r3, [r0, #0]
 8002764:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002768:	d009      	beq.n	800277e <ClearDTOG_RX+0x26>
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6003      	str	r3, [r0, #0]
 800277e:	4770      	bx	lr

08002780 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002780:	0080      	lsls	r0, r0, #2
 8002782:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002786:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800278a:	6803      	ldr	r3, [r0, #0]
 800278c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002790:	d009      	beq.n	80027a6 <ClearDTOG_TX+0x26>
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a4:	6003      	str	r3, [r0, #0]
 80027a6:	4770      	bx	lr

080027a8 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <SetEPTxAddr+0x1c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80027b2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80027b6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80027ba:	0040      	lsls	r0, r0, #1
 80027bc:	0849      	lsrs	r1, r1, #1
 80027be:	0049      	lsls	r1, r1, #1
 80027c0:	6001      	str	r1, [r0, #0]
 80027c2:	4770      	bx	lr
 80027c4:	40005c50 	.word	0x40005c50

080027c8 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SetEPRxAddr+0x18>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SetEPRxAddr+0x1c>)
 80027d4:	4403      	add	r3, r0
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	0849      	lsrs	r1, r1, #1
 80027da:	0049      	lsls	r1, r1, #1
 80027dc:	6019      	str	r1, [r3, #0]
 80027de:	4770      	bx	lr
 80027e0:	40005c50 	.word	0x40005c50
 80027e4:	20003004 	.word	0x20003004

080027e8 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <GetEPTxAddr+0x18>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80027f2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80027f6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80027fa:	0040      	lsls	r0, r0, #1
}
 80027fc:	8800      	ldrh	r0, [r0, #0]
 80027fe:	4770      	bx	lr
 8002800:	40005c50 	.word	0x40005c50

08002804 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <GetEPRxAddr+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <GetEPRxAddr+0x18>)
 8002810:	4403      	add	r3, r0
 8002812:	005b      	lsls	r3, r3, #1
}
 8002814:	8818      	ldrh	r0, [r3, #0]
 8002816:	4770      	bx	lr
 8002818:	40005c50 	.word	0x40005c50
 800281c:	20003004 	.word	0x20003004

08002820 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <SetEPTxCount+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <SetEPTxCount+0x18>)
 800282c:	4403      	add	r3, r0
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	6019      	str	r1, [r3, #0]
 8002832:	4770      	bx	lr
 8002834:	40005c50 	.word	0x40005c50
 8002838:	20003002 	.word	0x20003002

0800283c <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <SetEPRxCount+0x3c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <SetEPRxCount+0x40>)
 8002848:	4403      	add	r3, r0
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	293e      	cmp	r1, #62	; 0x3e
 800284e:	d90a      	bls.n	8002866 <SetEPRxCount+0x2a>
 8002850:	094a      	lsrs	r2, r1, #5
 8002852:	f011 0f1f 	tst.w	r1, #31
 8002856:	d101      	bne.n	800285c <SetEPRxCount+0x20>
 8002858:	3a01      	subs	r2, #1
 800285a:	b292      	uxth	r2, r2
 800285c:	0292      	lsls	r2, r2, #10
 800285e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4770      	bx	lr
 8002866:	084a      	lsrs	r2, r1, #1
 8002868:	f011 0f01 	tst.w	r1, #1
 800286c:	d000      	beq.n	8002870 <SetEPRxCount+0x34>
 800286e:	3201      	adds	r2, #1
 8002870:	0292      	lsls	r2, r2, #10
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40005c50 	.word	0x40005c50
 800287c:	20003006 	.word	0x20003006

08002880 <ByteSwap>:
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 8002880:	b2c3      	uxtb	r3, r0
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8002882:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8002884:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop

0800288c <DebugMsg_FunctionStart>:
#include "Hw_Config.h"

/* functions */

void DebugMsg_FunctionStart(char const * fName_p)
{
 800288c:	b508      	push	{r3, lr}
#ifdef  DEBUG_MSG_LEVEL0
    printf("%s() S\n", fName_p);
 800288e:	4601      	mov	r1, r0
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <DebugMsg_FunctionStart+0xc>)
 8002892:	f001 fb83 	bl	8003f9c <iprintf>
 8002896:	bd08      	pop	{r3, pc}
 8002898:	08007970 	.word	0x08007970

0800289c <assert_failed>:
*                  - line: assert_param error line source number
* Output         : None
* Return         : None
*******************************************************************************/
void assert_failed(uint8_t* file, uint32_t line)
{ 
 800289c:	b508      	push	{r3, lr}
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 800289e:	460a      	mov	r2, r1
 80028a0:	4601      	mov	r1, r0
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <assert_failed+0x10>)
 80028a4:	f001 fb7a 	bl	8003f9c <iprintf>
 80028a8:	e7fe      	b.n	80028a8 <assert_failed+0xc>
 80028aa:	bf00      	nop
 80028ac:	080079b4 	.word	0x080079b4

080028b0 <_write>:
#include <sys/types.h>
#include "stm32f10x.h"

//retargetting _write
__attribute__ ((used)) int _write(int fd, char *ptr, int len)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	460e      	mov	r6, r1
 80028b4:	4615      	mov	r5, r2
    size_t i;
    for(i = 0; i < len; i++)
 80028b6:	2400      	movs	r4, #0
 80028b8:	e00a      	b.n	80028d0 <_write+0x20>
    {
        USART_SendData(USART1, ptr[i]);
 80028ba:	5d31      	ldrb	r1, [r6, r4]
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <_write+0x28>)
 80028be:	f7fe ffc9 	bl	8001854 <USART_SendData>
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <_write+0x28>)
 80028c6:	f7fe fff1 	bl	80018ac <USART_GetFlagStatus>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d0f9      	beq.n	80028c2 <_write+0x12>

//retargetting _write
__attribute__ ((used)) int _write(int fd, char *ptr, int len)
{
    size_t i;
    for(i = 0; i < len; i++)
 80028ce:	3401      	adds	r4, #1
 80028d0:	42ac      	cmp	r4, r5
 80028d2:	d3f2      	bcc.n	80028ba <_write+0xa>
    {
        USART_SendData(USART1, ptr[i]);
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    }
    return len;
}
 80028d4:	4628      	mov	r0, r5
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	40013800 	.word	0x40013800

080028dc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80028e0:	e7fe      	b.n	80028e0 <HardFault_Handler>
 80028e2:	bf00      	nop

080028e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler>
 80028e6:	bf00      	nop

080028e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80028e8:	e7fe      	b.n	80028e8 <BusFault_Handler>
 80028ea:	bf00      	nop

080028ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80028ec:	e7fe      	b.n	80028ec <UsageFault_Handler>
 80028ee:	bf00      	nop

080028f0 <SVC_Handler>:
#ifdef FREE_RTOS


#else
void SVC_Handler(void)
{
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <PendSV_Handler>:
  */
#ifdef FREE_RTOS

#else
void PendSV_Handler(void)
{
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <SysTick_Handler>:
  */
#ifdef FREE_RTOS
    
#else
void SysTick_Handler(void)
{   
 80028fc:	b508      	push	{r3, lr}
    TimingDelay_Decrement();
 80028fe:	f000 fa4f 	bl	8002da0 <TimingDelay_Decrement>
 8002902:	bd08      	pop	{r3, pc}

08002904 <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <EXTI0_IRQHandler>:
*******************************************************************************/

static bool toggle_data_key1 = FALSE;

void EXTI0_IRQHandler(void)
{
 800291c:	b508      	push	{r3, lr}
    if(EXTI_GetITStatus(GPIO_EXTI_Line_KEY1) != RESET) {
 800291e:	2001      	movs	r0, #1
 8002920:	f7fe fb1e 	bl	8000f60 <EXTI_GetITStatus>
 8002924:	b348      	cbz	r0, 800297a <EXTI0_IRQHandler+0x5e>
        printf("Left-WKUP Button Press\r\n");
 8002926:	4815      	ldr	r0, [pc, #84]	; (800297c <EXTI0_IRQHandler+0x60>)
 8002928:	f001 fbaa 	bl	8004080 <puts>
        {
          Resume(RESUME_INTERNAL);
        }
#endif

        if(TRUE == g_TestProcessState)
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <EXTI0_IRQHandler+0x64>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d11f      	bne.n	8002974 <EXTI0_IRQHandler+0x58>
        {
            Send_Buffer[0] = 0x05;
 8002934:	2205      	movs	r2, #5
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <EXTI0_IRQHandler+0x68>)
 8002938:	701a      	strb	r2, [r3, #0]

            if(toggle_data_key1)
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <EXTI0_IRQHandler+0x6c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b133      	cbz	r3, 800294e <EXTI0_IRQHandler+0x32>
            {
                toggle_data_key1 = FALSE;
 8002940:	2200      	movs	r2, #0
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <EXTI0_IRQHandler+0x6c>)
 8002944:	701a      	strb	r2, [r3, #0]
                Send_Buffer[1] = 0x01;
 8002946:	2201      	movs	r2, #1
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <EXTI0_IRQHandler+0x68>)
 800294a:	705a      	strb	r2, [r3, #1]
 800294c:	e005      	b.n	800295a <EXTI0_IRQHandler+0x3e>
            }
            else
            {
                toggle_data_key1 = TRUE;
 800294e:	2201      	movs	r2, #1
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <EXTI0_IRQHandler+0x6c>)
 8002952:	701a      	strb	r2, [r3, #0]
                Send_Buffer[1] = 0x00;
 8002954:	2200      	movs	r2, #0
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <EXTI0_IRQHandler+0x68>)
 8002958:	705a      	strb	r2, [r3, #1]
            }

            UserToPMABufferCopy(Send_Buffer, ENDP1_TXADDR, 2);
 800295a:	2202      	movs	r2, #2
 800295c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002960:	4808      	ldr	r0, [pc, #32]	; (8002984 <EXTI0_IRQHandler+0x68>)
 8002962:	f7ff fe5b 	bl	800261c <UserToPMABufferCopy>
            SetEPTxCount(ENDP1, 2);
 8002966:	2102      	movs	r1, #2
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff ff59 	bl	8002820 <SetEPTxCount>
            SetEPTxValid(ENDP1);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fec4 	bl	80026fc <SetEPTxValid>
        }

        EXTI_ClearITPendingBit(GPIO_EXTI_Line_KEY1);
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fb3d 	bl	8000ff4 <EXTI_ClearITPendingBit>
 800297a:	bd08      	pop	{r3, pc}
 800297c:	080079e4 	.word	0x080079e4
 8002980:	200002dc 	.word	0x200002dc
 8002984:	2000032c 	.word	0x2000032c
 8002988:	200002cd 	.word	0x200002cd

0800298c <EXTI1_IRQHandler>:
*******************************************************************************/

static bool toggle_data_key2 = FALSE;

void EXTI1_IRQHandler(void)
{
 800298c:	b508      	push	{r3, lr}
    if(EXTI_GetITStatus(GPIO_EXTI_Line_KEY2) != RESET) {
 800298e:	2002      	movs	r0, #2
 8002990:	f7fe fae6 	bl	8000f60 <EXTI_GetITStatus>
 8002994:	b348      	cbz	r0, 80029ea <EXTI1_IRQHandler+0x5e>
        printf("Right-USER Button Press\r\n");
 8002996:	4815      	ldr	r0, [pc, #84]	; (80029ec <EXTI1_IRQHandler+0x60>)
 8002998:	f001 fb72 	bl	8004080 <puts>

        if(TRUE == g_TestProcessState)
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <EXTI1_IRQHandler+0x64>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11f      	bne.n	80029e4 <EXTI1_IRQHandler+0x58>
        {
            Send_Buffer[0] = 0x06;
 80029a4:	2206      	movs	r2, #6
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <EXTI1_IRQHandler+0x68>)
 80029a8:	701a      	strb	r2, [r3, #0]

            if(toggle_data_key2)
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <EXTI1_IRQHandler+0x6c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b133      	cbz	r3, 80029be <EXTI1_IRQHandler+0x32>
            {
                toggle_data_key2 = FALSE;
 80029b0:	2200      	movs	r2, #0
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <EXTI1_IRQHandler+0x6c>)
 80029b4:	701a      	strb	r2, [r3, #0]
                Send_Buffer[1] = 0x01;
 80029b6:	2201      	movs	r2, #1
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <EXTI1_IRQHandler+0x68>)
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	e005      	b.n	80029ca <EXTI1_IRQHandler+0x3e>
            }
            else
            {
                toggle_data_key2 = TRUE;
 80029be:	2201      	movs	r2, #1
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <EXTI1_IRQHandler+0x6c>)
 80029c2:	701a      	strb	r2, [r3, #0]
                Send_Buffer[1] = 0x00;
 80029c4:	2200      	movs	r2, #0
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <EXTI1_IRQHandler+0x68>)
 80029c8:	705a      	strb	r2, [r3, #1]
            }

            UserToPMABufferCopy(Send_Buffer, ENDP1_TXADDR, 2);
 80029ca:	2202      	movs	r2, #2
 80029cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d0:	4808      	ldr	r0, [pc, #32]	; (80029f4 <EXTI1_IRQHandler+0x68>)
 80029d2:	f7ff fe23 	bl	800261c <UserToPMABufferCopy>
            SetEPTxCount(ENDP1, 2);
 80029d6:	2102      	movs	r1, #2
 80029d8:	2001      	movs	r0, #1
 80029da:	f7ff ff21 	bl	8002820 <SetEPTxCount>
            SetEPTxValid(ENDP1);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fe8c 	bl	80026fc <SetEPTxValid>
        }

        EXTI_ClearITPendingBit(GPIO_EXTI_Line_KEY2);
 80029e4:	2002      	movs	r0, #2
 80029e6:	f7fe fb05 	bl	8000ff4 <EXTI_ClearITPendingBit>
 80029ea:	bd08      	pop	{r3, pc}
 80029ec:	080079fc 	.word	0x080079fc
 80029f0:	200002dc 	.word	0x200002dc
 80029f4:	2000032c 	.word	0x2000032c
 80029f8:	200002ce 	.word	0x200002ce

080029fc <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8002a08:	b508      	push	{r3, lr}
    Send_Buffer[0] = 0x07;
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <DMA1_Channel1_IRQHandler+0x48>)
 8002a0e:	701a      	strb	r2, [r3, #0]

    if((ADC_ConvertedValueX >>4) - (ADC_ConvertedValueX_1 >>4) > 4)
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <DMA1_Channel1_IRQHandler+0x4c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <DMA1_Channel1_IRQHandler+0x50>)
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	eba3 1212 	sub.w	r2, r3, r2, lsr #4
 8002a1e:	2a04      	cmp	r2, #4
 8002a20:	d911      	bls.n	8002a46 <DMA1_Channel1_IRQHandler+0x3e>
    {
        Send_Buffer[1] = (uint8_t)(ADC_ConvertedValueX >>4);
 8002a22:	480b      	ldr	r0, [pc, #44]	; (8002a50 <DMA1_Channel1_IRQHandler+0x48>)
 8002a24:	7043      	strb	r3, [r0, #1]
        UserToPMABufferCopy(Send_Buffer, ENDP1_TXADDR, 2);
 8002a26:	2202      	movs	r2, #2
 8002a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2c:	f7ff fdf6 	bl	800261c <UserToPMABufferCopy>
        SetEPTxCount(ENDP1, 2);
 8002a30:	2102      	movs	r1, #2
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7ff fef4 	bl	8002820 <SetEPTxCount>
        SetEPTxValid(ENDP1);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fe5f 	bl	80026fc <SetEPTxValid>
        ADC_ConvertedValueX_1 = ADC_ConvertedValueX;
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <DMA1_Channel1_IRQHandler+0x4c>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <DMA1_Channel1_IRQHandler+0x50>)
 8002a44:	601a      	str	r2, [r3, #0]
    }

    DMA_ClearFlag(DMA1_FLAG_TC1);
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7fe f9fe 	bl	8000e48 <DMA_ClearFlag>
 8002a4c:	bd08      	pop	{r3, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000032c 	.word	0x2000032c
 8002a54:	200002d0 	.word	0x200002d0
 8002a58:	200002d4 	.word	0x200002d4

08002a5c <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop

08002a68 <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <ADC1_2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC1_2_IRQHandler(void)
{
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <USB_HP_CAN1_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <USB_LP_CAN1_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002a7c:	b508      	push	{r3, lr}
    USB_Istr();
 8002a7e:	f000 fb2b 	bl	80030d8 <USB_Istr>
 8002a82:	bd08      	pop	{r3, pc}

08002a84 <CAN1_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN1_RX1_IRQHandler(void)
{
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <CAN1_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN1_SCE_IRQHandler(void)
{
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop

08002a94 <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop

08002ab4 <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop

08002abc <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8002ad8:	b508      	push	{r3, lr}
#if 1
    EXTI_ClearITPendingBit(EXTI_Line18);
 8002ada:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ade:	f7fe fa89 	bl	8000ff4 <EXTI_ClearITPendingBit>
 8002ae2:	bd08      	pop	{r3, pc}

08002ae4 <USART1_Init>:
 * Input  : None
 * Output : None
 * Return : None
 */
void USART1_Init(void)
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	b084      	sub	sp, #16
     - One Stop Bit
     - No parity
     - Hardware flow control disabled (RTS and CTS signals)
     - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate   = 115200;
 8002ae8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002aec:	9300      	str	r3, [sp, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8ad 3004 	strh.w	r3, [sp, #4]
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
 8002af4:	f8ad 3006 	strh.w	r3, [sp, #6]
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
 8002af8:	f8ad 3008 	strh.w	r3, [sp, #8]
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
 8002afc:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
 8002b00:	230c      	movs	r3, #12
 8002b02:	f8ad 300a 	strh.w	r3, [sp, #10]

    /* Configure the USARTx */ 
    USART_Init(USART1, &USART_InitStructure);
 8002b06:	4c05      	ldr	r4, [pc, #20]	; (8002b1c <USART1_Init+0x38>)
 8002b08:	4669      	mov	r1, sp
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7fe fdb4 	bl	8001678 <USART_Init>

    /* Enable the USART1 */
    USART_Cmd(USART1, ENABLE);
 8002b10:	2101      	movs	r1, #1
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7fe fe6a 	bl	80017ec <USART_Cmd>
}
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd10      	pop	{r4, pc}
 8002b1c:	40013800 	.word	0x40013800

08002b20 <RCC_Configuration>:
 * Input  : None
 * Output : None
 * Return : None
 */
void RCC_Configuration(void)
{
 8002b20:	b508      	push	{r3, lr}
    SystemInit();
 8002b22:	f7fe f8b7 	bl	8000c94 <SystemInit>

    /* Enable GPIOA clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002b26:	2101      	movs	r1, #1
 8002b28:	2004      	movs	r0, #4
 8002b2a:	f7fe fd2b 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable GPIOB clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2008      	movs	r0, #8
 8002b32:	f7fe fd27 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002b36:	2101      	movs	r1, #1
 8002b38:	2010      	movs	r0, #16
 8002b3a:	f7fe fd23 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable GPIOD clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2020      	movs	r0, #32
 8002b42:	f7fe fd1f 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable USART1 clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002b46:	2101      	movs	r1, #1
 8002b48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b4c:	f7fe fd1a 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable AFIO clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002b50:	2101      	movs	r1, #1
 8002b52:	4608      	mov	r0, r1
 8002b54:	f7fe fd16 	bl	8001584 <RCC_APB2PeriphClockCmd>

    /* Enable DMA1 clock */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4608      	mov	r0, r1
 8002b5c:	f7fe fcec 	bl	8001538 <RCC_AHBPeriphClockCmd>
 8002b60:	bd08      	pop	{r3, pc}
 8002b62:	bf00      	nop

08002b64 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{ 
 8002b64:	b530      	push	{r4, r5, lr}
 8002b66:	b083      	sub	sp, #12
#ifdef  VECT_TAB_RAM
    /* Set the Vector Table base location at 0x20000000 */ 
    NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
#else  /* VECT_TAB_FLASH  */
    /* Set the Vector Table base location at 0x08000000 */ 
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b6e:	f7fe f949 	bl	8000e04 <NVIC_SetVectorTable>
#endif

    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8002b72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8002b76:	f7fe f8d9 	bl	8000d2c <NVIC_PriorityGroupConfig>

    /* Enable the EXTI0 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002b80:	2500      	movs	r5, #0
 8002b82:	f88d 5005 	strb.w	r5, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002b86:	f88d 5006 	strb.w	r5, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002b8a:	2401      	movs	r4, #1
 8002b8c:	f88d 4007 	strb.w	r4, [sp, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002b90:	a801      	add	r0, sp, #4
 8002b92:	f7fe f8eb 	bl	8000d6c <NVIC_Init>

    /* Enable the EXTI1 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8002b96:	2307      	movs	r3, #7
 8002b98:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002b9c:	f88d 5005 	strb.w	r5, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002ba0:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002ba4:	f88d 4007 	strb.w	r4, [sp, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002ba8:	a801      	add	r0, sp, #4
 8002baa:	f7fe f8df 	bl	8000d6c <NVIC_Init>
}
 8002bae:	b003      	add	sp, #12
 8002bb0:	bd30      	pop	{r4, r5, pc}
 8002bb2:	bf00      	nop

08002bb4 <Enter_LowPowerMode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Enter_LowPowerMode(void)
{
 8002bb4:	b508      	push	{r3, lr}
    /* Set the device state to suspend */
    bDeviceState = SUSPENDED;
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <Enter_LowPowerMode+0x14>)
 8002bba:	601a      	str	r2, [r3, #0]
    /* Clear EXTI Line18 pending bit */
    EXTI_ClearITPendingBit(GPIO_EXTI_Line_KEY1);
#endif

    /* Request to enter STOP mode with regulator in low power mode */
    PWR_EnterSTOPMode(PWR_Regulator_LowPower, PWR_STOPEntry_WFI);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4608      	mov	r0, r1
 8002bc0:	f7fe fbd6 	bl	8001370 <PWR_EnterSTOPMode>
 8002bc4:	bd08      	pop	{r3, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200002e0 	.word	0x200002e0

08002bcc <Leave_LowPowerMode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Leave_LowPowerMode(void)
{
 8002bcc:	b508      	push	{r3, lr}
    DEVICE_INFO *pInfo = &Device_Info;

    /* Enable HSE */
    RCC_HSEConfig(RCC_HSE_ON);
 8002bce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002bd2:	f7fe fbf5 	bl	80013c0 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    RCC_WaitForHSEStartUp();
 8002bd6:	f7fe fd35 	bl	8001644 <RCC_WaitForHSEStartUp>

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7fe fc1e 	bl	800141c <RCC_PLLCmd>

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	2039      	movs	r0, #57	; 0x39
 8002be2:	f7fe fcf5 	bl	80015d0 <RCC_GetFlagStatus>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d0fa      	beq.n	8002be0 <Leave_LowPowerMode+0x14>
    {}

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002bea:	2002      	movs	r0, #2
 8002bec:	f7fe fc26 	bl	800143c <RCC_SYSCLKConfig>

    /* Wait till PLL is used as system clock source */
    while (RCC_GetSYSCLKSource() != 0x08)
 8002bf0:	f7fe fc38 	bl	8001464 <RCC_GetSYSCLKSource>
 8002bf4:	2808      	cmp	r0, #8
 8002bf6:	d1fb      	bne.n	8002bf0 <Leave_LowPowerMode+0x24>
    {}

    /* Set the device state to the correct state */
    if (pInfo->Current_Configuration != 0)
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <Leave_LowPowerMode+0x44>)
 8002bfa:	7a9b      	ldrb	r3, [r3, #10]
 8002bfc:	b11b      	cbz	r3, 8002c06 <Leave_LowPowerMode+0x3a>
    {
        /* Device configured */
        bDeviceState = CONFIGURED;
 8002bfe:	2205      	movs	r2, #5
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <Leave_LowPowerMode+0x48>)
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	bd08      	pop	{r3, pc}
    }
    else 
    {
        bDeviceState = ATTACHED;
 8002c06:	2201      	movs	r2, #1
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <Leave_LowPowerMode+0x48>)
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	bd08      	pop	{r3, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000300 	.word	0x20000300
 8002c14:	200002e0 	.word	0x200002e0

08002c18 <USB_Cable_Config>:
* Input          : NewState: new state.
* Output         : None.
* Return         : None
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{ 
 8002c18:	b508      	push	{r3, lr}
    if (NewState != DISABLE)
 8002c1a:	b128      	cbz	r0, 8002c28 <USB_Cable_Config+0x10>
    {
        GPIO_ResetBits(GPIO_USB_DISCONNECT, GPIO_USB_DISCONNECT_PIN);
 8002c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <USB_Cable_Config+0x1c>)
 8002c22:	f7fe fabd 	bl	80011a0 <GPIO_ResetBits>
 8002c26:	bd08      	pop	{r3, pc}
    }
    else
    {
        GPIO_SetBits(GPIO_USB_DISCONNECT, GPIO_USB_DISCONNECT_PIN);
 8002c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <USB_Cable_Config+0x1c>)
 8002c2e:	f7fe fa87 	bl	8001140 <GPIO_SetBits>
 8002c32:	bd08      	pop	{r3, pc}
 8002c34:	40010800 	.word	0x40010800

08002c38 <GPIO_Configuration>:
 * Input  : None
 * Output : None
 * Return : None
 */
void GPIO_Configuration(void)
{
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	b082      	sub	sp, #8
    GPIO_InitTypeDef GPIO_InitStructure;

    // UART configuration ...

    /* Configure USARTx_Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin   = GPIO_USART_Tx_Pin;
 8002c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c40:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c44:	2503      	movs	r5, #3
 8002c46:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
 8002c4a:	2318      	movs	r3, #24
 8002c4c:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8002c50:	4c1b      	ldr	r4, [pc, #108]	; (8002cc0 <GPIO_Configuration+0x88>)
 8002c52:	a901      	add	r1, sp, #4
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7fe f9df 	bl	8001018 <GPIO_Init>

    /* Configure USARTx_Rx as input floating */
    GPIO_InitStructure.GPIO_Pin  = GPIO_USART_Rx_Pin;
 8002c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5e:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002c62:	2604      	movs	r6, #4
 8002c64:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8002c68:	eb0d 0106 	add.w	r1, sp, r6
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7fe f9d3 	bl	8001018 <GPIO_Init>

    // Key configuration ...

    /* Configure gpio as input : Button WKUP & USER */
    GPIO_InitStructure.GPIO_Pin  = GPIO_KEY1_PIN | GPIO_KEY2_PIN;
 8002c72:	f8ad 5004 	strh.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002c76:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 8002c7a:	eb0d 0106 	add.w	r1, sp, r6
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7fe f9ca 	bl	8001018 <GPIO_Init>

    // LED configuration ...

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin   = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
 8002c84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002c88:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c8c:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
 8002c90:	2310      	movs	r3, #16
 8002c92:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8002c96:	eb0d 0106 	add.w	r1, sp, r6
 8002c9a:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <GPIO_Configuration+0x8c>)
 8002c9c:	f7fe f9bc 	bl	8001018 <GPIO_Init>

    // USB_DISCONNECT configuration ...

    /* USB_DISCONNECT used as USB pull-up */
    GPIO_InitStructure.GPIO_Pin   = GPIO_USB_DISCONNECT_PIN;
 8002ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca4:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ca8:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_OD;
 8002cac:	2314      	movs	r3, #20
 8002cae:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIO_USB_DISCONNECT, &GPIO_InitStructure);
 8002cb2:	eb0d 0106 	add.w	r1, sp, r6
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7fe f9ae 	bl	8001018 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin   = GPIO_RF_GPIO5_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_RF_GPIO5, &GPIO_InitStructure);
#endif
}
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	40010800 	.word	0x40010800
 8002cc4:	40010c00 	.word	0x40010c00

08002cc8 <EXTI_Configuration>:
* Input         : None.
* Output        : None.
* Return value  : The direction value.
*******************************************************************************/
void EXTI_Configuration(void)
{ 
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	b082      	sub	sp, #8
    EXTI_InitTypeDef EXTI_InitStructure;

    /* Configure gpio as input : Button Left-WKUP */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY1);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4608      	mov	r0, r1
 8002cd0:	f7fe fb22 	bl	8001318 <GPIO_EXTILineConfig>

    /* Configure EXTI Line to generate an interrupt */
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY1;
 8002cd4:	2401      	movs	r4, #1
 8002cd6:	9400      	str	r4, [sp, #0]
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
 8002cd8:	2500      	movs	r5, #0
 8002cda:	f88d 5004 	strb.w	r5, [sp, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8002cde:	260c      	movs	r6, #12
 8002ce0:	f88d 6005 	strb.w	r6, [sp, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002ce4:	f88d 4006 	strb.w	r4, [sp, #6]
    EXTI_Init(&EXTI_InitStructure);
 8002ce8:	4668      	mov	r0, sp
 8002cea:	f7fe f8cd 	bl	8000e88 <EXTI_Init>

    /* Configure gpio as input : Button Right-USER */
    /* Connect EXTI Line to gpio pin */
    GPIO_EXTILineConfig(GPIO_PORTSOURCE_KEY, GPIO_PINSOURCE_KEY2);
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f7fe fb11 	bl	8001318 <GPIO_EXTILineConfig>

    /* Configure EXTI Line to generate an interrupt */  
    EXTI_InitStructure.EXTI_Line    = GPIO_EXTI_Line_KEY2;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	9300      	str	r3, [sp, #0]
    EXTI_InitStructure.EXTI_Mode    = EXTI_Mode_Interrupt;
 8002cfa:	f88d 5004 	strb.w	r5, [sp, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8002cfe:	f88d 6005 	strb.w	r6, [sp, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002d02:	f88d 4006 	strb.w	r4, [sp, #6]
    EXTI_Init(&EXTI_InitStructure);
 8002d06:	4668      	mov	r0, sp
 8002d08:	f7fe f8be 	bl	8000e88 <EXTI_Init>

    /* USB Wakeup from suspend event */
    EXTI_ClearITPendingBit(EXTI_Line18);
 8002d0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d10:	f7fe f970 	bl	8000ff4 <EXTI_ClearITPendingBit>
    EXTI_InitStructure.EXTI_Line    = EXTI_Line18; // USB resume from suspend mode
 8002d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d18:	9300      	str	r3, [sp, #0]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	f88d 3005 	strb.w	r3, [sp, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002d20:	f88d 4006 	strb.w	r4, [sp, #6]
    EXTI_Init(&EXTI_InitStructure);
 8002d24:	4668      	mov	r0, sp
 8002d26:	f7fe f8af 	bl	8000e88 <EXTI_Init>
}
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	bf00      	nop

08002d30 <Get_SerialNum>:
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
  
  Device_Serial0 = *(uint32_t*)(0x1FFFF7E8);
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <Get_SerialNum+0x4c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
  Device_Serial1 = *(uint32_t*)(0x1FFFF7EC);
 8002d34:	3304      	adds	r3, #4
 8002d36:	6818      	ldr	r0, [r3, #0]
  Device_Serial2 = *(uint32_t*)(0x1FFFF7F0);
 8002d38:	3304      	adds	r3, #4
 8002d3a:	6819      	ldr	r1, [r3, #0]
  
  if(Device_Serial0 != 0)
 8002d3c:	b1ea      	cbz	r2, 8002d7a <Get_SerialNum+0x4a>
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8002d3e:	b410      	push	{r4}
  Device_Serial1 = *(uint32_t*)(0x1FFFF7EC);
  Device_Serial2 = *(uint32_t*)(0x1FFFF7F0);
  
  if(Device_Serial0 != 0)
  {
     CustomHID_StringSerial[2] = (uint8_t)(Device_Serial0 & 0x000000FF);  
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <Get_SerialNum+0x50>)
 8002d42:	709a      	strb	r2, [r3, #2]
     CustomHID_StringSerial[4] = (uint8_t)((Device_Serial0 & 0x0000FF00) >> 8);
 8002d44:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8002d48:	711c      	strb	r4, [r3, #4]
     CustomHID_StringSerial[6] = (uint8_t)((Device_Serial0 & 0x00FF0000) >> 16);
 8002d4a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8002d4e:	719c      	strb	r4, [r3, #6]
     CustomHID_StringSerial[8] = (uint8_t)((Device_Serial0 & 0xFF000000) >> 24);  
 8002d50:	0e12      	lsrs	r2, r2, #24
 8002d52:	721a      	strb	r2, [r3, #8]

     CustomHID_StringSerial[10] = (uint8_t)(Device_Serial1 & 0x000000FF);  
 8002d54:	7298      	strb	r0, [r3, #10]
     CustomHID_StringSerial[12] = (uint8_t)((Device_Serial1 & 0x0000FF00) >> 8);
 8002d56:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002d5a:	731a      	strb	r2, [r3, #12]
     CustomHID_StringSerial[14] = (uint8_t)((Device_Serial1 & 0x00FF0000) >> 16);
 8002d5c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002d60:	739a      	strb	r2, [r3, #14]
     CustomHID_StringSerial[16] = (uint8_t)((Device_Serial1 & 0xFF000000) >> 24); 
 8002d62:	0e00      	lsrs	r0, r0, #24
 8002d64:	7418      	strb	r0, [r3, #16]

     CustomHID_StringSerial[18] = (uint8_t)(Device_Serial2 & 0x000000FF);  
 8002d66:	7499      	strb	r1, [r3, #18]
     CustomHID_StringSerial[20] = (uint8_t)((Device_Serial2 & 0x0000FF00) >> 8);
 8002d68:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002d6c:	751a      	strb	r2, [r3, #20]
     CustomHID_StringSerial[22] = (uint8_t)((Device_Serial2 & 0x00FF0000) >> 16);
 8002d6e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002d72:	759a      	strb	r2, [r3, #22]
     CustomHID_StringSerial[24] = (uint8_t)((Device_Serial2 & 0xFF000000) >> 24); 
 8002d74:	0e09      	lsrs	r1, r1, #24
 8002d76:	7619      	strb	r1, [r3, #24]
  }   
}
 8002d78:	bc10      	pop	{r4}
 8002d7a:	4770      	bx	lr
 8002d7c:	1ffff7e8 	.word	0x1ffff7e8
 8002d80:	20000014 	.word	0x20000014

08002d84 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in milliseconds.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{ 
 8002d84:	b082      	sub	sp, #8
 8002d86:	9001      	str	r0, [sp, #4]
  TimingDelay = nTime;
 8002d88:	9a01      	ldr	r2, [sp, #4]
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <Delay+0x18>)
 8002d8c:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <Delay+0x18>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1fb      	bne.n	8002d8e <Delay+0xa>
}
 8002d96:	b002      	add	sp, #8
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	200002d8 	.word	0x200002d8

08002da0 <TimingDelay_Decrement>:
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <TimingDelay_Decrement+0x10>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b11b      	cbz	r3, 8002dae <TimingDelay_Decrement+0xe>
  { 
    TimingDelay--;
 8002da6:	4a02      	ldr	r2, [pc, #8]	; (8002db0 <TimingDelay_Decrement+0x10>)
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4770      	bx	lr
 8002db0:	200002d8 	.word	0x200002d8

08002db4 <main>:
bool g_TestProcessState = FALSE;

RCC_ClocksTypeDef rcc_clocks;

int main(void)
{
 8002db4:	b508      	push	{r3, lr}
    printf("kernel start \r\n");
    /* Start the scheduler. */
	vTaskStartScheduler();
#else
	 /* System Clocks Configuration */
    RCC_Configuration();
 8002db6:	f7ff feb3 	bl	8002b20 <RCC_Configuration>

    RCC_GetClocksFreq(&rcc_clocks);
 8002dba:	4c14      	ldr	r4, [pc, #80]	; (8002e0c <main+0x58>)
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7fe fb59 	bl	8001474 <RCC_GetClocksFreq>

    /* NVIC configuration */
    NVIC_Configuration();
 8002dc2:	f7ff fecf 	bl	8002b64 <NVIC_Configuration>

    /* Configure the GPIO ports */
    GPIO_Configuration();
 8002dc6:	f7ff ff37 	bl	8002c38 <GPIO_Configuration>

    /* EXTI configuration */
    EXTI_Configuration();
 8002dca:	f7ff ff7d 	bl	8002cc8 <EXTI_Configuration>

    /* UART initialization */
    USART1_Init();
 8002dce:	f7ff fe89 	bl	8002ae4 <USART1_Init>

    /* Setup SysTick Timer for 1 msec interrupts  */
    if (SysTick_Config(rcc_clocks.SYSCLK_Frequency / 1000))
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <main+0x5c>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <main+0x60>)
 8002de0:	6053      	str	r3, [r2, #4]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8002de2:	21f0      	movs	r1, #240	; 0xf0
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <main+0x64>)
 8002de6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 8002dea:	2000      	movs	r0, #0
 8002dec:	6090      	str	r0, [r2, #8]
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 8002dee:	2307      	movs	r3, #7
 8002df0:	6013      	str	r3, [r2, #0]
    { 
        /* Capture error */ 
        while (1);
    }

    USB_Cable_Config(DISABLE);
 8002df2:	f7ff ff11 	bl	8002c18 <USB_Cable_Config>

    Delay(500);
 8002df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dfa:	f7ff ffc3 	bl	8002d84 <Delay>
    LED_Off_All();
 8002dfe:	f7fd ff8d 	bl	8000d1c <LED_Off_All>
    while(1)
    {
#ifdef FREE_RTOS

#else
		printf("testing\r\n");
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <main+0x68>)
 8002e04:	f001 f93c 	bl	8004080 <puts>
 8002e08:	e7fb      	b.n	8002e02 <main+0x4e>
 8002e0a:	bf00      	nop
 8002e0c:	20000330 	.word	0x20000330
 8002e10:	10624dd3 	.word	0x10624dd3
 8002e14:	e000e010 	.word	0xe000e010
 8002e18:	e000ed00 	.word	0xe000ed00
 8002e1c:	08007a18 	.word	0x08007a18

08002e20 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback(void)
{
 8002e20:	b508      	push	{r3, lr}
    DEBUG_MSG_FUNC_START;
 8002e22:	4802      	ldr	r0, [pc, #8]	; (8002e2c <EP1_IN_Callback+0xc>)
 8002e24:	f7ff fd32 	bl	800288c <DebugMsg_FunctionStart>
 8002e28:	bd08      	pop	{r3, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08007b68 	.word	0x08007b68

08002e30 <EP1_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_OUT_Callback(void)
{
 8002e30:	b510      	push	{r4, lr}
    DEBUG_MSG_FUNC_START;
 8002e32:	4819      	ldr	r0, [pc, #100]	; (8002e98 <EP1_OUT_Callback+0x68>)
 8002e34:	f7ff fd2a 	bl	800288c <DebugMsg_FunctionStart>

    BitAction Led_State;

    PMAToUserBufferCopy(Receive_Buffer, ENDP1_RXADDR, 2);
 8002e38:	4c18      	ldr	r4, [pc, #96]	; (8002e9c <EP1_OUT_Callback+0x6c>)
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff fc01 	bl	8002648 <PMAToUserBufferCopy>

    if (Receive_Buffer[1] == 0)
 8002e46:	7863      	ldrb	r3, [r4, #1]
 8002e48:	b90b      	cbnz	r3, 8002e4e <EP1_OUT_Callback+0x1e>
    {
        Led_State = Bit_SET;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	e000      	b.n	8002e50 <EP1_OUT_Callback+0x20>
    }
    else 
    {
        Led_State = Bit_RESET;
 8002e4e:	2200      	movs	r2, #0
    }

    switch (Receive_Buffer[0])
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <EP1_OUT_Callback+0x6c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d009      	beq.n	8002e6c <EP1_OUT_Callback+0x3c>
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d00c      	beq.n	8002e76 <EP1_OUT_Callback+0x46>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d110      	bne.n	8002e82 <EP1_OUT_Callback+0x52>
    {
    case 1: /* Led 1 */
        GPIO_WriteBit(GPIO_LED, GPIO_LED1_PIN, Led_State);
 8002e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e64:	480e      	ldr	r0, [pc, #56]	; (8002ea0 <EP1_OUT_Callback+0x70>)
 8002e66:	f7fe f9cb 	bl	8001200 <GPIO_WriteBit>
        break;
 8002e6a:	e00f      	b.n	8002e8c <EP1_OUT_Callback+0x5c>
    case 2: /* Led 2 */
        GPIO_WriteBit(GPIO_LED, GPIO_LED2_PIN, Led_State);
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <EP1_OUT_Callback+0x70>)
 8002e70:	f7fe f9c6 	bl	8001200 <GPIO_WriteBit>
        break;
 8002e74:	e00a      	b.n	8002e8c <EP1_OUT_Callback+0x5c>
    case 3: /* Led 3 */
        GPIO_WriteBit(GPIO_LED, GPIO_LED3_PIN, Led_State);
 8002e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e7a:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <EP1_OUT_Callback+0x70>)
 8002e7c:	f7fe f9c0 	bl	8001200 <GPIO_WriteBit>
        break;
 8002e80:	e004      	b.n	8002e8c <EP1_OUT_Callback+0x5c>
    default:
        GPIO_Write(GPIO_LED,
 8002e82:	f64f 41df 	movw	r1, #64735	; 0xfcdf
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <EP1_OUT_Callback+0x70>)
 8002e88:	f7fe fa1c 	bl	80012c4 <GPIO_Write>
                   ~(uint16_t)(GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ));
        break;
    }

    SetEPRxStatus(ENDP1, EP_RX_VALID);
 8002e8c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7ff fc19 	bl	80026c8 <SetEPRxStatus>
 8002e96:	bd10      	pop	{r4, pc}
 8002e98:	08007b54 	.word	0x08007b54
 8002e9c:	20000344 	.word	0x20000344
 8002ea0:	40010c00 	.word	0x40010c00

08002ea4 <CustomHID_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CustomHID_Status_In(void)
{
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop

08002ea8 <CustomHID_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CustomHID_Status_Out (void)
{
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop

08002eac <CustomHID_Data_Setup>:
{
  uint8_t *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if ((RequestNo == GET_DESCRIPTOR)
 8002eac:	2806      	cmp	r0, #6
 8002eae:	d10f      	bne.n	8002ed0 <CustomHID_Data_Setup+0x24>
      && (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <CustomHID_Data_Setup+0x64>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	7813      	ldrb	r3, [r2, #0]
 8002eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <CustomHID_Data_Setup+0x24>
      && (pInformation->USBwIndex0 == 0))
 8002ebe:	7953      	ldrb	r3, [r2, #5]
 8002ec0:	b933      	cbnz	r3, 8002ed0 <CustomHID_Data_Setup+0x24>
  {

    if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
 8002ec2:	7893      	ldrb	r3, [r2, #2]
 8002ec4:	2b22      	cmp	r3, #34	; 0x22
 8002ec6:	d00e      	beq.n	8002ee6 <CustomHID_Data_Setup+0x3a>
    {
      CopyRoutine = CustomHID_GetReportDescriptor;
    }
    else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
 8002ec8:	2b21      	cmp	r3, #33	; 0x21
 8002eca:	d00e      	beq.n	8002eea <CustomHID_Data_Setup+0x3e>
*******************************************************************************/
RESULT CustomHID_Data_Setup(uint8_t RequestNo)
{
  uint8_t *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e011      	b.n	8002ef4 <CustomHID_Data_Setup+0x48>
    }

  } /* End of GET_DESCRIPTOR */

  /*** GET_PROTOCOL ***/
  else if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <CustomHID_Data_Setup+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eda:	2b21      	cmp	r3, #33	; 0x21
 8002edc:	d107      	bne.n	8002eee <CustomHID_Data_Setup+0x42>
           && RequestNo == GET_PROTOCOL)
 8002ede:	2803      	cmp	r0, #3
 8002ee0:	d007      	beq.n	8002ef2 <CustomHID_Data_Setup+0x46>
*******************************************************************************/
RESULT CustomHID_Data_Setup(uint8_t RequestNo)
{
  uint8_t *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e006      	b.n	8002ef4 <CustomHID_Data_Setup+0x48>
      && (pInformation->USBwIndex0 == 0))
  {

    if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
    {
      CopyRoutine = CustomHID_GetReportDescriptor;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <CustomHID_Data_Setup+0x68>)
 8002ee8:	e004      	b.n	8002ef4 <CustomHID_Data_Setup+0x48>
    }
    else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
    {
      CopyRoutine = CustomHID_GetHIDDescriptor;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <CustomHID_Data_Setup+0x6c>)
 8002eec:	e002      	b.n	8002ef4 <CustomHID_Data_Setup+0x48>
*******************************************************************************/
RESULT CustomHID_Data_Setup(uint8_t RequestNo)
{
  uint8_t *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <CustomHID_Data_Setup+0x48>

  /*** GET_PROTOCOL ***/
  else if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
           && RequestNo == GET_PROTOCOL)
  {
    CopyRoutine = CustomHID_GetProtocolValue;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <CustomHID_Data_Setup+0x70>)
  }

  if (CopyRoutine == NULL)
 8002ef4:	b14b      	cbz	r3, 8002f0a <CustomHID_Data_Setup+0x5e>
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT CustomHID_Data_Setup(uint8_t RequestNo)
{
 8002ef6:	b510      	push	{r4, lr}
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002ef8:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <CustomHID_Data_Setup+0x64>)
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002efe:	2400      	movs	r4, #0
 8002f00:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8002f02:	4620      	mov	r0, r4
 8002f04:	4798      	blx	r3

  return USB_SUCCESS;
 8002f06:	4620      	mov	r0, r4
 8002f08:	bd10      	pop	{r4, pc}
    CopyRoutine = CustomHID_GetProtocolValue;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000320 	.word	0x20000320
 8002f14:	08003079 	.word	0x08003079
 8002f18:	08003089 	.word	0x08003089
 8002f1c:	08002f31 	.word	0x08002f31

08002f20 <CustomHID_Get_Interface_Setting>:
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT CustomHID_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002f20:	b911      	cbnz	r1, 8002f28 <CustomHID_Get_Interface_Setting+0x8>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 0)
 8002f22:	b118      	cbz	r0, 8002f2c <CustomHID_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
 8002f24:	2002      	movs	r0, #2
 8002f26:	4770      	bx	lr
*******************************************************************************/
RESULT CustomHID_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
 8002f28:	2002      	movs	r0, #2
 8002f2a:	4770      	bx	lr
  else if (Interface > 0)
  {
    return USB_UNSUPPORT;
  }

  return USB_SUCCESS;
 8002f2c:	2000      	movs	r0, #0
}
 8002f2e:	4770      	bx	lr

08002f30 <CustomHID_GetProtocolValue>:
* Output         : None.
* Return         : address of the protcol value.
*******************************************************************************/
uint8_t *CustomHID_GetProtocolValue(uint16_t Length)
{
  if (Length == 0)
 8002f30:	b920      	cbnz	r0, 8002f3c <CustomHID_GetProtocolValue+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = 1;
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <CustomHID_GetProtocolValue+0x10>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002f3a:	4770      	bx	lr
  }
  else
  {
    return (uint8_t *)(&ProtocolValue);
 8002f3c:	4801      	ldr	r0, [pc, #4]	; (8002f44 <CustomHID_GetProtocolValue+0x14>)
  }
}
 8002f3e:	4770      	bx	lr
 8002f40:	20000320 	.word	0x20000320
 8002f44:	20000348 	.word	0x20000348

08002f48 <CustomHID_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CustomHID_init(void)
{
 8002f48:	b510      	push	{r4, lr}
  /* Update the serial number string descriptor with the data from the unique 
  ID*/
  Get_SerialNum();
 8002f4a:	f7ff fef1 	bl	8002d30 <Get_SerialNum>
    
  pInformation->Current_Configuration = 0;
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <CustomHID_init+0x28>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2400      	movs	r4, #0
 8002f54:	729c      	strb	r4, [r3, #10]
  /* Connect the device */
  PowerOn();
 8002f56:	f000 f93d 	bl	80031d4 <PowerOn>
  /* USB interrupts initialization */
  _SetISTR(0);               /* clear pending interrupts */
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <CustomHID_init+0x2c>)
 8002f5c:	601c      	str	r4, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 8002f5e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <CustomHID_init+0x30>)
 8002f64:	8013      	strh	r3, [r2, #0]
  _SetCNTR(wInterrupt_Mask); /* set interrupts mask */
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <CustomHID_init+0x34>)
 8002f68:	6013      	str	r3, [r2, #0]

  bDeviceState = UNCONNECTED;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <CustomHID_init+0x38>)
 8002f6c:	601c      	str	r4, [r3, #0]
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	20000320 	.word	0x20000320
 8002f74:	40005c44 	.word	0x40005c44
 8002f78:	20000324 	.word	0x20000324
 8002f7c:	40005c40 	.word	0x40005c40
 8002f80:	200002e0 	.word	0x200002e0

08002f84 <CustomHID_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CustomHID_Reset(void)
{
 8002f84:	b510      	push	{r4, lr}
  /* Set Joystick_DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <CustomHID_Reset+0xa0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2400      	movs	r4, #0
 8002f8c:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Interface = 0;/*the default Interface*/
 8002f8e:	72dc      	strb	r4, [r3, #11]
  
  /* Current Feature initialization */
  pInformation->Current_Feature = CustomHID_ConfigDescriptor[7];
 8002f90:	4a25      	ldr	r2, [pc, #148]	; (8003028 <CustomHID_Reset+0xa4>)
 8002f92:	79d2      	ldrb	r2, [r2, #7]
 8002f94:	725a      	strb	r2, [r3, #9]
  
  SetBTABLE(BTABLE_ADDRESS);
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff fb66 	bl	8002668 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff fb69 	bl	8002678 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff fb73 	bl	8002694 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002fae:	2118      	movs	r1, #24
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff fc09 	bl	80027c8 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002fb6:	2158      	movs	r1, #88	; 0x58
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff fbf5 	bl	80027a8 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff fbbc 	bl	800273c <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <CustomHID_Reset+0xa8>)
 8002fc6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f7ff fc36 	bl	800283c <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff fba3 	bl	800271c <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_INTERRUPT);
 8002fd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7ff fb4c 	bl	8002678 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8002fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7ff fbdf 	bl	80027a8 <SetEPTxAddr>
  SetEPRxAddr(ENDP1, ENDP1_RXADDR);
 8002fea:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f7ff fbea 	bl	80027c8 <SetEPRxAddr>
  SetEPTxCount(ENDP1, 2);
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7ff fc12 	bl	8002820 <SetEPTxCount>
  SetEPRxCount(ENDP1, 2);
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7ff fc1c 	bl	800283c <SetEPRxCount>
  SetEPRxStatus(ENDP1, EP_RX_VALID);
 8003004:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003008:	2001      	movs	r0, #1
 800300a:	f7ff fb5d 	bl	80026c8 <SetEPRxStatus>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800300e:	2120      	movs	r1, #32
 8003010:	2001      	movs	r0, #1
 8003012:	f7ff fb3f 	bl	8002694 <SetEPTxStatus>

  bDeviceState = ATTACHED;
 8003016:	2201      	movs	r2, #1
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <CustomHID_Reset+0xac>)
 800301a:	601a      	str	r2, [r3, #0]
  
  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800301c:	4620      	mov	r0, r4
 800301e:	f7ff f937 	bl	8002290 <SetDeviceAddress>
 8003022:	bd10      	pop	{r4, pc}
 8003024:	20000320 	.word	0x20000320
 8003028:	08007b24 	.word	0x08007b24
 800302c:	20000038 	.word	0x20000038
 8003030:	200002e0 	.word	0x200002e0

08003034 <CustomHID_GetDeviceDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *CustomHID_GetDeviceDescriptor(uint16_t Length)
{
 8003034:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8003036:	4902      	ldr	r1, [pc, #8]	; (8003040 <CustomHID_GetDeviceDescriptor+0xc>)
 8003038:	f7ff f89c 	bl	8002174 <Standard_GetDescriptorData>
}
 800303c:	bd08      	pop	{r3, pc}
 800303e:	bf00      	nop
 8003040:	20000070 	.word	0x20000070

08003044 <CustomHID_GetConfigDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *CustomHID_GetConfigDescriptor(uint16_t Length)
{
 8003044:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8003046:	4902      	ldr	r1, [pc, #8]	; (8003050 <CustomHID_GetConfigDescriptor+0xc>)
 8003048:	f7ff f894 	bl	8002174 <Standard_GetDescriptorData>
}
 800304c:	bd08      	pop	{r3, pc}
 800304e:	bf00      	nop
 8003050:	20000030 	.word	0x20000030

08003054 <CustomHID_GetStringDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *CustomHID_GetStringDescriptor(uint16_t Length)
{
 8003054:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <CustomHID_GetStringDescriptor+0x1c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800305c:	2b04      	cmp	r3, #4
 800305e:	d805      	bhi.n	800306c <CustomHID_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else 
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <CustomHID_GetStringDescriptor+0x20>)
 8003062:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003066:	f7ff f885 	bl	8002174 <Standard_GetDescriptorData>
 800306a:	bd08      	pop	{r3, pc}
uint8_t *CustomHID_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800306c:	2000      	movs	r0, #0
  }
  else 
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800306e:	bd08      	pop	{r3, pc}
 8003070:	20000320 	.word	0x20000320
 8003074:	20000078 	.word	0x20000078

08003078 <CustomHID_GetReportDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *CustomHID_GetReportDescriptor(uint16_t Length)
{
 8003078:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &CustomHID_Report_Descriptor);
 800307a:	4902      	ldr	r1, [pc, #8]	; (8003084 <CustomHID_GetReportDescriptor+0xc>)
 800307c:	f7ff f87a 	bl	8002174 <Standard_GetDescriptorData>
}
 8003080:	bd08      	pop	{r3, pc}
 8003082:	bf00      	nop
 8003084:	20000068 	.word	0x20000068

08003088 <CustomHID_GetHIDDescriptor>:
* Input          : Length
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *CustomHID_GetHIDDescriptor(uint16_t Length)
{
 8003088:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &CustomHID_Hid_Descriptor);
 800308a:	4902      	ldr	r1, [pc, #8]	; (8003094 <CustomHID_GetHIDDescriptor+0xc>)
 800308c:	f7ff f872 	bl	8002174 <Standard_GetDescriptorData>
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	20000098 	.word	0x20000098

08003098 <CustomHID_SetProtocol>:
* Output         : None.
* Return         : USB SUCCESS.
*******************************************************************************/
RESULT CustomHID_SetProtocol(void)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <CustomHID_SetProtocol+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	78da      	ldrb	r2, [r3, #3]
  ProtocolValue = wValue0;
 800309e:	4b03      	ldr	r3, [pc, #12]	; (80030ac <CustomHID_SetProtocol+0x14>)
 80030a0:	601a      	str	r2, [r3, #0]
  return USB_SUCCESS;
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000320 	.word	0x20000320
 80030ac:	20000348 	.word	0x20000348

080030b0 <CustomHID_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT CustomHID_NoData_Setup(uint8_t RequestNo)
{
 80030b0:	b508      	push	{r3, lr}
  if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <CustomHID_NoData_Setup+0x24>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030bc:	2b21      	cmp	r3, #33	; 0x21
 80030be:	d104      	bne.n	80030ca <CustomHID_NoData_Setup+0x1a>
      && (RequestNo == SET_PROTOCOL))
 80030c0:	280b      	cmp	r0, #11
 80030c2:	d104      	bne.n	80030ce <CustomHID_NoData_Setup+0x1e>
  {
    return CustomHID_SetProtocol();
 80030c4:	f7ff ffe8 	bl	8003098 <CustomHID_SetProtocol>
 80030c8:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 80030ca:	2002      	movs	r0, #2
 80030cc:	bd08      	pop	{r3, pc}
 80030ce:	2002      	movs	r0, #2
  }
}
 80030d0:	bd08      	pop	{r3, pc}
 80030d2:	bf00      	nop
 80030d4:	20000320 	.word	0x20000320

080030d8 <USB_Istr>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
 80030d8:	b508      	push	{r3, lr}
  wIstr = _GetISTR();
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <USB_Istr+0xe4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <USB_Istr+0xe8>)
 80030e2:	8013      	strh	r3, [r2, #0]

#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80030e4:	8813      	ldrh	r3, [r2, #0]
 80030e6:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <USB_Istr+0xec>)
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	421a      	tst	r2, r3
 80030f0:	d006      	beq.n	8003100 <USB_Istr+0x28>
  {
    _SetISTR((uint16_t)CLR_RESET);
 80030f2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <USB_Istr+0xe4>)
 80030f8:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <USB_Istr+0xf0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <USB_Istr+0xe8>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <USB_Istr+0xec>)
 8003106:	8812      	ldrh	r2, [r2, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800310c:	421a      	tst	r2, r3
 800310e:	d003      	beq.n	8003118 <USB_Istr+0x40>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8003110:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <USB_Istr+0xe4>)
 8003116:	601a      	str	r2, [r3, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8003118:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <USB_Istr+0xe8>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <USB_Istr+0xec>)
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	421a      	tst	r2, r3
 8003126:	d006      	beq.n	8003136 <USB_Istr+0x5e>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8003128:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <USB_Istr+0xe4>)
 800312e:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8003130:	2000      	movs	r0, #0
 8003132:	f000 f885 	bl	8003240 <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <USB_Istr+0xe8>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <USB_Istr+0xec>)
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	421a      	tst	r2, r3
 8003144:	d00e      	beq.n	8003164 <USB_Istr+0x8c>
  {
    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <USB_Istr+0xf4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800314e:	d002      	beq.n	8003156 <USB_Istr+0x7e>
    {
      Suspend();
 8003150:	f000 f854 	bl	80031fc <Suspend>
 8003154:	e002      	b.n	800315c <USB_Istr+0x84>
    }
    else
    {
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8003156:	2002      	movs	r0, #2
 8003158:	f000 f872 	bl	8003240 <Resume>
    }
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800315c:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <USB_Istr+0xe4>)
 8003162:	601a      	str	r2, [r3, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <USB_Istr+0xe8>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <USB_Istr+0xec>)
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003170:	421a      	tst	r2, r3
 8003172:	d008      	beq.n	8003186 <USB_Istr+0xae>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8003174:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <USB_Istr+0xe4>)
 800317a:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <USB_Istr+0xf8>)
 800317e:	7813      	ldrb	r3, [r2, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	7013      	strb	r3, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <USB_Istr+0xe8>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <USB_Istr+0xec>)
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	421a      	tst	r2, r3
 8003194:	d006      	beq.n	80031a4 <USB_Istr+0xcc>
  {
    _SetISTR((uint16_t)CLR_ESOF);
 8003196:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <USB_Istr+0xe4>)
 800319c:	601a      	str	r2, [r3, #0]
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800319e:	2007      	movs	r0, #7
 80031a0:	f000 f84e 	bl	8003240 <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <USB_Istr+0xe8>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	4a06      	ldr	r2, [pc, #24]	; (80031c4 <USB_Istr+0xec>)
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b0:	421a      	tst	r2, r3
 80031b2:	d001      	beq.n	80031b8 <USB_Istr+0xe0>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80031b4:	f7ff f8c2 	bl	800233c <CTR_LP>
 80031b8:	bd08      	pop	{r3, pc}
 80031ba:	bf00      	nop
 80031bc:	40005c44 	.word	0x40005c44
 80031c0:	2000034c 	.word	0x2000034c
 80031c4:	20000324 	.word	0x20000324
 80031c8:	20000038 	.word	0x20000038
 80031cc:	200000dc 	.word	0x200000dc
 80031d0:	200002dd 	.word	0x200002dd

080031d4 <PowerOn>:
  /*** cable plugged-in ? ***/
//  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <PowerOn+0x1c>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
 80031da:	2000      	movs	r0, #0
  _SetCNTR(wInterrupt_Mask);
 80031dc:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <PowerOn+0x20>)
 80031e0:	6010      	str	r0, [r2, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80031e2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <PowerOn+0x24>)
 80031e8:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 80031ea:	601a      	str	r2, [r3, #0]

  return USB_SUCCESS;
}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40005c40 	.word	0x40005c40
 80031f4:	40005c44 	.word	0x40005c44
 80031f8:	20000324 	.word	0x20000324

080031fc <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80031fc:	b508      	push	{r3, lr}
  uint16_t wCNTR;
  /* suspend preparation */
  /* ... */

  /* macrocell enters suspend mode */
  wCNTR = _GetCNTR();
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <Suspend+0x20>)
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	b29b      	uxth	r3, r3
  wCNTR |= CNTR_FSUSP;
 8003204:	f043 0308 	orr.w	r3, r3, #8
  _SetCNTR(wCNTR);
 8003208:	6013      	str	r3, [r2, #0]
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* power reduction */
  /* ... on connected devices */

  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b29b      	uxth	r3, r3
  wCNTR |= CNTR_LPMODE;
 800320e:	f043 0304 	orr.w	r3, r3, #4
  _SetCNTR(wCNTR);
 8003212:	6013      	str	r3, [r2, #0]

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
 8003214:	f7ff fcce 	bl	8002bb4 <Enter_LowPowerMode>
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	40005c40 	.word	0x40005c40

08003220 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8003220:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8003222:	4c06      	ldr	r4, [pc, #24]	; (800323c <Resume_Init+0x1c>)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	b29b      	uxth	r3, r3
  wCNTR &= (~CNTR_LPMODE);
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	b29b      	uxth	r3, r3
  _SetCNTR(wCNTR);
 800322e:	6023      	str	r3, [r4, #0]

  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003230:	f7ff fccc 	bl	8002bcc <Leave_LowPowerMode>

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8003234:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003238:	6023      	str	r3, [r4, #0]
 800323a:	bd10      	pop	{r4, pc}
 800323c:	40005c40 	.word	0x40005c40

08003240 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8003240:	b508      	push	{r3, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003242:	2807      	cmp	r0, #7
 8003244:	d001      	beq.n	800324a <Resume+0xa>
    ResumeS.eState = eResumeSetVal;
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <Resume+0xa4>)
 8003248:	7018      	strb	r0, [r3, #0]

  switch (ResumeS.eState)
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <Resume+0xa4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d843      	bhi.n	80032dc <Resume+0x9c>
 8003254:	e8df f003 	tbb	[pc, r3]
 8003258:	150f0903 	.word	0x150f0903
 800325c:	2e22      	.short	0x2e22
  {
    case RESUME_EXTERNAL:
      Resume_Init();
 800325e:	f7ff ffdf 	bl	8003220 <Resume_Init>
      ResumeS.eState = RESUME_OFF;
 8003262:	2206      	movs	r2, #6
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <Resume+0xa4>)
 8003266:	701a      	strb	r2, [r3, #0]
      break;
 8003268:	bd08      	pop	{r3, pc}
    case RESUME_INTERNAL:
      Resume_Init();
 800326a:	f7ff ffd9 	bl	8003220 <Resume_Init>
      ResumeS.eState = RESUME_START;
 800326e:	2204      	movs	r2, #4
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <Resume+0xa4>)
 8003272:	701a      	strb	r2, [r3, #0]
      break;
 8003274:	bd08      	pop	{r3, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <Resume+0xa4>)
 8003278:	2202      	movs	r2, #2
 800327a:	705a      	strb	r2, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 800327c:	2203      	movs	r2, #3
 800327e:	701a      	strb	r2, [r3, #0]
      break;
 8003280:	bd08      	pop	{r3, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <Resume+0xa4>)
 8003284:	7853      	ldrb	r3, [r2, #1]
 8003286:	3b01      	subs	r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	7053      	strb	r3, [r2, #1]
      if (ResumeS.bESOFcnt == 0)
 800328c:	7853      	ldrb	r3, [r2, #1]
 800328e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003292:	d126      	bne.n	80032e2 <Resume+0xa2>
        ResumeS.eState = RESUME_START;
 8003294:	2204      	movs	r2, #4
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <Resume+0xa4>)
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	bd08      	pop	{r3, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <Resume+0xa8>)
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	b29b      	uxth	r3, r3
      wCNTR |= CNTR_RESUME;
 80032a2:	f043 0310 	orr.w	r3, r3, #16
      _SetCNTR(wCNTR);
 80032a6:	6013      	str	r3, [r2, #0]
      ResumeS.eState = RESUME_ON;
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <Resume+0xa4>)
 80032aa:	2205      	movs	r2, #5
 80032ac:	701a      	strb	r2, [r3, #0]
      ResumeS.bESOFcnt = 10;
 80032ae:	220a      	movs	r2, #10
 80032b0:	705a      	strb	r2, [r3, #1]
      break;
 80032b2:	bd08      	pop	{r3, pc}
    case RESUME_ON:
      ResumeS.bESOFcnt--;
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <Resume+0xa4>)
 80032b6:	7853      	ldrb	r3, [r2, #1]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	7053      	strb	r3, [r2, #1]
      if (ResumeS.bESOFcnt == 0)
 80032be:	7853      	ldrb	r3, [r2, #1]
 80032c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80032c4:	d10d      	bne.n	80032e2 <Resume+0xa2>
      {
        wCNTR = _GetCNTR();
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <Resume+0xa8>)
 80032c8:	6813      	ldr	r3, [r2, #0]
 80032ca:	b29b      	uxth	r3, r3
        wCNTR &= (~CNTR_RESUME);
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	b29b      	uxth	r3, r3
        _SetCNTR(wCNTR);
 80032d2:	6013      	str	r3, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 80032d4:	2206      	movs	r2, #6
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <Resume+0xa4>)
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	bd08      	pop	{r3, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80032dc:	2206      	movs	r2, #6
 80032de:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <Resume+0xa4>)
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	bd08      	pop	{r3, pc}
 80032e4:	20000350 	.word	0x20000350
 80032e8:	40005c40 	.word	0x40005c40

080032ec <memset>:
 80032ec:	4603      	mov	r3, r0
 80032ee:	4402      	add	r2, r0
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d002      	beq.n	80032fa <memset+0xe>
 80032f4:	f803 1b01 	strb.w	r1, [r3], #1
 80032f8:	e7fa      	b.n	80032f0 <memset+0x4>
 80032fa:	4770      	bx	lr

080032fc <__cvt>:
 80032fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	b088      	sub	sp, #32
 8003302:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003304:	2b00      	cmp	r3, #0
 8003306:	461e      	mov	r6, r3
 8003308:	9912      	ldr	r1, [sp, #72]	; 0x48
 800330a:	bfb8      	it	lt
 800330c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003310:	f027 0720 	bic.w	r7, r7, #32
 8003314:	bfb6      	itet	lt
 8003316:	461e      	movlt	r6, r3
 8003318:	2300      	movge	r3, #0
 800331a:	232d      	movlt	r3, #45	; 0x2d
 800331c:	2f46      	cmp	r7, #70	; 0x46
 800331e:	4614      	mov	r4, r2
 8003320:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003322:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003326:	700b      	strb	r3, [r1, #0]
 8003328:	d003      	beq.n	8003332 <__cvt+0x36>
 800332a:	2f45      	cmp	r7, #69	; 0x45
 800332c:	d103      	bne.n	8003336 <__cvt+0x3a>
 800332e:	3501      	adds	r5, #1
 8003330:	e001      	b.n	8003336 <__cvt+0x3a>
 8003332:	2303      	movs	r3, #3
 8003334:	e000      	b.n	8003338 <__cvt+0x3c>
 8003336:	2302      	movs	r3, #2
 8003338:	aa07      	add	r2, sp, #28
 800333a:	9204      	str	r2, [sp, #16]
 800333c:	aa06      	add	r2, sp, #24
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8003344:	4622      	mov	r2, r4
 8003346:	4633      	mov	r3, r6
 8003348:	f001 feda 	bl	8005100 <_dtoa_r>
 800334c:	2f47      	cmp	r7, #71	; 0x47
 800334e:	4680      	mov	r8, r0
 8003350:	d102      	bne.n	8003358 <__cvt+0x5c>
 8003352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003354:	07db      	lsls	r3, r3, #31
 8003356:	d528      	bpl.n	80033aa <__cvt+0xae>
 8003358:	2f46      	cmp	r7, #70	; 0x46
 800335a:	eb08 0905 	add.w	r9, r8, r5
 800335e:	d111      	bne.n	8003384 <__cvt+0x88>
 8003360:	f898 3000 	ldrb.w	r3, [r8]
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d10a      	bne.n	800337e <__cvt+0x82>
 8003368:	2200      	movs	r2, #0
 800336a:	2300      	movs	r3, #0
 800336c:	4620      	mov	r0, r4
 800336e:	4631      	mov	r1, r6
 8003370:	f7fd fb24 	bl	80009bc <__aeabi_dcmpeq>
 8003374:	b918      	cbnz	r0, 800337e <__cvt+0x82>
 8003376:	f1c5 0501 	rsb	r5, r5, #1
 800337a:	f8ca 5000 	str.w	r5, [sl]
 800337e:	f8da 3000 	ldr.w	r3, [sl]
 8003382:	4499      	add	r9, r3
 8003384:	2200      	movs	r2, #0
 8003386:	2300      	movs	r3, #0
 8003388:	4620      	mov	r0, r4
 800338a:	4631      	mov	r1, r6
 800338c:	f7fd fb16 	bl	80009bc <__aeabi_dcmpeq>
 8003390:	b908      	cbnz	r0, 8003396 <__cvt+0x9a>
 8003392:	2230      	movs	r2, #48	; 0x30
 8003394:	e002      	b.n	800339c <__cvt+0xa0>
 8003396:	f8cd 901c 	str.w	r9, [sp, #28]
 800339a:	e006      	b.n	80033aa <__cvt+0xae>
 800339c:	9b07      	ldr	r3, [sp, #28]
 800339e:	4599      	cmp	r9, r3
 80033a0:	d903      	bls.n	80033aa <__cvt+0xae>
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	9107      	str	r1, [sp, #28]
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e7f8      	b.n	800339c <__cvt+0xa0>
 80033aa:	4640      	mov	r0, r8
 80033ac:	9b07      	ldr	r3, [sp, #28]
 80033ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033b0:	ebc8 0303 	rsb	r3, r8, r3
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	b008      	add	sp, #32
 80033b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080033bc <__exponent>:
 80033bc:	4603      	mov	r3, r0
 80033be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033c0:	2900      	cmp	r1, #0
 80033c2:	bfb8      	it	lt
 80033c4:	4249      	neglt	r1, r1
 80033c6:	f803 2b02 	strb.w	r2, [r3], #2
 80033ca:	bfb4      	ite	lt
 80033cc:	222d      	movlt	r2, #45	; 0x2d
 80033ce:	222b      	movge	r2, #43	; 0x2b
 80033d0:	2909      	cmp	r1, #9
 80033d2:	7042      	strb	r2, [r0, #1]
 80033d4:	dd1a      	ble.n	800340c <__exponent+0x50>
 80033d6:	f10d 0207 	add.w	r2, sp, #7
 80033da:	4616      	mov	r6, r2
 80033dc:	250a      	movs	r5, #10
 80033de:	fb91 f4f5 	sdiv	r4, r1, r5
 80033e2:	fb05 1114 	mls	r1, r5, r4, r1
 80033e6:	2c09      	cmp	r4, #9
 80033e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80033ec:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80033f0:	4621      	mov	r1, r4
 80033f2:	dcf4      	bgt.n	80033de <__exponent+0x22>
 80033f4:	3130      	adds	r1, #48	; 0x30
 80033f6:	1e54      	subs	r4, r2, #1
 80033f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80033fc:	42b4      	cmp	r4, r6
 80033fe:	461a      	mov	r2, r3
 8003400:	d20a      	bcs.n	8003418 <__exponent+0x5c>
 8003402:	f814 2b01 	ldrb.w	r2, [r4], #1
 8003406:	f803 2b01 	strb.w	r2, [r3], #1
 800340a:	e7f7      	b.n	80033fc <__exponent+0x40>
 800340c:	461a      	mov	r2, r3
 800340e:	2430      	movs	r4, #48	; 0x30
 8003410:	4421      	add	r1, r4
 8003412:	f802 4b02 	strb.w	r4, [r2], #2
 8003416:	7059      	strb	r1, [r3, #1]
 8003418:	1a10      	subs	r0, r2, r0
 800341a:	b002      	add	sp, #8
 800341c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003420 <_printf_float>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	b091      	sub	sp, #68	; 0x44
 8003426:	460c      	mov	r4, r1
 8003428:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800342c:	4616      	mov	r6, r2
 800342e:	461f      	mov	r7, r3
 8003430:	4605      	mov	r5, r0
 8003432:	f003 f89b 	bl	800656c <_localeconv_r>
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	9309      	str	r3, [sp, #36]	; 0x24
 800343c:	f7fc fe96 	bl	800016c <strlen>
 8003440:	2300      	movs	r3, #0
 8003442:	930e      	str	r3, [sp, #56]	; 0x38
 8003444:	f8d8 3000 	ldr.w	r3, [r8]
 8003448:	900a      	str	r0, [sp, #40]	; 0x28
 800344a:	3307      	adds	r3, #7
 800344c:	f023 0307 	bic.w	r3, r3, #7
 8003450:	f103 0208 	add.w	r2, r3, #8
 8003454:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003458:	f8d4 b000 	ldr.w	fp, [r4]
 800345c:	f8c8 2000 	str.w	r2, [r8]
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003468:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 800346c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
 8003470:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003474:	930b      	str	r3, [sp, #44]	; 0x2c
 8003476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800347a:	4ba7      	ldr	r3, [pc, #668]	; (8003718 <_printf_float+0x2f8>)
 800347c:	4640      	mov	r0, r8
 800347e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003480:	f7fd face 	bl	8000a20 <__aeabi_dcmpun>
 8003484:	b9a0      	cbnz	r0, 80034b0 <_printf_float+0x90>
 8003486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800348a:	4ba3      	ldr	r3, [pc, #652]	; (8003718 <_printf_float+0x2f8>)
 800348c:	4640      	mov	r0, r8
 800348e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003490:	f7fd faa8 	bl	80009e4 <__aeabi_dcmple>
 8003494:	b960      	cbnz	r0, 80034b0 <_printf_float+0x90>
 8003496:	2200      	movs	r2, #0
 8003498:	2300      	movs	r3, #0
 800349a:	4640      	mov	r0, r8
 800349c:	4651      	mov	r1, sl
 800349e:	f7fd fa97 	bl	80009d0 <__aeabi_dcmplt>
 80034a2:	b110      	cbz	r0, 80034aa <_printf_float+0x8a>
 80034a4:	232d      	movs	r3, #45	; 0x2d
 80034a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034aa:	4b9c      	ldr	r3, [pc, #624]	; (800371c <_printf_float+0x2fc>)
 80034ac:	4a9c      	ldr	r2, [pc, #624]	; (8003720 <_printf_float+0x300>)
 80034ae:	e00a      	b.n	80034c6 <_printf_float+0xa6>
 80034b0:	4642      	mov	r2, r8
 80034b2:	4653      	mov	r3, sl
 80034b4:	4640      	mov	r0, r8
 80034b6:	4651      	mov	r1, sl
 80034b8:	f7fd fab2 	bl	8000a20 <__aeabi_dcmpun>
 80034bc:	2800      	cmp	r0, #0
 80034be:	f000 8192 	beq.w	80037e6 <_printf_float+0x3c6>
 80034c2:	4b98      	ldr	r3, [pc, #608]	; (8003724 <_printf_float+0x304>)
 80034c4:	4a98      	ldr	r2, [pc, #608]	; (8003728 <_printf_float+0x308>)
 80034c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034ca:	bf8c      	ite	hi
 80034cc:	4690      	movhi	r8, r2
 80034ce:	4698      	movls	r8, r3
 80034d0:	2303      	movs	r3, #3
 80034d2:	6123      	str	r3, [r4, #16]
 80034d4:	f02b 0304 	bic.w	r3, fp, #4
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	f04f 0a00 	mov.w	sl, #0
 80034de:	e03d      	b.n	800355c <_printf_float+0x13c>
 80034e0:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80034e4:	f000 818a 	beq.w	80037fc <_printf_float+0x3dc>
 80034e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034ec:	f000 8186 	beq.w	80037fc <_printf_float+0x3dc>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	2100      	movs	r1, #0
 80034f8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80034fc:	9005      	str	r0, [sp, #20]
 80034fe:	9202      	str	r2, [sp, #8]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4642      	mov	r2, r8
 8003504:	4653      	mov	r3, sl
 8003506:	9106      	str	r1, [sp, #24]
 8003508:	f8cd 9010 	str.w	r9, [sp, #16]
 800350c:	f8cd e00c 	str.w	lr, [sp, #12]
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff fef3 	bl	80032fc <__cvt>
 8003516:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800351a:	2b47      	cmp	r3, #71	; 0x47
 800351c:	4680      	mov	r8, r0
 800351e:	f000 8184 	beq.w	800382a <_printf_float+0x40a>
 8003522:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003526:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003528:	f200 818d 	bhi.w	8003846 <_printf_float+0x426>
 800352c:	3901      	subs	r1, #1
 800352e:	464a      	mov	r2, r9
 8003530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003534:	910d      	str	r1, [sp, #52]	; 0x34
 8003536:	f7ff ff41 	bl	80033bc <__exponent>
 800353a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800353c:	4682      	mov	sl, r0
 800353e:	1883      	adds	r3, r0, r2
 8003540:	2a01      	cmp	r2, #1
 8003542:	6123      	str	r3, [r4, #16]
 8003544:	f300 817c 	bgt.w	8003840 <_printf_float+0x420>
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	07d1      	lsls	r1, r2, #31
 800354c:	f100 8178 	bmi.w	8003840 <_printf_float+0x420>
 8003550:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003554:	b113      	cbz	r3, 800355c <_printf_float+0x13c>
 8003556:	232d      	movs	r3, #45	; 0x2d
 8003558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800355c:	9700      	str	r7, [sp, #0]
 800355e:	4633      	mov	r3, r6
 8003560:	aa0f      	add	r2, sp, #60	; 0x3c
 8003562:	4621      	mov	r1, r4
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f99f 	bl	80038a8 <_printf_common>
 800356a:	3001      	adds	r0, #1
 800356c:	d102      	bne.n	8003574 <_printf_float+0x154>
 800356e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003572:	e196      	b.n	80038a2 <_printf_float+0x482>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	055a      	lsls	r2, r3, #21
 8003578:	d401      	bmi.n	800357e <_printf_float+0x15e>
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	e065      	b.n	800364a <_printf_float+0x22a>
 800357e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003582:	f240 80d5 	bls.w	8003730 <_printf_float+0x310>
 8003586:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800358a:	2200      	movs	r2, #0
 800358c:	2300      	movs	r3, #0
 800358e:	f7fd fa15 	bl	80009bc <__aeabi_dcmpeq>
 8003592:	b378      	cbz	r0, 80035f4 <_printf_float+0x1d4>
 8003594:	2301      	movs	r3, #1
 8003596:	4a65      	ldr	r2, [pc, #404]	; (800372c <_printf_float+0x30c>)
 8003598:	4631      	mov	r1, r6
 800359a:	4628      	mov	r0, r5
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	d0e5      	beq.n	800356e <_printf_float+0x14e>
 80035a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035a6:	429a      	cmp	r2, r3
 80035a8:	db0b      	blt.n	80035c2 <_printf_float+0x1a2>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	07d8      	lsls	r0, r3, #31
 80035ae:	d408      	bmi.n	80035c2 <_printf_float+0x1a2>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	079b      	lsls	r3, r3, #30
 80035b4:	f140 8111 	bpl.w	80037da <_printf_float+0x3ba>
 80035b8:	f04f 0800 	mov.w	r8, #0
 80035bc:	f104 0919 	add.w	r9, r4, #25
 80035c0:	e106      	b.n	80037d0 <_printf_float+0x3b0>
 80035c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b8      	blx	r7
 80035cc:	3001      	adds	r0, #1
 80035ce:	d0ce      	beq.n	800356e <_printf_float+0x14e>
 80035d0:	f04f 0800 	mov.w	r8, #0
 80035d4:	f104 091a 	add.w	r9, r4, #26
 80035d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035da:	3b01      	subs	r3, #1
 80035dc:	4598      	cmp	r8, r3
 80035de:	dae7      	bge.n	80035b0 <_printf_float+0x190>
 80035e0:	2301      	movs	r3, #1
 80035e2:	464a      	mov	r2, r9
 80035e4:	4631      	mov	r1, r6
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b8      	blx	r7
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0bf      	beq.n	800356e <_printf_float+0x14e>
 80035ee:	f108 0801 	add.w	r8, r8, #1
 80035f2:	e7f1      	b.n	80035d8 <_printf_float+0x1b8>
 80035f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dc29      	bgt.n	800364e <_printf_float+0x22e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4a4b      	ldr	r2, [pc, #300]	; (800372c <_printf_float+0x30c>)
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	47b8      	blx	r7
 8003604:	3001      	adds	r0, #1
 8003606:	d0b2      	beq.n	800356e <_printf_float+0x14e>
 8003608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800360a:	b923      	cbnz	r3, 8003616 <_printf_float+0x1f6>
 800360c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800360e:	b913      	cbnz	r3, 8003616 <_printf_float+0x1f6>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d5cc      	bpl.n	80035b0 <_printf_float+0x190>
 8003616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	d0a4      	beq.n	800356e <_printf_float+0x14e>
 8003624:	f04f 0900 	mov.w	r9, #0
 8003628:	f104 0a1a 	add.w	sl, r4, #26
 800362c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800362e:	425b      	negs	r3, r3
 8003630:	4599      	cmp	r9, r3
 8003632:	da09      	bge.n	8003648 <_printf_float+0x228>
 8003634:	2301      	movs	r3, #1
 8003636:	4652      	mov	r2, sl
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	d095      	beq.n	800356e <_printf_float+0x14e>
 8003642:	f109 0901 	add.w	r9, r9, #1
 8003646:	e7f1      	b.n	800362c <_printf_float+0x20c>
 8003648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364a:	4642      	mov	r2, r8
 800364c:	e0a7      	b.n	800379e <_printf_float+0x37e>
 800364e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003650:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003652:	429a      	cmp	r2, r3
 8003654:	bfa8      	it	ge
 8003656:	461a      	movge	r2, r3
 8003658:	2a00      	cmp	r2, #0
 800365a:	4691      	mov	r9, r2
 800365c:	dc06      	bgt.n	800366c <_printf_float+0x24c>
 800365e:	f04f 0a00 	mov.w	sl, #0
 8003662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003666:	f104 0b1a 	add.w	fp, r4, #26
 800366a:	e011      	b.n	8003690 <_printf_float+0x270>
 800366c:	4613      	mov	r3, r2
 800366e:	4631      	mov	r1, r6
 8003670:	4642      	mov	r2, r8
 8003672:	4628      	mov	r0, r5
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	d1f1      	bne.n	800365e <_printf_float+0x23e>
 800367a:	e778      	b.n	800356e <_printf_float+0x14e>
 800367c:	2301      	movs	r3, #1
 800367e:	465a      	mov	r2, fp
 8003680:	4631      	mov	r1, r6
 8003682:	4628      	mov	r0, r5
 8003684:	47b8      	blx	r7
 8003686:	3001      	adds	r0, #1
 8003688:	f43f af71 	beq.w	800356e <_printf_float+0x14e>
 800368c:	f10a 0a01 	add.w	sl, sl, #1
 8003690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003692:	ebc9 0203 	rsb	r2, r9, r3
 8003696:	4592      	cmp	sl, r2
 8003698:	dbf0      	blt.n	800367c <_printf_float+0x25c>
 800369a:	eb08 0903 	add.w	r9, r8, r3
 800369e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036a2:	429a      	cmp	r2, r3
 80036a4:	db0f      	blt.n	80036c6 <_printf_float+0x2a6>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	07da      	lsls	r2, r3, #31
 80036aa:	d40c      	bmi.n	80036c6 <_printf_float+0x2a6>
 80036ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036b0:	4498      	add	r8, r3
 80036b2:	ebc9 0808 	rsb	r8, r9, r8
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	4598      	cmp	r8, r3
 80036ba:	bfa8      	it	ge
 80036bc:	4698      	movge	r8, r3
 80036be:	f1b8 0f00 	cmp.w	r8, #0
 80036c2:	dc08      	bgt.n	80036d6 <_printf_float+0x2b6>
 80036c4:	e00f      	b.n	80036e6 <_printf_float+0x2c6>
 80036c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	d1eb      	bne.n	80036ac <_printf_float+0x28c>
 80036d4:	e74b      	b.n	800356e <_printf_float+0x14e>
 80036d6:	4643      	mov	r3, r8
 80036d8:	464a      	mov	r2, r9
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f af44 	beq.w	800356e <_printf_float+0x14e>
 80036e6:	f04f 0900 	mov.w	r9, #0
 80036ea:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80036ee:	f104 0a1a 	add.w	sl, r4, #26
 80036f2:	e009      	b.n	8003708 <_printf_float+0x2e8>
 80036f4:	2301      	movs	r3, #1
 80036f6:	4652      	mov	r2, sl
 80036f8:	4631      	mov	r1, r6
 80036fa:	4628      	mov	r0, r5
 80036fc:	47b8      	blx	r7
 80036fe:	3001      	adds	r0, #1
 8003700:	f43f af35 	beq.w	800356e <_printf_float+0x14e>
 8003704:	f109 0901 	add.w	r9, r9, #1
 8003708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800370a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	ebc8 0303 	rsb	r3, r8, r3
 8003712:	4599      	cmp	r9, r3
 8003714:	dbee      	blt.n	80036f4 <_printf_float+0x2d4>
 8003716:	e74b      	b.n	80035b0 <_printf_float+0x190>
 8003718:	7fefffff 	.word	0x7fefffff
 800371c:	08007b7c 	.word	0x08007b7c
 8003720:	08007b80 	.word	0x08007b80
 8003724:	08007b84 	.word	0x08007b84
 8003728:	08007b88 	.word	0x08007b88
 800372c:	08007b8c 	.word	0x08007b8c
 8003730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003732:	2a01      	cmp	r2, #1
 8003734:	dc01      	bgt.n	800373a <_printf_float+0x31a>
 8003736:	07db      	lsls	r3, r3, #31
 8003738:	d538      	bpl.n	80037ac <_printf_float+0x38c>
 800373a:	2301      	movs	r3, #1
 800373c:	4642      	mov	r2, r8
 800373e:	4631      	mov	r1, r6
 8003740:	4628      	mov	r0, r5
 8003742:	47b8      	blx	r7
 8003744:	3001      	adds	r0, #1
 8003746:	f43f af12 	beq.w	800356e <_printf_float+0x14e>
 800374a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800374c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800374e:	4631      	mov	r1, r6
 8003750:	4628      	mov	r0, r5
 8003752:	47b8      	blx	r7
 8003754:	3001      	adds	r0, #1
 8003756:	f43f af0a 	beq.w	800356e <_printf_float+0x14e>
 800375a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800375e:	2200      	movs	r2, #0
 8003760:	2300      	movs	r3, #0
 8003762:	f7fd f92b 	bl	80009bc <__aeabi_dcmpeq>
 8003766:	b120      	cbz	r0, 8003772 <_printf_float+0x352>
 8003768:	f04f 0800 	mov.w	r8, #0
 800376c:	f104 091a 	add.w	r9, r4, #26
 8003770:	e00e      	b.n	8003790 <_printf_float+0x370>
 8003772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003774:	f108 0201 	add.w	r2, r8, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	e019      	b.n	80037b0 <_printf_float+0x390>
 800377c:	2301      	movs	r3, #1
 800377e:	464a      	mov	r2, r9
 8003780:	4631      	mov	r1, r6
 8003782:	4628      	mov	r0, r5
 8003784:	47b8      	blx	r7
 8003786:	3001      	adds	r0, #1
 8003788:	f43f aef1 	beq.w	800356e <_printf_float+0x14e>
 800378c:	f108 0801 	add.w	r8, r8, #1
 8003790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003792:	3b01      	subs	r3, #1
 8003794:	4598      	cmp	r8, r3
 8003796:	dbf1      	blt.n	800377c <_printf_float+0x35c>
 8003798:	4653      	mov	r3, sl
 800379a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800379e:	4631      	mov	r1, r6
 80037a0:	4628      	mov	r0, r5
 80037a2:	47b8      	blx	r7
 80037a4:	3001      	adds	r0, #1
 80037a6:	f47f af03 	bne.w	80035b0 <_printf_float+0x190>
 80037aa:	e6e0      	b.n	800356e <_printf_float+0x14e>
 80037ac:	4642      	mov	r2, r8
 80037ae:	2301      	movs	r3, #1
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	d1ee      	bne.n	8003798 <_printf_float+0x378>
 80037ba:	e6d8      	b.n	800356e <_printf_float+0x14e>
 80037bc:	2301      	movs	r3, #1
 80037be:	464a      	mov	r2, r9
 80037c0:	4631      	mov	r1, r6
 80037c2:	4628      	mov	r0, r5
 80037c4:	47b8      	blx	r7
 80037c6:	3001      	adds	r0, #1
 80037c8:	f43f aed1 	beq.w	800356e <_printf_float+0x14e>
 80037cc:	f108 0801 	add.w	r8, r8, #1
 80037d0:	68e3      	ldr	r3, [r4, #12]
 80037d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	4598      	cmp	r8, r3
 80037d8:	dbf0      	blt.n	80037bc <_printf_float+0x39c>
 80037da:	68e0      	ldr	r0, [r4, #12]
 80037dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037de:	4298      	cmp	r0, r3
 80037e0:	bfb8      	it	lt
 80037e2:	4618      	movlt	r0, r3
 80037e4:	e05d      	b.n	80038a2 <_printf_float+0x482>
 80037e6:	6862      	ldr	r2, [r4, #4]
 80037e8:	a80e      	add	r0, sp, #56	; 0x38
 80037ea:	1c53      	adds	r3, r2, #1
 80037ec:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80037f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80037f4:	f47f ae74 	bne.w	80034e0 <_printf_float+0xc0>
 80037f8:	2206      	movs	r2, #6
 80037fa:	e001      	b.n	8003800 <_printf_float+0x3e0>
 80037fc:	b912      	cbnz	r2, 8003804 <_printf_float+0x3e4>
 80037fe:	2201      	movs	r2, #1
 8003800:	6062      	str	r2, [r4, #4]
 8003802:	e675      	b.n	80034f0 <_printf_float+0xd0>
 8003804:	2100      	movs	r1, #0
 8003806:	9106      	str	r1, [sp, #24]
 8003808:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800380c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	9005      	str	r0, [sp, #20]
 8003814:	4642      	mov	r2, r8
 8003816:	f8cd 9010 	str.w	r9, [sp, #16]
 800381a:	f8cd e00c 	str.w	lr, [sp, #12]
 800381e:	9102      	str	r1, [sp, #8]
 8003820:	4653      	mov	r3, sl
 8003822:	4628      	mov	r0, r5
 8003824:	f7ff fd6a 	bl	80032fc <__cvt>
 8003828:	4680      	mov	r8, r0
 800382a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800382c:	1cd8      	adds	r0, r3, #3
 800382e:	db02      	blt.n	8003836 <_printf_float+0x416>
 8003830:	6862      	ldr	r2, [r4, #4]
 8003832:	4293      	cmp	r3, r2
 8003834:	dd1d      	ble.n	8003872 <_printf_float+0x452>
 8003836:	f1a9 0902 	sub.w	r9, r9, #2
 800383a:	fa5f f989 	uxtb.w	r9, r9
 800383e:	e670      	b.n	8003522 <_printf_float+0x102>
 8003840:	3301      	adds	r3, #1
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	e684      	b.n	8003550 <_printf_float+0x130>
 8003846:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800384a:	d114      	bne.n	8003876 <_printf_float+0x456>
 800384c:	2900      	cmp	r1, #0
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	dd07      	ble.n	8003862 <_printf_float+0x442>
 8003852:	6121      	str	r1, [r4, #16]
 8003854:	b913      	cbnz	r3, 800385c <_printf_float+0x43c>
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	07d2      	lsls	r2, r2, #31
 800385a:	d51d      	bpl.n	8003898 <_printf_float+0x478>
 800385c:	3301      	adds	r3, #1
 800385e:	440b      	add	r3, r1
 8003860:	e019      	b.n	8003896 <_printf_float+0x476>
 8003862:	b913      	cbnz	r3, 800386a <_printf_float+0x44a>
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	07d0      	lsls	r0, r2, #31
 8003868:	d501      	bpl.n	800386e <_printf_float+0x44e>
 800386a:	3302      	adds	r3, #2
 800386c:	e013      	b.n	8003896 <_printf_float+0x476>
 800386e:	2301      	movs	r3, #1
 8003870:	e011      	b.n	8003896 <_printf_float+0x476>
 8003872:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800387a:	4293      	cmp	r3, r2
 800387c:	db05      	blt.n	800388a <_printf_float+0x46a>
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	6123      	str	r3, [r4, #16]
 8003882:	07d1      	lsls	r1, r2, #31
 8003884:	d508      	bpl.n	8003898 <_printf_float+0x478>
 8003886:	3301      	adds	r3, #1
 8003888:	e005      	b.n	8003896 <_printf_float+0x476>
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfd4      	ite	le
 800388e:	f1c3 0302 	rsble	r3, r3, #2
 8003892:	2301      	movgt	r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	6123      	str	r3, [r4, #16]
 8003898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800389a:	f04f 0a00 	mov.w	sl, #0
 800389e:	65a3      	str	r3, [r4, #88]	; 0x58
 80038a0:	e656      	b.n	8003550 <_printf_float+0x130>
 80038a2:	b011      	add	sp, #68	; 0x44
 80038a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038a8 <_printf_common>:
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	4691      	mov	r9, r2
 80038ae:	461f      	mov	r7, r3
 80038b0:	690a      	ldr	r2, [r1, #16]
 80038b2:	688b      	ldr	r3, [r1, #8]
 80038b4:	4606      	mov	r6, r0
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bfb8      	it	lt
 80038ba:	4613      	movlt	r3, r2
 80038bc:	f8c9 3000 	str.w	r3, [r9]
 80038c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038c4:	460c      	mov	r4, r1
 80038c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ca:	b112      	cbz	r2, 80038d2 <_printf_common+0x2a>
 80038cc:	3301      	adds	r3, #1
 80038ce:	f8c9 3000 	str.w	r3, [r9]
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	0699      	lsls	r1, r3, #26
 80038d6:	bf42      	ittt	mi
 80038d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038dc:	3302      	addmi	r3, #2
 80038de:	f8c9 3000 	strmi.w	r3, [r9]
 80038e2:	6825      	ldr	r5, [r4, #0]
 80038e4:	f015 0506 	ands.w	r5, r5, #6
 80038e8:	d110      	bne.n	800390c <_printf_common+0x64>
 80038ea:	f104 0a19 	add.w	sl, r4, #25
 80038ee:	e007      	b.n	8003900 <_printf_common+0x58>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4652      	mov	r2, sl
 80038f4:	4639      	mov	r1, r7
 80038f6:	4630      	mov	r0, r6
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d01a      	beq.n	8003934 <_printf_common+0x8c>
 80038fe:	3501      	adds	r5, #1
 8003900:	68e3      	ldr	r3, [r4, #12]
 8003902:	f8d9 2000 	ldr.w	r2, [r9]
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	429d      	cmp	r5, r3
 800390a:	dbf1      	blt.n	80038f0 <_printf_common+0x48>
 800390c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	3300      	adds	r3, #0
 8003914:	bf18      	it	ne
 8003916:	2301      	movne	r3, #1
 8003918:	0692      	lsls	r2, r2, #26
 800391a:	d50f      	bpl.n	800393c <_printf_common+0x94>
 800391c:	18e1      	adds	r1, r4, r3
 800391e:	2030      	movs	r0, #48	; 0x30
 8003920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800392a:	4422      	add	r2, r4
 800392c:	3302      	adds	r3, #2
 800392e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003932:	e003      	b.n	800393c <_printf_common+0x94>
 8003934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003940:	4639      	mov	r1, r7
 8003942:	4630      	mov	r0, r6
 8003944:	47c0      	blx	r8
 8003946:	3001      	adds	r0, #1
 8003948:	d0f4      	beq.n	8003934 <_printf_common+0x8c>
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	f8d9 5000 	ldr.w	r5, [r9]
 8003950:	68e3      	ldr	r3, [r4, #12]
 8003952:	f002 0206 	and.w	r2, r2, #6
 8003956:	2a04      	cmp	r2, #4
 8003958:	bf08      	it	eq
 800395a:	1b5d      	subeq	r5, r3, r5
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	bf0c      	ite	eq
 8003962:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003966:	2500      	movne	r5, #0
 8003968:	4293      	cmp	r3, r2
 800396a:	bfc4      	itt	gt
 800396c:	1a9b      	subgt	r3, r3, r2
 800396e:	18ed      	addgt	r5, r5, r3
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	341a      	adds	r4, #26
 8003976:	454d      	cmp	r5, r9
 8003978:	d009      	beq.n	800398e <_printf_common+0xe6>
 800397a:	2301      	movs	r3, #1
 800397c:	4622      	mov	r2, r4
 800397e:	4639      	mov	r1, r7
 8003980:	4630      	mov	r0, r6
 8003982:	47c0      	blx	r8
 8003984:	3001      	adds	r0, #1
 8003986:	d0d5      	beq.n	8003934 <_printf_common+0x8c>
 8003988:	f109 0901 	add.w	r9, r9, #1
 800398c:	e7f3      	b.n	8003976 <_printf_common+0xce>
 800398e:	2000      	movs	r0, #0
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003994 <_printf_i>:
 8003994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003998:	4617      	mov	r7, r2
 800399a:	7e0a      	ldrb	r2, [r1, #24]
 800399c:	b085      	sub	sp, #20
 800399e:	2a6e      	cmp	r2, #110	; 0x6e
 80039a0:	4698      	mov	r8, r3
 80039a2:	4606      	mov	r6, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80039ac:	f000 80ae 	beq.w	8003b0c <_printf_i+0x178>
 80039b0:	d811      	bhi.n	80039d6 <_printf_i+0x42>
 80039b2:	2a63      	cmp	r2, #99	; 0x63
 80039b4:	d022      	beq.n	80039fc <_printf_i+0x68>
 80039b6:	d809      	bhi.n	80039cc <_printf_i+0x38>
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	f000 80bb 	beq.w	8003b34 <_printf_i+0x1a0>
 80039be:	2a58      	cmp	r2, #88	; 0x58
 80039c0:	f040 80ca 	bne.w	8003b58 <_printf_i+0x1c4>
 80039c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039c8:	4983      	ldr	r1, [pc, #524]	; (8003bd8 <_printf_i+0x244>)
 80039ca:	e055      	b.n	8003a78 <_printf_i+0xe4>
 80039cc:	2a64      	cmp	r2, #100	; 0x64
 80039ce:	d01e      	beq.n	8003a0e <_printf_i+0x7a>
 80039d0:	2a69      	cmp	r2, #105	; 0x69
 80039d2:	d01c      	beq.n	8003a0e <_printf_i+0x7a>
 80039d4:	e0c0      	b.n	8003b58 <_printf_i+0x1c4>
 80039d6:	2a73      	cmp	r2, #115	; 0x73
 80039d8:	f000 80b0 	beq.w	8003b3c <_printf_i+0x1a8>
 80039dc:	d809      	bhi.n	80039f2 <_printf_i+0x5e>
 80039de:	2a6f      	cmp	r2, #111	; 0x6f
 80039e0:	d02e      	beq.n	8003a40 <_printf_i+0xac>
 80039e2:	2a70      	cmp	r2, #112	; 0x70
 80039e4:	f040 80b8 	bne.w	8003b58 <_printf_i+0x1c4>
 80039e8:	680a      	ldr	r2, [r1, #0]
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	600a      	str	r2, [r1, #0]
 80039f0:	e03e      	b.n	8003a70 <_printf_i+0xdc>
 80039f2:	2a75      	cmp	r2, #117	; 0x75
 80039f4:	d024      	beq.n	8003a40 <_printf_i+0xac>
 80039f6:	2a78      	cmp	r2, #120	; 0x78
 80039f8:	d03a      	beq.n	8003a70 <_printf_i+0xdc>
 80039fa:	e0ad      	b.n	8003b58 <_printf_i+0x1c4>
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a02:	1d11      	adds	r1, r2, #4
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0c:	e0a8      	b.n	8003b60 <_printf_i+0x1cc>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a16:	d002      	beq.n	8003a1e <_printf_i+0x8a>
 8003a18:	1d11      	adds	r1, r2, #4
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	e008      	b.n	8003a30 <_printf_i+0x9c>
 8003a1e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003a22:	f102 0104 	add.w	r1, r2, #4
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	d002      	beq.n	8003a30 <_printf_i+0x9c>
 8003a2a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003a2e:	e000      	b.n	8003a32 <_printf_i+0x9e>
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da3c      	bge.n	8003ab0 <_printf_i+0x11c>
 8003a36:	222d      	movs	r2, #45	; 0x2d
 8003a38:	425b      	negs	r3, r3
 8003a3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a3e:	e037      	b.n	8003ab0 <_printf_i+0x11c>
 8003a40:	6821      	ldr	r1, [r4, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a48:	d002      	beq.n	8003a50 <_printf_i+0xbc>
 8003a4a:	1d11      	adds	r1, r2, #4
 8003a4c:	6019      	str	r1, [r3, #0]
 8003a4e:	e007      	b.n	8003a60 <_printf_i+0xcc>
 8003a50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003a54:	f102 0104 	add.w	r1, r2, #4
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	d001      	beq.n	8003a60 <_printf_i+0xcc>
 8003a5c:	8813      	ldrh	r3, [r2, #0]
 8003a5e:	e000      	b.n	8003a62 <_printf_i+0xce>
 8003a60:	6813      	ldr	r3, [r2, #0]
 8003a62:	7e22      	ldrb	r2, [r4, #24]
 8003a64:	495c      	ldr	r1, [pc, #368]	; (8003bd8 <_printf_i+0x244>)
 8003a66:	2a6f      	cmp	r2, #111	; 0x6f
 8003a68:	bf14      	ite	ne
 8003a6a:	220a      	movne	r2, #10
 8003a6c:	2208      	moveq	r2, #8
 8003a6e:	e01b      	b.n	8003aa8 <_printf_i+0x114>
 8003a70:	2278      	movs	r2, #120	; 0x78
 8003a72:	495a      	ldr	r1, [pc, #360]	; (8003bdc <_printf_i+0x248>)
 8003a74:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a80:	f100 0504 	add.w	r5, r0, #4
 8003a84:	601d      	str	r5, [r3, #0]
 8003a86:	d103      	bne.n	8003a90 <_printf_i+0xfc>
 8003a88:	0655      	lsls	r5, r2, #25
 8003a8a:	d501      	bpl.n	8003a90 <_printf_i+0xfc>
 8003a8c:	8803      	ldrh	r3, [r0, #0]
 8003a8e:	e000      	b.n	8003a92 <_printf_i+0xfe>
 8003a90:	6803      	ldr	r3, [r0, #0]
 8003a92:	07d0      	lsls	r0, r2, #31
 8003a94:	bf44      	itt	mi
 8003a96:	f042 0220 	orrmi.w	r2, r2, #32
 8003a9a:	6022      	strmi	r2, [r4, #0]
 8003a9c:	b91b      	cbnz	r3, 8003aa6 <_printf_i+0x112>
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	f022 0220 	bic.w	r2, r2, #32
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003aae:	e001      	b.n	8003ab4 <_printf_i+0x120>
 8003ab0:	4949      	ldr	r1, [pc, #292]	; (8003bd8 <_printf_i+0x244>)
 8003ab2:	220a      	movs	r2, #10
 8003ab4:	6865      	ldr	r5, [r4, #4]
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	60a5      	str	r5, [r4, #8]
 8003aba:	db08      	blt.n	8003ace <_printf_i+0x13a>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	f020 0004 	bic.w	r0, r0, #4
 8003ac2:	6020      	str	r0, [r4, #0]
 8003ac4:	b92b      	cbnz	r3, 8003ad2 <_printf_i+0x13e>
 8003ac6:	2d00      	cmp	r5, #0
 8003ac8:	d17d      	bne.n	8003bc6 <_printf_i+0x232>
 8003aca:	4675      	mov	r5, lr
 8003acc:	e00c      	b.n	8003ae8 <_printf_i+0x154>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d079      	beq.n	8003bc6 <_printf_i+0x232>
 8003ad2:	4675      	mov	r5, lr
 8003ad4:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ad8:	fb02 3310 	mls	r3, r2, r0, r3
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1f5      	bne.n	8003ad4 <_printf_i+0x140>
 8003ae8:	2a08      	cmp	r2, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x170>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07da      	lsls	r2, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x170>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6862      	ldr	r2, [r4, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b04:	ebc5 030e 	rsb	r3, r5, lr
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	e02e      	b.n	8003b6a <_printf_i+0x1d6>
 8003b0c:	6808      	ldr	r0, [r1, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b14:	6949      	ldr	r1, [r1, #20]
 8003b16:	d003      	beq.n	8003b20 <_printf_i+0x18c>
 8003b18:	1d10      	adds	r0, r2, #4
 8003b1a:	6018      	str	r0, [r3, #0]
 8003b1c:	6813      	ldr	r3, [r2, #0]
 8003b1e:	e008      	b.n	8003b32 <_printf_i+0x19e>
 8003b20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b24:	f102 0004 	add.w	r0, r2, #4
 8003b28:	6018      	str	r0, [r3, #0]
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	d001      	beq.n	8003b32 <_printf_i+0x19e>
 8003b2e:	8019      	strh	r1, [r3, #0]
 8003b30:	e000      	b.n	8003b34 <_printf_i+0x1a0>
 8003b32:	6019      	str	r1, [r3, #0]
 8003b34:	2300      	movs	r3, #0
 8003b36:	6123      	str	r3, [r4, #16]
 8003b38:	4675      	mov	r5, lr
 8003b3a:	e016      	b.n	8003b6a <_printf_i+0x1d6>
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	1d11      	adds	r1, r2, #4
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	6815      	ldr	r5, [r2, #0]
 8003b44:	2100      	movs	r1, #0
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f002 fd97 	bl	800667c <memchr>
 8003b4e:	b108      	cbz	r0, 8003b54 <_printf_i+0x1c0>
 8003b50:	1b40      	subs	r0, r0, r5
 8003b52:	6060      	str	r0, [r4, #4]
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	e004      	b.n	8003b62 <_printf_i+0x1ce>
 8003b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b5c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b60:	2301      	movs	r3, #1
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b6a:	f8cd 8000 	str.w	r8, [sp]
 8003b6e:	463b      	mov	r3, r7
 8003b70:	aa03      	add	r2, sp, #12
 8003b72:	4621      	mov	r1, r4
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7ff fe97 	bl	80038a8 <_printf_common>
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d102      	bne.n	8003b84 <_printf_i+0x1f0>
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b82:	e026      	b.n	8003bd2 <_printf_i+0x23e>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	462a      	mov	r2, r5
 8003b88:	4639      	mov	r1, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0f5      	beq.n	8003b7e <_printf_i+0x1ea>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	079b      	lsls	r3, r3, #30
 8003b96:	d510      	bpl.n	8003bba <_printf_i+0x226>
 8003b98:	2500      	movs	r5, #0
 8003b9a:	f104 0919 	add.w	r9, r4, #25
 8003b9e:	e007      	b.n	8003bb0 <_printf_i+0x21c>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	464a      	mov	r2, r9
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	47c0      	blx	r8
 8003baa:	3001      	adds	r0, #1
 8003bac:	d0e7      	beq.n	8003b7e <_printf_i+0x1ea>
 8003bae:	3501      	adds	r5, #1
 8003bb0:	68e3      	ldr	r3, [r4, #12]
 8003bb2:	9a03      	ldr	r2, [sp, #12]
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	429d      	cmp	r5, r3
 8003bb8:	dbf2      	blt.n	8003ba0 <_printf_i+0x20c>
 8003bba:	68e0      	ldr	r0, [r4, #12]
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	4298      	cmp	r0, r3
 8003bc0:	bfb8      	it	lt
 8003bc2:	4618      	movlt	r0, r3
 8003bc4:	e005      	b.n	8003bd2 <_printf_i+0x23e>
 8003bc6:	780b      	ldrb	r3, [r1, #0]
 8003bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd0:	e78a      	b.n	8003ae8 <_printf_i+0x154>
 8003bd2:	b005      	add	sp, #20
 8003bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bd8:	08007b8e 	.word	0x08007b8e
 8003bdc:	08007b9f 	.word	0x08007b9f

08003be0 <_scanf_float>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	469a      	mov	sl, r3
 8003be6:	688b      	ldr	r3, [r1, #8]
 8003be8:	4616      	mov	r6, r2
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003bf0:	bf88      	it	hi
 8003bf2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	bf82      	ittt	hi
 8003bfa:	189b      	addhi	r3, r3, r2
 8003bfc:	9301      	strhi	r3, [sp, #4]
 8003bfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003c02:	4688      	mov	r8, r1
 8003c04:	bf96      	itet	ls
 8003c06:	2300      	movls	r3, #0
 8003c08:	608b      	strhi	r3, [r1, #8]
 8003c0a:	9301      	strls	r3, [sp, #4]
 8003c0c:	680b      	ldr	r3, [r1, #0]
 8003c0e:	f04f 0b00 	mov.w	fp, #0
 8003c12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003c16:	f848 3b1c 	str.w	r3, [r8], #28
 8003c1a:	4607      	mov	r7, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	4645      	mov	r5, r8
 8003c20:	465a      	mov	r2, fp
 8003c22:	46d9      	mov	r9, fp
 8003c24:	f8cd b010 	str.w	fp, [sp, #16]
 8003c28:	f8cd b00c 	str.w	fp, [sp, #12]
 8003c2c:	f8cd b008 	str.w	fp, [sp, #8]
 8003c30:	68a1      	ldr	r1, [r4, #8]
 8003c32:	2900      	cmp	r1, #0
 8003c34:	f000 80e5 	beq.w	8003e02 <_scanf_float+0x222>
 8003c38:	6833      	ldr	r3, [r6, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b49      	cmp	r3, #73	; 0x49
 8003c3e:	d070      	beq.n	8003d22 <_scanf_float+0x142>
 8003c40:	d816      	bhi.n	8003c70 <_scanf_float+0x90>
 8003c42:	2b39      	cmp	r3, #57	; 0x39
 8003c44:	d80d      	bhi.n	8003c62 <_scanf_float+0x82>
 8003c46:	2b31      	cmp	r3, #49	; 0x31
 8003c48:	d240      	bcs.n	8003ccc <_scanf_float+0xec>
 8003c4a:	2b2d      	cmp	r3, #45	; 0x2d
 8003c4c:	d046      	beq.n	8003cdc <_scanf_float+0xfc>
 8003c4e:	d802      	bhi.n	8003c56 <_scanf_float+0x76>
 8003c50:	2b2b      	cmp	r3, #43	; 0x2b
 8003c52:	d043      	beq.n	8003cdc <_scanf_float+0xfc>
 8003c54:	e0d5      	b.n	8003e02 <_scanf_float+0x222>
 8003c56:	2b2e      	cmp	r3, #46	; 0x2e
 8003c58:	f000 8092 	beq.w	8003d80 <_scanf_float+0x1a0>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d023      	beq.n	8003ca8 <_scanf_float+0xc8>
 8003c60:	e0cf      	b.n	8003e02 <_scanf_float+0x222>
 8003c62:	2b45      	cmp	r3, #69	; 0x45
 8003c64:	f000 8095 	beq.w	8003d92 <_scanf_float+0x1b2>
 8003c68:	2b46      	cmp	r3, #70	; 0x46
 8003c6a:	d077      	beq.n	8003d5c <_scanf_float+0x17c>
 8003c6c:	2b41      	cmp	r3, #65	; 0x41
 8003c6e:	e00c      	b.n	8003c8a <_scanf_float+0xaa>
 8003c70:	2b65      	cmp	r3, #101	; 0x65
 8003c72:	f000 808e 	beq.w	8003d92 <_scanf_float+0x1b2>
 8003c76:	d80a      	bhi.n	8003c8e <_scanf_float+0xae>
 8003c78:	2b54      	cmp	r3, #84	; 0x54
 8003c7a:	d075      	beq.n	8003d68 <_scanf_float+0x188>
 8003c7c:	d802      	bhi.n	8003c84 <_scanf_float+0xa4>
 8003c7e:	2b4e      	cmp	r3, #78	; 0x4e
 8003c80:	d034      	beq.n	8003cec <_scanf_float+0x10c>
 8003c82:	e0be      	b.n	8003e02 <_scanf_float+0x222>
 8003c84:	2b59      	cmp	r3, #89	; 0x59
 8003c86:	d075      	beq.n	8003d74 <_scanf_float+0x194>
 8003c88:	2b61      	cmp	r3, #97	; 0x61
 8003c8a:	d046      	beq.n	8003d1a <_scanf_float+0x13a>
 8003c8c:	e0b9      	b.n	8003e02 <_scanf_float+0x222>
 8003c8e:	2b6e      	cmp	r3, #110	; 0x6e
 8003c90:	d02c      	beq.n	8003cec <_scanf_float+0x10c>
 8003c92:	d804      	bhi.n	8003c9e <_scanf_float+0xbe>
 8003c94:	2b66      	cmp	r3, #102	; 0x66
 8003c96:	d061      	beq.n	8003d5c <_scanf_float+0x17c>
 8003c98:	2b69      	cmp	r3, #105	; 0x69
 8003c9a:	d042      	beq.n	8003d22 <_scanf_float+0x142>
 8003c9c:	e0b1      	b.n	8003e02 <_scanf_float+0x222>
 8003c9e:	2b74      	cmp	r3, #116	; 0x74
 8003ca0:	d062      	beq.n	8003d68 <_scanf_float+0x188>
 8003ca2:	2b79      	cmp	r3, #121	; 0x79
 8003ca4:	d066      	beq.n	8003d74 <_scanf_float+0x194>
 8003ca6:	e0ac      	b.n	8003e02 <_scanf_float+0x222>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003cae:	d00d      	beq.n	8003ccc <_scanf_float+0xec>
 8003cb0:	9b01      	ldr	r3, [sp, #4]
 8003cb2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003cb6:	6020      	str	r0, [r4, #0]
 8003cb8:	f109 0901 	add.w	r9, r9, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8087 	beq.w	8003dd0 <_scanf_float+0x1f0>
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	3101      	adds	r1, #1
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	60a1      	str	r1, [r4, #8]
 8003cca:	e081      	b.n	8003dd0 <_scanf_float+0x1f0>
 8003ccc:	eb12 0f0b 	cmn.w	r2, fp
 8003cd0:	f040 8097 	bne.w	8003e02 <_scanf_float+0x222>
 8003cd4:	6821      	ldr	r1, [r4, #0]
 8003cd6:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003cda:	e005      	b.n	8003ce8 <_scanf_float+0x108>
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	0608      	lsls	r0, r1, #24
 8003ce0:	f140 808f 	bpl.w	8003e02 <_scanf_float+0x222>
 8003ce4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ce8:	6021      	str	r1, [r4, #0]
 8003cea:	e06f      	b.n	8003dcc <_scanf_float+0x1ec>
 8003cec:	b96a      	cbnz	r2, 8003d0a <_scanf_float+0x12a>
 8003cee:	f1b9 0f00 	cmp.w	r9, #0
 8003cf2:	d10c      	bne.n	8003d0e <_scanf_float+0x12e>
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003cfa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003cfe:	d106      	bne.n	8003d0e <_scanf_float+0x12e>
 8003d00:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003d04:	6021      	str	r1, [r4, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	e060      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d0a:	2a02      	cmp	r2, #2
 8003d0c:	d05d      	beq.n	8003dca <_scanf_float+0x1ea>
 8003d0e:	f1bb 0f01 	cmp.w	fp, #1
 8003d12:	d01e      	beq.n	8003d52 <_scanf_float+0x172>
 8003d14:	f1bb 0f04 	cmp.w	fp, #4
 8003d18:	e01a      	b.n	8003d50 <_scanf_float+0x170>
 8003d1a:	2a01      	cmp	r2, #1
 8003d1c:	d171      	bne.n	8003e02 <_scanf_float+0x222>
 8003d1e:	2202      	movs	r2, #2
 8003d20:	e054      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d22:	f1bb 0f00 	cmp.w	fp, #0
 8003d26:	d10e      	bne.n	8003d46 <_scanf_float+0x166>
 8003d28:	f1b9 0f00 	cmp.w	r9, #0
 8003d2c:	d16c      	bne.n	8003e08 <_scanf_float+0x228>
 8003d2e:	6821      	ldr	r1, [r4, #0]
 8003d30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003d34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003d38:	d16a      	bne.n	8003e10 <_scanf_float+0x230>
 8003d3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003d3e:	6021      	str	r1, [r4, #0]
 8003d40:	f04f 0b01 	mov.w	fp, #1
 8003d44:	e042      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d46:	f1bb 0f03 	cmp.w	fp, #3
 8003d4a:	d002      	beq.n	8003d52 <_scanf_float+0x172>
 8003d4c:	f1bb 0f05 	cmp.w	fp, #5
 8003d50:	d157      	bne.n	8003e02 <_scanf_float+0x222>
 8003d52:	f10b 0b01 	add.w	fp, fp, #1
 8003d56:	fa5f fb8b 	uxtb.w	fp, fp
 8003d5a:	e037      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d5c:	f1bb 0f02 	cmp.w	fp, #2
 8003d60:	d14f      	bne.n	8003e02 <_scanf_float+0x222>
 8003d62:	f04f 0b03 	mov.w	fp, #3
 8003d66:	e031      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d68:	f1bb 0f06 	cmp.w	fp, #6
 8003d6c:	d149      	bne.n	8003e02 <_scanf_float+0x222>
 8003d6e:	f04f 0b07 	mov.w	fp, #7
 8003d72:	e02b      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d74:	f1bb 0f07 	cmp.w	fp, #7
 8003d78:	d143      	bne.n	8003e02 <_scanf_float+0x222>
 8003d7a:	f04f 0b08 	mov.w	fp, #8
 8003d7e:	e025      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d80:	6821      	ldr	r1, [r4, #0]
 8003d82:	0588      	lsls	r0, r1, #22
 8003d84:	d53d      	bpl.n	8003e02 <_scanf_float+0x222>
 8003d86:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003d8a:	6021      	str	r1, [r4, #0]
 8003d8c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d90:	e01c      	b.n	8003dcc <_scanf_float+0x1ec>
 8003d92:	6821      	ldr	r1, [r4, #0]
 8003d94:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003d98:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003d9c:	d004      	beq.n	8003da8 <_scanf_float+0x1c8>
 8003d9e:	0548      	lsls	r0, r1, #21
 8003da0:	d52f      	bpl.n	8003e02 <_scanf_float+0x222>
 8003da2:	f1b9 0f00 	cmp.w	r9, #0
 8003da6:	d033      	beq.n	8003e10 <_scanf_float+0x230>
 8003da8:	0588      	lsls	r0, r1, #22
 8003daa:	bf58      	it	pl
 8003dac:	9802      	ldrpl	r0, [sp, #8]
 8003dae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003db2:	bf58      	it	pl
 8003db4:	ebc0 0009 	rsbpl	r0, r0, r9
 8003db8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003dbc:	bf5c      	itt	pl
 8003dbe:	9003      	strpl	r0, [sp, #12]
 8003dc0:	9504      	strpl	r5, [sp, #16]
 8003dc2:	6021      	str	r1, [r4, #0]
 8003dc4:	f04f 0900 	mov.w	r9, #0
 8003dc8:	e000      	b.n	8003dcc <_scanf_float+0x1ec>
 8003dca:	2203      	movs	r2, #3
 8003dcc:	702b      	strb	r3, [r5, #0]
 8003dce:	3501      	adds	r5, #1
 8003dd0:	68a3      	ldr	r3, [r4, #8]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60a3      	str	r3, [r4, #8]
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	6873      	ldr	r3, [r6, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	6073      	str	r3, [r6, #4]
 8003de4:	dd03      	ble.n	8003dee <_scanf_float+0x20e>
 8003de6:	6833      	ldr	r3, [r6, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	6033      	str	r3, [r6, #0]
 8003dec:	e720      	b.n	8003c30 <_scanf_float+0x50>
 8003dee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003df2:	4631      	mov	r1, r6
 8003df4:	4638      	mov	r0, r7
 8003df6:	9205      	str	r2, [sp, #20]
 8003df8:	4798      	blx	r3
 8003dfa:	9a05      	ldr	r2, [sp, #20]
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	f43f af17 	beq.w	8003c30 <_scanf_float+0x50>
 8003e02:	f1b9 0f00 	cmp.w	r9, #0
 8003e06:	d003      	beq.n	8003e10 <_scanf_float+0x230>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	3a01      	subs	r2, #1
 8003e12:	2a01      	cmp	r2, #1
 8003e14:	d80e      	bhi.n	8003e34 <_scanf_float+0x254>
 8003e16:	4545      	cmp	r5, r8
 8003e18:	d90a      	bls.n	8003e30 <_scanf_float+0x250>
 8003e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e1e:	4632      	mov	r2, r6
 8003e20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e24:	4638      	mov	r0, r7
 8003e26:	4798      	blx	r3
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	e7f2      	b.n	8003e16 <_scanf_float+0x236>
 8003e30:	2601      	movs	r6, #1
 8003e32:	e0ad      	b.n	8003f90 <_scanf_float+0x3b0>
 8003e34:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d822      	bhi.n	8003e82 <_scanf_float+0x2a2>
 8003e3c:	f1bb 0f02 	cmp.w	fp, #2
 8003e40:	d912      	bls.n	8003e68 <_scanf_float+0x288>
 8003e42:	f1ab 0b03 	sub.w	fp, fp, #3
 8003e46:	fa5f fb8b 	uxtb.w	fp, fp
 8003e4a:	ebcb 0b05 	rsb	fp, fp, r5
 8003e4e:	455d      	cmp	r5, fp
 8003e50:	d017      	beq.n	8003e82 <_scanf_float+0x2a2>
 8003e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e56:	4632      	mov	r2, r6
 8003e58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	4798      	blx	r3
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	e7f2      	b.n	8003e4e <_scanf_float+0x26e>
 8003e68:	4545      	cmp	r5, r8
 8003e6a:	d9e1      	bls.n	8003e30 <_scanf_float+0x250>
 8003e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e70:	4632      	mov	r2, r6
 8003e72:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e76:	4638      	mov	r0, r7
 8003e78:	4798      	blx	r3
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	e7f2      	b.n	8003e68 <_scanf_float+0x288>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	05da      	lsls	r2, r3, #23
 8003e86:	d52c      	bpl.n	8003ee2 <_scanf_float+0x302>
 8003e88:	055b      	lsls	r3, r3, #21
 8003e8a:	d50c      	bpl.n	8003ea6 <_scanf_float+0x2c6>
 8003e8c:	4545      	cmp	r5, r8
 8003e8e:	d9cf      	bls.n	8003e30 <_scanf_float+0x250>
 8003e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e94:	4632      	mov	r2, r6
 8003e96:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	4798      	blx	r3
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	e7f2      	b.n	8003e8c <_scanf_float+0x2ac>
 8003ea6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	2965      	cmp	r1, #101	; 0x65
 8003eae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003eb2:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	d00d      	beq.n	8003ed6 <_scanf_float+0x2f6>
 8003eba:	2945      	cmp	r1, #69	; 0x45
 8003ebc:	d00b      	beq.n	8003ed6 <_scanf_float+0x2f6>
 8003ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	4798      	blx	r3
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1a5 0b02 	sub.w	fp, r5, #2
 8003ed4:	6123      	str	r3, [r4, #16]
 8003ed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003eda:	4632      	mov	r2, r6
 8003edc:	4638      	mov	r0, r7
 8003ede:	4798      	blx	r3
 8003ee0:	465d      	mov	r5, fp
 8003ee2:	6826      	ldr	r6, [r4, #0]
 8003ee4:	f016 0610 	ands.w	r6, r6, #16
 8003ee8:	d151      	bne.n	8003f8e <_scanf_float+0x3ae>
 8003eea:	702e      	strb	r6, [r5, #0]
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d105      	bne.n	8003f04 <_scanf_float+0x324>
 8003ef8:	9b02      	ldr	r3, [sp, #8]
 8003efa:	ebc3 0309 	rsb	r3, r3, r9
 8003efe:	425a      	negs	r2, r3
 8003f00:	b963      	cbnz	r3, 8003f1c <_scanf_float+0x33c>
 8003f02:	e015      	b.n	8003f30 <_scanf_float+0x350>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	b19b      	cbz	r3, 8003f30 <_scanf_float+0x350>
 8003f08:	9904      	ldr	r1, [sp, #16]
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	3101      	adds	r1, #1
 8003f10:	4638      	mov	r0, r7
 8003f12:	f000 ff95 	bl	8004e40 <_strtol_r>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	9d04      	ldr	r5, [sp, #16]
 8003f1a:	1ac2      	subs	r2, r0, r3
 8003f1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003f20:	429d      	cmp	r5, r3
 8003f22:	bf28      	it	cs
 8003f24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003f28:	491b      	ldr	r1, [pc, #108]	; (8003f98 <_scanf_float+0x3b8>)
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f8b4 	bl	8004098 <siprintf>
 8003f30:	2200      	movs	r2, #0
 8003f32:	4641      	mov	r1, r8
 8003f34:	4638      	mov	r0, r7
 8003f36:	f000 feeb 	bl	8004d10 <_strtod_r>
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	f012 0f02 	tst.w	r2, #2
 8003f42:	4689      	mov	r9, r1
 8003f44:	f8da 3000 	ldr.w	r3, [sl]
 8003f48:	d003      	beq.n	8003f52 <_scanf_float+0x372>
 8003f4a:	1d1a      	adds	r2, r3, #4
 8003f4c:	f8ca 2000 	str.w	r2, [sl]
 8003f50:	e006      	b.n	8003f60 <_scanf_float+0x380>
 8003f52:	f012 0504 	ands.w	r5, r2, #4
 8003f56:	f103 0204 	add.w	r2, r3, #4
 8003f5a:	f8ca 2000 	str.w	r2, [sl]
 8003f5e:	d003      	beq.n	8003f68 <_scanf_float+0x388>
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	e9c3 8900 	strd	r8, r9, [r3]
 8003f66:	e00e      	b.n	8003f86 <_scanf_float+0x3a6>
 8003f68:	681f      	ldr	r7, [r3, #0]
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	f7fc fd57 	bl	8000a20 <__aeabi_dcmpun>
 8003f72:	b118      	cbz	r0, 8003f7c <_scanf_float+0x39c>
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 f88b 	bl	8004090 <nanf>
 8003f7a:	e003      	b.n	8003f84 <_scanf_float+0x3a4>
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	4649      	mov	r1, r9
 8003f80:	f7fc fdac 	bl	8000adc <__aeabi_d2f>
 8003f84:	6038      	str	r0, [r7, #0]
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60e3      	str	r3, [r4, #12]
 8003f8c:	e000      	b.n	8003f90 <_scanf_float+0x3b0>
 8003f8e:	2600      	movs	r6, #0
 8003f90:	4630      	mov	r0, r6
 8003f92:	b007      	add	sp, #28
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	08007bb0 	.word	0x08007bb0

08003f9c <iprintf>:
 8003f9c:	b40f      	push	{r0, r1, r2, r3}
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <iprintf+0x2c>)
 8003fa0:	b513      	push	{r0, r1, r4, lr}
 8003fa2:	681c      	ldr	r4, [r3, #0]
 8003fa4:	b124      	cbz	r4, 8003fb0 <iprintf+0x14>
 8003fa6:	69a3      	ldr	r3, [r4, #24]
 8003fa8:	b913      	cbnz	r3, 8003fb0 <iprintf+0x14>
 8003faa:	4620      	mov	r0, r4
 8003fac:	f001 ff30 	bl	8005e10 <__sinit>
 8003fb0:	ab05      	add	r3, sp, #20
 8003fb2:	9a04      	ldr	r2, [sp, #16]
 8003fb4:	68a1      	ldr	r1, [r4, #8]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	f003 f98f 	bl	80072dc <_vfiprintf_r>
 8003fbe:	b002      	add	sp, #8
 8003fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc4:	b004      	add	sp, #16
 8003fc6:	4770      	bx	lr
 8003fc8:	20000140 	.word	0x20000140

08003fcc <_puts_r>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	460e      	mov	r6, r1
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	b118      	cbz	r0, 8003fdc <_puts_r+0x10>
 8003fd4:	6983      	ldr	r3, [r0, #24]
 8003fd6:	b90b      	cbnz	r3, 8003fdc <_puts_r+0x10>
 8003fd8:	f001 ff1a 	bl	8005e10 <__sinit>
 8003fdc:	69ab      	ldr	r3, [r5, #24]
 8003fde:	68ac      	ldr	r4, [r5, #8]
 8003fe0:	b913      	cbnz	r3, 8003fe8 <_puts_r+0x1c>
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f001 ff14 	bl	8005e10 <__sinit>
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <_puts_r+0xa8>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d101      	bne.n	8003ff2 <_puts_r+0x26>
 8003fee:	686c      	ldr	r4, [r5, #4]
 8003ff0:	e008      	b.n	8004004 <_puts_r+0x38>
 8003ff2:	4b21      	ldr	r3, [pc, #132]	; (8004078 <_puts_r+0xac>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d101      	bne.n	8003ffc <_puts_r+0x30>
 8003ff8:	68ac      	ldr	r4, [r5, #8]
 8003ffa:	e003      	b.n	8004004 <_puts_r+0x38>
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <_puts_r+0xb0>)
 8003ffe:	429c      	cmp	r4, r3
 8004000:	bf08      	it	eq
 8004002:	68ec      	ldreq	r4, [r5, #12]
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	071b      	lsls	r3, r3, #28
 8004008:	d501      	bpl.n	800400e <_puts_r+0x42>
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	b93b      	cbnz	r3, 800401e <_puts_r+0x52>
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 ff7b 	bl	8004f0c <__swsetup_r>
 8004016:	b110      	cbz	r0, 800401e <_puts_r+0x52>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800401c:	bd70      	pop	{r4, r5, r6, pc}
 800401e:	3e01      	subs	r6, #1
 8004020:	68a3      	ldr	r3, [r4, #8]
 8004022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004026:	3b01      	subs	r3, #1
 8004028:	60a3      	str	r3, [r4, #8]
 800402a:	b191      	cbz	r1, 8004052 <_puts_r+0x86>
 800402c:	2b00      	cmp	r3, #0
 800402e:	da04      	bge.n	800403a <_puts_r+0x6e>
 8004030:	69a2      	ldr	r2, [r4, #24]
 8004032:	4293      	cmp	r3, r2
 8004034:	db06      	blt.n	8004044 <_puts_r+0x78>
 8004036:	290a      	cmp	r1, #10
 8004038:	d004      	beq.n	8004044 <_puts_r+0x78>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	7019      	strb	r1, [r3, #0]
 8004042:	e7ed      	b.n	8004020 <_puts_r+0x54>
 8004044:	4622      	mov	r2, r4
 8004046:	4628      	mov	r0, r5
 8004048:	f000 ff0c 	bl	8004e64 <__swbuf_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1e7      	bne.n	8004020 <_puts_r+0x54>
 8004050:	e7e2      	b.n	8004018 <_puts_r+0x4c>
 8004052:	2b00      	cmp	r3, #0
 8004054:	da08      	bge.n	8004068 <_puts_r+0x9c>
 8004056:	4622      	mov	r2, r4
 8004058:	210a      	movs	r1, #10
 800405a:	4628      	mov	r0, r5
 800405c:	f000 ff02 	bl	8004e64 <__swbuf_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d0d9      	beq.n	8004018 <_puts_r+0x4c>
 8004064:	200a      	movs	r0, #10
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	200a      	movs	r0, #10
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	6022      	str	r2, [r4, #0]
 8004070:	7018      	strb	r0, [r3, #0]
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	08007c18 	.word	0x08007c18
 8004078:	08007c38 	.word	0x08007c38
 800407c:	08007c58 	.word	0x08007c58

08004080 <puts>:
 8004080:	4b02      	ldr	r3, [pc, #8]	; (800408c <puts+0xc>)
 8004082:	4601      	mov	r1, r0
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	f7ff bfa1 	b.w	8003fcc <_puts_r>
 800408a:	bf00      	nop
 800408c:	20000140 	.word	0x20000140

08004090 <nanf>:
 8004090:	4800      	ldr	r0, [pc, #0]	; (8004094 <nanf+0x4>)
 8004092:	4770      	bx	lr
 8004094:	7fc00000 	.word	0x7fc00000

08004098 <siprintf>:
 8004098:	b40e      	push	{r1, r2, r3}
 800409a:	b500      	push	{lr}
 800409c:	f44f 7102 	mov.w	r1, #520	; 0x208
 80040a0:	b09c      	sub	sp, #112	; 0x70
 80040a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80040a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040aa:	9104      	str	r1, [sp, #16]
 80040ac:	9107      	str	r1, [sp, #28]
 80040ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040b2:	ab1d      	add	r3, sp, #116	; 0x74
 80040b4:	9002      	str	r0, [sp, #8]
 80040b6:	9006      	str	r0, [sp, #24]
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <siprintf+0x44>)
 80040ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80040be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	a902      	add	r1, sp, #8
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	f002 ffec 	bl	80070a4 <_svfiprintf_r>
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	b01c      	add	sp, #112	; 0x70
 80040d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d8:	b003      	add	sp, #12
 80040da:	4770      	bx	lr
 80040dc:	20000140 	.word	0x20000140

080040e0 <sulp>:
 80040e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e4:	460f      	mov	r7, r1
 80040e6:	4690      	mov	r8, r2
 80040e8:	f002 fda6 	bl	8006c38 <__ulp>
 80040ec:	4604      	mov	r4, r0
 80040ee:	460d      	mov	r5, r1
 80040f0:	f1b8 0f00 	cmp.w	r8, #0
 80040f4:	d011      	beq.n	800411a <sulp+0x3a>
 80040f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80040fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dd0b      	ble.n	800411a <sulp+0x3a>
 8004102:	051b      	lsls	r3, r3, #20
 8004104:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004108:	2400      	movs	r4, #0
 800410a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	f7fc f9eb 	bl	80004ec <__aeabi_dmul>
 8004116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004122:	0000      	movs	r0, r0
 8004124:	0000      	movs	r0, r0
	...

08004128 <_strtod_l>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	461f      	mov	r7, r3
 800412e:	b09f      	sub	sp, #124	; 0x7c
 8004130:	2300      	movs	r3, #0
 8004132:	4682      	mov	sl, r0
 8004134:	4638      	mov	r0, r7
 8004136:	931a      	str	r3, [sp, #104]	; 0x68
 8004138:	9106      	str	r1, [sp, #24]
 800413a:	9215      	str	r2, [sp, #84]	; 0x54
 800413c:	f002 fa13 	bl	8006566 <__localeconv_l>
 8004140:	4606      	mov	r6, r0
 8004142:	6800      	ldr	r0, [r0, #0]
 8004144:	f7fc f812 	bl	800016c <strlen>
 8004148:	4604      	mov	r4, r0
 800414a:	9b06      	ldr	r3, [sp, #24]
 800414c:	f04f 0800 	mov.w	r8, #0
 8004150:	f04f 0900 	mov.w	r9, #0
 8004154:	9319      	str	r3, [sp, #100]	; 0x64
 8004156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	2a0d      	cmp	r2, #13
 800415c:	d805      	bhi.n	800416a <_strtod_l+0x42>
 800415e:	2a09      	cmp	r2, #9
 8004160:	d213      	bcs.n	800418a <_strtod_l+0x62>
 8004162:	2a00      	cmp	r2, #0
 8004164:	f000 8196 	beq.w	8004494 <_strtod_l+0x36c>
 8004168:	e011      	b.n	800418e <_strtod_l+0x66>
 800416a:	2a2b      	cmp	r2, #43	; 0x2b
 800416c:	d004      	beq.n	8004178 <_strtod_l+0x50>
 800416e:	2a2d      	cmp	r2, #45	; 0x2d
 8004170:	d004      	beq.n	800417c <_strtod_l+0x54>
 8004172:	2a20      	cmp	r2, #32
 8004174:	d10b      	bne.n	800418e <_strtod_l+0x66>
 8004176:	e008      	b.n	800418a <_strtod_l+0x62>
 8004178:	2200      	movs	r2, #0
 800417a:	e000      	b.n	800417e <_strtod_l+0x56>
 800417c:	2201      	movs	r2, #1
 800417e:	920e      	str	r2, [sp, #56]	; 0x38
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	9219      	str	r2, [sp, #100]	; 0x64
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	b923      	cbnz	r3, 8004192 <_strtod_l+0x6a>
 8004188:	e184      	b.n	8004494 <_strtod_l+0x36c>
 800418a:	3301      	adds	r3, #1
 800418c:	e7e2      	b.n	8004154 <_strtod_l+0x2c>
 800418e:	2300      	movs	r3, #0
 8004190:	930e      	str	r3, [sp, #56]	; 0x38
 8004192:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004194:	782b      	ldrb	r3, [r5, #0]
 8004196:	2b30      	cmp	r3, #48	; 0x30
 8004198:	d15d      	bne.n	8004256 <_strtod_l+0x12e>
 800419a:	786b      	ldrb	r3, [r5, #1]
 800419c:	2b58      	cmp	r3, #88	; 0x58
 800419e:	d001      	beq.n	80041a4 <_strtod_l+0x7c>
 80041a0:	2b78      	cmp	r3, #120	; 0x78
 80041a2:	d14d      	bne.n	8004240 <_strtod_l+0x118>
 80041a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a6:	9702      	str	r7, [sp, #8]
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	ab1a      	add	r3, sp, #104	; 0x68
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4a9e      	ldr	r2, [pc, #632]	; (8004428 <_strtod_l+0x300>)
 80041b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80041b2:	a919      	add	r1, sp, #100	; 0x64
 80041b4:	4650      	mov	r0, sl
 80041b6:	f001 ff00 	bl	8005fba <__gethex>
 80041ba:	f010 0607 	ands.w	r6, r0, #7
 80041be:	4604      	mov	r4, r0
 80041c0:	f000 8571 	beq.w	8004ca6 <_strtod_l+0xb7e>
 80041c4:	2e06      	cmp	r6, #6
 80041c6:	d105      	bne.n	80041d4 <_strtod_l+0xac>
 80041c8:	3501      	adds	r5, #1
 80041ca:	2300      	movs	r3, #0
 80041cc:	9519      	str	r5, [sp, #100]	; 0x64
 80041ce:	930e      	str	r3, [sp, #56]	; 0x38
 80041d0:	f000 bd69 	b.w	8004ca6 <_strtod_l+0xb7e>
 80041d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80041d6:	b13a      	cbz	r2, 80041e8 <_strtod_l+0xc0>
 80041d8:	2135      	movs	r1, #53	; 0x35
 80041da:	a81c      	add	r0, sp, #112	; 0x70
 80041dc:	f002 fe13 	bl	8006e06 <__copybits>
 80041e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80041e2:	4650      	mov	r0, sl
 80041e4:	f002 fa98 	bl	8006718 <_Bfree>
 80041e8:	2e06      	cmp	r6, #6
 80041ea:	d822      	bhi.n	8004232 <_strtod_l+0x10a>
 80041ec:	e8df f006 	tbb	[pc, r6]
 80041f0:	18080d04 	.word	0x18080d04
 80041f4:	0d1d      	.short	0x0d1d
 80041f6:	04          	.byte	0x04
 80041f7:	00          	.byte	0x00
 80041f8:	f04f 0900 	mov.w	r9, #0
 80041fc:	46c8      	mov	r8, r9
 80041fe:	e018      	b.n	8004232 <_strtod_l+0x10a>
 8004200:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004204:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8004208:	e013      	b.n	8004232 <_strtod_l+0x10a>
 800420a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800420c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800420e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004212:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004216:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800421a:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800421e:	e008      	b.n	8004232 <_strtod_l+0x10a>
 8004220:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800442c <_strtod_l+0x304>
 8004224:	f04f 0800 	mov.w	r8, #0
 8004228:	e003      	b.n	8004232 <_strtod_l+0x10a>
 800422a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800422e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004232:	0721      	lsls	r1, r4, #28
 8004234:	f140 8537 	bpl.w	8004ca6 <_strtod_l+0xb7e>
 8004238:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800423c:	f000 bd33 	b.w	8004ca6 <_strtod_l+0xb7e>
 8004240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	9219      	str	r2, [sp, #100]	; 0x64
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d0f9      	beq.n	8004240 <_strtod_l+0x118>
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 852a 	beq.w	8004ca6 <_strtod_l+0xb7e>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <_strtod_l+0x130>
 8004256:	2300      	movs	r3, #0
 8004258:	9308      	str	r3, [sp, #32]
 800425a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800425c:	220a      	movs	r2, #10
 800425e:	9309      	str	r3, [sp, #36]	; 0x24
 8004260:	2300      	movs	r3, #0
 8004262:	469b      	mov	fp, r3
 8004264:	9305      	str	r3, [sp, #20]
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	9819      	ldr	r0, [sp, #100]	; 0x64
 800426a:	7805      	ldrb	r5, [r0, #0]
 800426c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	2909      	cmp	r1, #9
 8004274:	d80e      	bhi.n	8004294 <_strtod_l+0x16c>
 8004276:	9904      	ldr	r1, [sp, #16]
 8004278:	3001      	adds	r0, #1
 800427a:	2908      	cmp	r1, #8
 800427c:	bfc9      	itett	gt
 800427e:	9905      	ldrgt	r1, [sp, #20]
 8004280:	fb02 3b0b 	mlale	fp, r2, fp, r3
 8004284:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004288:	9305      	strgt	r3, [sp, #20]
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	9019      	str	r0, [sp, #100]	; 0x64
 800428e:	3301      	adds	r3, #1
 8004290:	9304      	str	r3, [sp, #16]
 8004292:	e7e9      	b.n	8004268 <_strtod_l+0x140>
 8004294:	4622      	mov	r2, r4
 8004296:	6831      	ldr	r1, [r6, #0]
 8004298:	f003 f98f 	bl	80075ba <strncmp>
 800429c:	b128      	cbz	r0, 80042aa <_strtod_l+0x182>
 800429e:	2000      	movs	r0, #0
 80042a0:	462b      	mov	r3, r5
 80042a2:	4602      	mov	r2, r0
 80042a4:	9d04      	ldr	r5, [sp, #16]
 80042a6:	4601      	mov	r1, r0
 80042a8:	e04d      	b.n	8004346 <_strtod_l+0x21e>
 80042aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042ac:	191a      	adds	r2, r3, r4
 80042ae:	9219      	str	r2, [sp, #100]	; 0x64
 80042b0:	9a04      	ldr	r2, [sp, #16]
 80042b2:	5d1b      	ldrb	r3, [r3, r4]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d13f      	bne.n	8004338 <_strtod_l+0x210>
 80042b8:	4610      	mov	r0, r2
 80042ba:	2b30      	cmp	r3, #48	; 0x30
 80042bc:	d105      	bne.n	80042ca <_strtod_l+0x1a2>
 80042be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042c0:	3001      	adds	r0, #1
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	9219      	str	r2, [sp, #100]	; 0x64
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	e7f7      	b.n	80042ba <_strtod_l+0x192>
 80042ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80042ce:	2a08      	cmp	r2, #8
 80042d0:	d83f      	bhi.n	8004352 <_strtod_l+0x22a>
 80042d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042d4:	9209      	str	r2, [sp, #36]	; 0x24
 80042d6:	4602      	mov	r2, r0
 80042d8:	2000      	movs	r0, #0
 80042da:	4605      	mov	r5, r0
 80042dc:	3b30      	subs	r3, #48	; 0x30
 80042de:	f100 0101 	add.w	r1, r0, #1
 80042e2:	d023      	beq.n	800432c <_strtod_l+0x204>
 80042e4:	440a      	add	r2, r1
 80042e6:	4629      	mov	r1, r5
 80042e8:	182e      	adds	r6, r5, r0
 80042ea:	240a      	movs	r4, #10
 80042ec:	42b1      	cmp	r1, r6
 80042ee:	d00c      	beq.n	800430a <_strtod_l+0x1e2>
 80042f0:	3101      	adds	r1, #1
 80042f2:	1e4f      	subs	r7, r1, #1
 80042f4:	2f08      	cmp	r7, #8
 80042f6:	dc02      	bgt.n	80042fe <_strtod_l+0x1d6>
 80042f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80042fc:	e7f6      	b.n	80042ec <_strtod_l+0x1c4>
 80042fe:	2910      	cmp	r1, #16
 8004300:	bfde      	ittt	le
 8004302:	9f05      	ldrle	r7, [sp, #20]
 8004304:	4367      	mulle	r7, r4
 8004306:	9705      	strle	r7, [sp, #20]
 8004308:	e7f0      	b.n	80042ec <_strtod_l+0x1c4>
 800430a:	4428      	add	r0, r5
 800430c:	2808      	cmp	r0, #8
 800430e:	f100 0501 	add.w	r5, r0, #1
 8004312:	dc03      	bgt.n	800431c <_strtod_l+0x1f4>
 8004314:	210a      	movs	r1, #10
 8004316:	fb01 3b0b 	mla	fp, r1, fp, r3
 800431a:	e006      	b.n	800432a <_strtod_l+0x202>
 800431c:	2d10      	cmp	r5, #16
 800431e:	bfdf      	itttt	le
 8004320:	9805      	ldrle	r0, [sp, #20]
 8004322:	210a      	movle	r1, #10
 8004324:	fb01 3300 	mlale	r3, r1, r0, r3
 8004328:	9305      	strle	r3, [sp, #20]
 800432a:	2100      	movs	r1, #0
 800432c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800432e:	1c58      	adds	r0, r3, #1
 8004330:	9019      	str	r0, [sp, #100]	; 0x64
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	4608      	mov	r0, r1
 8004336:	e001      	b.n	800433c <_strtod_l+0x214>
 8004338:	4602      	mov	r2, r0
 800433a:	9d04      	ldr	r5, [sp, #16]
 800433c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004340:	2909      	cmp	r1, #9
 8004342:	d9cb      	bls.n	80042dc <_strtod_l+0x1b4>
 8004344:	2101      	movs	r1, #1
 8004346:	2b65      	cmp	r3, #101	; 0x65
 8004348:	d001      	beq.n	800434e <_strtod_l+0x226>
 800434a:	2b45      	cmp	r3, #69	; 0x45
 800434c:	d154      	bne.n	80043f8 <_strtod_l+0x2d0>
 800434e:	b96d      	cbnz	r5, 800436c <_strtod_l+0x244>
 8004350:	e004      	b.n	800435c <_strtod_l+0x234>
 8004352:	2b65      	cmp	r3, #101	; 0x65
 8004354:	f040 84b5 	bne.w	8004cc2 <_strtod_l+0xb9a>
 8004358:	2200      	movs	r2, #0
 800435a:	2101      	movs	r1, #1
 800435c:	b928      	cbnz	r0, 800436a <_strtod_l+0x242>
 800435e:	9b08      	ldr	r3, [sp, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8097 	beq.w	8004494 <_strtod_l+0x36c>
 8004366:	4605      	mov	r5, r0
 8004368:	e000      	b.n	800436c <_strtod_l+0x244>
 800436a:	2500      	movs	r5, #0
 800436c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800436e:	9306      	str	r3, [sp, #24]
 8004370:	3301      	adds	r3, #1
 8004372:	9319      	str	r3, [sp, #100]	; 0x64
 8004374:	9b06      	ldr	r3, [sp, #24]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b2b      	cmp	r3, #43	; 0x2b
 800437a:	d006      	beq.n	800438a <_strtod_l+0x262>
 800437c:	2b2d      	cmp	r3, #45	; 0x2d
 800437e:	d002      	beq.n	8004386 <_strtod_l+0x25e>
 8004380:	2400      	movs	r4, #0
 8004382:	9407      	str	r4, [sp, #28]
 8004384:	e008      	b.n	8004398 <_strtod_l+0x270>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <_strtod_l+0x264>
 800438a:	2300      	movs	r3, #0
 800438c:	9307      	str	r3, [sp, #28]
 800438e:	9b06      	ldr	r3, [sp, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	9319      	str	r3, [sp, #100]	; 0x64
 8004394:	9b06      	ldr	r3, [sp, #24]
 8004396:	789b      	ldrb	r3, [r3, #2]
 8004398:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800439c:	2c09      	cmp	r4, #9
 800439e:	d829      	bhi.n	80043f4 <_strtod_l+0x2cc>
 80043a0:	2b30      	cmp	r3, #48	; 0x30
 80043a2:	d104      	bne.n	80043ae <_strtod_l+0x286>
 80043a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043a6:	1c5c      	adds	r4, r3, #1
 80043a8:	9419      	str	r4, [sp, #100]	; 0x64
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	e7f8      	b.n	80043a0 <_strtod_l+0x278>
 80043ae:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
 80043b2:	2c08      	cmp	r4, #8
 80043b4:	d820      	bhi.n	80043f8 <_strtod_l+0x2d0>
 80043b6:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80043ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043bc:	f04f 0e0a 	mov.w	lr, #10
 80043c0:	461e      	mov	r6, r3
 80043c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043c4:	1c5c      	adds	r4, r3, #1
 80043c6:	9419      	str	r4, [sp, #100]	; 0x64
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80043ce:	f1bc 0f09 	cmp.w	ip, #9
 80043d2:	d803      	bhi.n	80043dc <_strtod_l+0x2b4>
 80043d4:	fb0e 3707 	mla	r7, lr, r7, r3
 80043d8:	3f30      	subs	r7, #48	; 0x30
 80043da:	e7f2      	b.n	80043c2 <_strtod_l+0x29a>
 80043dc:	1ba4      	subs	r4, r4, r6
 80043de:	2c08      	cmp	r4, #8
 80043e0:	f644 641f 	movw	r4, #19999	; 0x4e1f
 80043e4:	dc02      	bgt.n	80043ec <_strtod_l+0x2c4>
 80043e6:	42bc      	cmp	r4, r7
 80043e8:	bfa8      	it	ge
 80043ea:	463c      	movge	r4, r7
 80043ec:	9e07      	ldr	r6, [sp, #28]
 80043ee:	b126      	cbz	r6, 80043fa <_strtod_l+0x2d2>
 80043f0:	4264      	negs	r4, r4
 80043f2:	e002      	b.n	80043fa <_strtod_l+0x2d2>
 80043f4:	9c06      	ldr	r4, [sp, #24]
 80043f6:	9419      	str	r4, [sp, #100]	; 0x64
 80043f8:	2400      	movs	r4, #0
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	d154      	bne.n	80044a8 <_strtod_l+0x380>
 80043fe:	2800      	cmp	r0, #0
 8004400:	f040 8451 	bne.w	8004ca6 <_strtod_l+0xb7e>
 8004404:	9a08      	ldr	r2, [sp, #32]
 8004406:	2a00      	cmp	r2, #0
 8004408:	f040 844d 	bne.w	8004ca6 <_strtod_l+0xb7e>
 800440c:	2900      	cmp	r1, #0
 800440e:	d141      	bne.n	8004494 <_strtod_l+0x36c>
 8004410:	2b4e      	cmp	r3, #78	; 0x4e
 8004412:	d020      	beq.n	8004456 <_strtod_l+0x32e>
 8004414:	dc02      	bgt.n	800441c <_strtod_l+0x2f4>
 8004416:	2b49      	cmp	r3, #73	; 0x49
 8004418:	d00a      	beq.n	8004430 <_strtod_l+0x308>
 800441a:	e03b      	b.n	8004494 <_strtod_l+0x36c>
 800441c:	2b69      	cmp	r3, #105	; 0x69
 800441e:	d007      	beq.n	8004430 <_strtod_l+0x308>
 8004420:	2b6e      	cmp	r3, #110	; 0x6e
 8004422:	d018      	beq.n	8004456 <_strtod_l+0x32e>
 8004424:	e036      	b.n	8004494 <_strtod_l+0x36c>
 8004426:	bf00      	nop
 8004428:	08007be0 	.word	0x08007be0
 800442c:	7ff00000 	.word	0x7ff00000
 8004430:	49ab      	ldr	r1, [pc, #684]	; (80046e0 <_strtod_l+0x5b8>)
 8004432:	a819      	add	r0, sp, #100	; 0x64
 8004434:	f001 fff3 	bl	800641e <__match>
 8004438:	b360      	cbz	r0, 8004494 <_strtod_l+0x36c>
 800443a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800443c:	49a9      	ldr	r1, [pc, #676]	; (80046e4 <_strtod_l+0x5bc>)
 800443e:	3b01      	subs	r3, #1
 8004440:	a819      	add	r0, sp, #100	; 0x64
 8004442:	9319      	str	r3, [sp, #100]	; 0x64
 8004444:	f001 ffeb 	bl	800641e <__match>
 8004448:	b910      	cbnz	r0, 8004450 <_strtod_l+0x328>
 800444a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800444c:	3301      	adds	r3, #1
 800444e:	9319      	str	r3, [sp, #100]	; 0x64
 8004450:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004700 <_strtod_l+0x5d8>
 8004454:	e01a      	b.n	800448c <_strtod_l+0x364>
 8004456:	49a4      	ldr	r1, [pc, #656]	; (80046e8 <_strtod_l+0x5c0>)
 8004458:	a819      	add	r0, sp, #100	; 0x64
 800445a:	f001 ffe0 	bl	800641e <__match>
 800445e:	b1c8      	cbz	r0, 8004494 <_strtod_l+0x36c>
 8004460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b28      	cmp	r3, #40	; 0x28
 8004466:	d10f      	bne.n	8004488 <_strtod_l+0x360>
 8004468:	aa1c      	add	r2, sp, #112	; 0x70
 800446a:	49a0      	ldr	r1, [pc, #640]	; (80046ec <_strtod_l+0x5c4>)
 800446c:	a819      	add	r0, sp, #100	; 0x64
 800446e:	f001 ffe9 	bl	8006444 <__hexnan>
 8004472:	2805      	cmp	r0, #5
 8004474:	d108      	bne.n	8004488 <_strtod_l+0x360>
 8004476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004478:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800447c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004480:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004484:	f000 bc0f 	b.w	8004ca6 <_strtod_l+0xb7e>
 8004488:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8004704 <_strtod_l+0x5dc>
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	f000 bc09 	b.w	8004ca6 <_strtod_l+0xb7e>
 8004494:	9b06      	ldr	r3, [sp, #24]
 8004496:	9319      	str	r3, [sp, #100]	; 0x64
 8004498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 840e 	beq.w	8004cbc <_strtod_l+0xb94>
 80044a0:	2300      	movs	r3, #0
 80044a2:	930e      	str	r3, [sp, #56]	; 0x38
 80044a4:	f000 bc01 	b.w	8004caa <_strtod_l+0xb82>
 80044a8:	9b04      	ldr	r3, [sp, #16]
 80044aa:	1aa7      	subs	r7, r4, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf08      	it	eq
 80044b0:	462b      	moveq	r3, r5
 80044b2:	462c      	mov	r4, r5
 80044b4:	2d10      	cmp	r5, #16
 80044b6:	4658      	mov	r0, fp
 80044b8:	bfa8      	it	ge
 80044ba:	2410      	movge	r4, #16
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	f7fb ff9f 	bl	8000400 <__aeabi_ui2d>
 80044c2:	2c09      	cmp	r4, #9
 80044c4:	4680      	mov	r8, r0
 80044c6:	4689      	mov	r9, r1
 80044c8:	dd13      	ble.n	80044f2 <_strtod_l+0x3ca>
 80044ca:	4b89      	ldr	r3, [pc, #548]	; (80046f0 <_strtod_l+0x5c8>)
 80044cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80044d4:	f7fc f80a 	bl	80004ec <__aeabi_dmul>
 80044d8:	4680      	mov	r8, r0
 80044da:	9805      	ldr	r0, [sp, #20]
 80044dc:	4689      	mov	r9, r1
 80044de:	f7fb ff8f 	bl	8000400 <__aeabi_ui2d>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fb fe4d 	bl	8000188 <__adddf3>
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	2d0f      	cmp	r5, #15
 80044f4:	dc33      	bgt.n	800455e <_strtod_l+0x436>
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	f000 83d5 	beq.w	8004ca6 <_strtod_l+0xb7e>
 80044fc:	dd22      	ble.n	8004544 <_strtod_l+0x41c>
 80044fe:	2f16      	cmp	r7, #22
 8004500:	dc07      	bgt.n	8004512 <_strtod_l+0x3ea>
 8004502:	4d7b      	ldr	r5, [pc, #492]	; (80046f0 <_strtod_l+0x5c8>)
 8004504:	4642      	mov	r2, r8
 8004506:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 800450a:	464b      	mov	r3, r9
 800450c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004510:	e013      	b.n	800453a <_strtod_l+0x412>
 8004512:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004516:	429f      	cmp	r7, r3
 8004518:	dc21      	bgt.n	800455e <_strtod_l+0x436>
 800451a:	4c75      	ldr	r4, [pc, #468]	; (80046f0 <_strtod_l+0x5c8>)
 800451c:	f1c5 050f 	rsb	r5, r5, #15
 8004520:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004524:	1b7d      	subs	r5, r7, r5
 8004526:	4642      	mov	r2, r8
 8004528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800452c:	464b      	mov	r3, r9
 800452e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004532:	f7fb ffdb 	bl	80004ec <__aeabi_dmul>
 8004536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800453a:	f7fb ffd7 	bl	80004ec <__aeabi_dmul>
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	e3b0      	b.n	8004ca6 <_strtod_l+0xb7e>
 8004544:	f117 0f16 	cmn.w	r7, #22
 8004548:	db09      	blt.n	800455e <_strtod_l+0x436>
 800454a:	4d69      	ldr	r5, [pc, #420]	; (80046f0 <_strtod_l+0x5c8>)
 800454c:	4640      	mov	r0, r8
 800454e:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	4649      	mov	r1, r9
 8004558:	f7fc f8f2 	bl	8000740 <__aeabi_ddiv>
 800455c:	e7ef      	b.n	800453e <_strtod_l+0x416>
 800455e:	1b2c      	subs	r4, r5, r4
 8004560:	443c      	add	r4, r7
 8004562:	2c00      	cmp	r4, #0
 8004564:	dd5d      	ble.n	8004622 <_strtod_l+0x4fa>
 8004566:	f014 010f 	ands.w	r1, r4, #15
 800456a:	d00a      	beq.n	8004582 <_strtod_l+0x45a>
 800456c:	4b60      	ldr	r3, [pc, #384]	; (80046f0 <_strtod_l+0x5c8>)
 800456e:	4642      	mov	r2, r8
 8004570:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004578:	464b      	mov	r3, r9
 800457a:	f7fb ffb7 	bl	80004ec <__aeabi_dmul>
 800457e:	4680      	mov	r8, r0
 8004580:	4689      	mov	r9, r1
 8004582:	f034 040f 	bics.w	r4, r4, #15
 8004586:	f000 80c1 	beq.w	800470c <_strtod_l+0x5e4>
 800458a:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800458e:	dd0f      	ble.n	80045b0 <_strtod_l+0x488>
 8004590:	f04f 0b00 	mov.w	fp, #0
 8004594:	f8cd b010 	str.w	fp, [sp, #16]
 8004598:	f8cd b01c 	str.w	fp, [sp, #28]
 800459c:	f8cd b018 	str.w	fp, [sp, #24]
 80045a0:	2322      	movs	r3, #34	; 0x22
 80045a2:	f8ca 3000 	str.w	r3, [sl]
 80045a6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004700 <_strtod_l+0x5d8>
 80045aa:	f04f 0800 	mov.w	r8, #0
 80045ae:	e189      	b.n	80048c4 <_strtod_l+0x79c>
 80045b0:	4640      	mov	r0, r8
 80045b2:	4649      	mov	r1, r9
 80045b4:	2300      	movs	r3, #0
 80045b6:	4e4f      	ldr	r6, [pc, #316]	; (80046f4 <_strtod_l+0x5cc>)
 80045b8:	1124      	asrs	r4, r4, #4
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	2c01      	cmp	r4, #1
 80045be:	dd0c      	ble.n	80045da <_strtod_l+0x4b2>
 80045c0:	07e2      	lsls	r2, r4, #31
 80045c2:	d504      	bpl.n	80045ce <_strtod_l+0x4a6>
 80045c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045c8:	f7fb ff90 	bl	80004ec <__aeabi_dmul>
 80045cc:	2301      	movs	r3, #1
 80045ce:	9a05      	ldr	r2, [sp, #20]
 80045d0:	1064      	asrs	r4, r4, #1
 80045d2:	3201      	adds	r2, #1
 80045d4:	9205      	str	r2, [sp, #20]
 80045d6:	3608      	adds	r6, #8
 80045d8:	e7f0      	b.n	80045bc <_strtod_l+0x494>
 80045da:	b10b      	cbz	r3, 80045e0 <_strtod_l+0x4b8>
 80045dc:	4680      	mov	r8, r0
 80045de:	4689      	mov	r9, r1
 80045e0:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <_strtod_l+0x5cc>)
 80045e2:	9a05      	ldr	r2, [sp, #20]
 80045e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80045e8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80045ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f7fb ff7a 	bl	80004ec <__aeabi_dmul>
 80045f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045fc:	4689      	mov	r9, r1
 80045fe:	460a      	mov	r2, r1
 8004600:	0d1b      	lsrs	r3, r3, #20
 8004602:	493d      	ldr	r1, [pc, #244]	; (80046f8 <_strtod_l+0x5d0>)
 8004604:	051b      	lsls	r3, r3, #20
 8004606:	428b      	cmp	r3, r1
 8004608:	4680      	mov	r8, r0
 800460a:	d8c1      	bhi.n	8004590 <_strtod_l+0x468>
 800460c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004610:	428b      	cmp	r3, r1
 8004612:	bf86      	itte	hi
 8004614:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 8004708 <_strtod_l+0x5e0>
 8004618:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800461c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004620:	e074      	b.n	800470c <_strtod_l+0x5e4>
 8004622:	d073      	beq.n	800470c <_strtod_l+0x5e4>
 8004624:	4264      	negs	r4, r4
 8004626:	f014 020f 	ands.w	r2, r4, #15
 800462a:	d00a      	beq.n	8004642 <_strtod_l+0x51a>
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <_strtod_l+0x5c8>)
 800462e:	4640      	mov	r0, r8
 8004630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004634:	4649      	mov	r1, r9
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fc f881 	bl	8000740 <__aeabi_ddiv>
 800463e:	4680      	mov	r8, r0
 8004640:	4689      	mov	r9, r1
 8004642:	1124      	asrs	r4, r4, #4
 8004644:	d062      	beq.n	800470c <_strtod_l+0x5e4>
 8004646:	2c1f      	cmp	r4, #31
 8004648:	dd08      	ble.n	800465c <_strtod_l+0x534>
 800464a:	f04f 0b00 	mov.w	fp, #0
 800464e:	f8cd b010 	str.w	fp, [sp, #16]
 8004652:	f8cd b01c 	str.w	fp, [sp, #28]
 8004656:	f8cd b018 	str.w	fp, [sp, #24]
 800465a:	e12c      	b.n	80048b6 <_strtod_l+0x78e>
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f014 0f10 	tst.w	r4, #16
 8004664:	bf0c      	ite	eq
 8004666:	2300      	moveq	r3, #0
 8004668:	236a      	movne	r3, #106	; 0x6a
 800466a:	4e24      	ldr	r6, [pc, #144]	; (80046fc <_strtod_l+0x5d4>)
 800466c:	9305      	str	r3, [sp, #20]
 800466e:	2300      	movs	r3, #0
 8004670:	2c00      	cmp	r4, #0
 8004672:	dd09      	ble.n	8004688 <_strtod_l+0x560>
 8004674:	07e2      	lsls	r2, r4, #31
 8004676:	d504      	bpl.n	8004682 <_strtod_l+0x55a>
 8004678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800467c:	f7fb ff36 	bl	80004ec <__aeabi_dmul>
 8004680:	2301      	movs	r3, #1
 8004682:	1064      	asrs	r4, r4, #1
 8004684:	3608      	adds	r6, #8
 8004686:	e7f3      	b.n	8004670 <_strtod_l+0x548>
 8004688:	b10b      	cbz	r3, 800468e <_strtod_l+0x566>
 800468a:	4680      	mov	r8, r0
 800468c:	4689      	mov	r9, r1
 800468e:	9b05      	ldr	r3, [sp, #20]
 8004690:	b1eb      	cbz	r3, 80046ce <_strtod_l+0x5a6>
 8004692:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800469a:	2b00      	cmp	r3, #0
 800469c:	4649      	mov	r1, r9
 800469e:	dd16      	ble.n	80046ce <_strtod_l+0x5a6>
 80046a0:	2b1f      	cmp	r3, #31
 80046a2:	dd0e      	ble.n	80046c2 <_strtod_l+0x59a>
 80046a4:	2b34      	cmp	r3, #52	; 0x34
 80046a6:	bfde      	ittt	le
 80046a8:	3b20      	suble	r3, #32
 80046aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80046ae:	fa02 f303 	lslle.w	r3, r2, r3
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	bfcc      	ite	gt
 80046b8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80046bc:	ea03 0901 	andle.w	r9, r3, r1
 80046c0:	e005      	b.n	80046ce <_strtod_l+0x5a6>
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	ea03 0808 	and.w	r8, r3, r8
 80046ce:	2200      	movs	r2, #0
 80046d0:	2300      	movs	r3, #0
 80046d2:	4640      	mov	r0, r8
 80046d4:	4649      	mov	r1, r9
 80046d6:	f7fc f971 	bl	80009bc <__aeabi_dcmpeq>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d1b5      	bne.n	800464a <_strtod_l+0x522>
 80046de:	e017      	b.n	8004710 <_strtod_l+0x5e8>
 80046e0:	08007b81 	.word	0x08007b81
 80046e4:	08007c0b 	.word	0x08007c0b
 80046e8:	08007b89 	.word	0x08007b89
 80046ec:	08007bf4 	.word	0x08007bf4
 80046f0:	08007c88 	.word	0x08007c88
 80046f4:	08007d50 	.word	0x08007d50
 80046f8:	7ca00000 	.word	0x7ca00000
 80046fc:	08007bb8 	.word	0x08007bb8
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	fff80000 	.word	0xfff80000
 8004708:	7fefffff 	.word	0x7fefffff
 800470c:	2300      	movs	r3, #0
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	f8cd b000 	str.w	fp, [sp]
 8004714:	462b      	mov	r3, r5
 8004716:	9a04      	ldr	r2, [sp, #16]
 8004718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471a:	4650      	mov	r0, sl
 800471c:	f002 f84e 	bl	80067bc <__s2b>
 8004720:	9007      	str	r0, [sp, #28]
 8004722:	2800      	cmp	r0, #0
 8004724:	f43f af34 	beq.w	8004590 <_strtod_l+0x468>
 8004728:	2f00      	cmp	r7, #0
 800472a:	f1c7 0300 	rsb	r3, r7, #0
 800472e:	bfa8      	it	ge
 8004730:	2300      	movge	r3, #0
 8004732:	930f      	str	r3, [sp, #60]	; 0x3c
 8004734:	f04f 0b00 	mov.w	fp, #0
 8004738:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 800473c:	9314      	str	r3, [sp, #80]	; 0x50
 800473e:	f8cd b010 	str.w	fp, [sp, #16]
 8004742:	9b07      	ldr	r3, [sp, #28]
 8004744:	4650      	mov	r0, sl
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	f001 ffb1 	bl	80066ae <_Balloc>
 800474c:	9006      	str	r0, [sp, #24]
 800474e:	2800      	cmp	r0, #0
 8004750:	f43f af26 	beq.w	80045a0 <_strtod_l+0x478>
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	300c      	adds	r0, #12
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	f103 010c 	add.w	r1, r3, #12
 800475e:	3202      	adds	r2, #2
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	f001 ff99 	bl	8006698 <memcpy>
 8004766:	ab1c      	add	r3, sp, #112	; 0x70
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	ab1b      	add	r3, sp, #108	; 0x6c
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	4642      	mov	r2, r8
 8004770:	464b      	mov	r3, r9
 8004772:	4650      	mov	r0, sl
 8004774:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004778:	f002 facf 	bl	8006d1a <__d2b>
 800477c:	901a      	str	r0, [sp, #104]	; 0x68
 800477e:	2800      	cmp	r0, #0
 8004780:	f43f af0e 	beq.w	80045a0 <_strtod_l+0x478>
 8004784:	2101      	movs	r1, #1
 8004786:	4650      	mov	r0, sl
 8004788:	f002 f8a3 	bl	80068d2 <__i2b>
 800478c:	9004      	str	r0, [sp, #16]
 800478e:	2800      	cmp	r0, #0
 8004790:	f43f af06 	beq.w	80045a0 <_strtod_l+0x478>
 8004794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004796:	9905      	ldr	r1, [sp, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	bfac      	ite	ge
 800479c:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
 800479e:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
 80047a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80047a2:	bfac      	ite	ge
 80047a4:	18d6      	addge	r6, r2, r3
 80047a6:	1ad2      	sublt	r2, r2, r3
 80047a8:	eba3 0301 	sub.w	r3, r3, r1
 80047ac:	4423      	add	r3, r4
 80047ae:	49b1      	ldr	r1, [pc, #708]	; (8004a74 <_strtod_l+0x94c>)
 80047b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80047b4:	bfac      	ite	ge
 80047b6:	9a14      	ldrge	r2, [sp, #80]	; 0x50
 80047b8:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
 80047ba:	428b      	cmp	r3, r1
 80047bc:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80047c0:	f280 8085 	bge.w	80048ce <_strtod_l+0x7a6>
 80047c4:	1ac9      	subs	r1, r1, r3
 80047c6:	291f      	cmp	r1, #31
 80047c8:	bfc8      	it	gt
 80047ca:	4dab      	ldrgt	r5, [pc, #684]	; (8004a78 <_strtod_l+0x950>)
 80047cc:	f04f 0701 	mov.w	r7, #1
 80047d0:	bfd4      	ite	le
 80047d2:	fa07 f301 	lslle.w	r3, r7, r1
 80047d6:	1aed      	subgt	r5, r5, r3
 80047d8:	eba4 0401 	sub.w	r4, r4, r1
 80047dc:	bfd9      	ittee	le
 80047de:	9309      	strle	r3, [sp, #36]	; 0x24
 80047e0:	2500      	movle	r5, #0
 80047e2:	fa07 f505 	lslgt.w	r5, r7, r5
 80047e6:	9709      	strgt	r7, [sp, #36]	; 0x24
 80047e8:	1937      	adds	r7, r6, r4
 80047ea:	9b05      	ldr	r3, [sp, #20]
 80047ec:	42be      	cmp	r6, r7
 80047ee:	4414      	add	r4, r2
 80047f0:	441c      	add	r4, r3
 80047f2:	4633      	mov	r3, r6
 80047f4:	bfa8      	it	ge
 80047f6:	463b      	movge	r3, r7
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	bfa8      	it	ge
 80047fc:	4623      	movge	r3, r4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfc2      	ittt	gt
 8004802:	1aff      	subgt	r7, r7, r3
 8004804:	1ae4      	subgt	r4, r4, r3
 8004806:	1af6      	subgt	r6, r6, r3
 8004808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d163      	bne.n	80048d6 <_strtod_l+0x7ae>
 800480e:	2f00      	cmp	r7, #0
 8004810:	dc7a      	bgt.n	8004908 <_strtod_l+0x7e0>
 8004812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004814:	2b00      	cmp	r3, #0
 8004816:	f040 8081 	bne.w	800491c <_strtod_l+0x7f4>
 800481a:	2c00      	cmp	r4, #0
 800481c:	f300 8088 	bgt.w	8004930 <_strtod_l+0x808>
 8004820:	2e00      	cmp	r6, #0
 8004822:	f300 808f 	bgt.w	8004944 <_strtod_l+0x81c>
 8004826:	9a06      	ldr	r2, [sp, #24]
 8004828:	991a      	ldr	r1, [sp, #104]	; 0x68
 800482a:	4650      	mov	r0, sl
 800482c:	f002 f9a5 	bl	8006b7a <__mdiff>
 8004830:	4683      	mov	fp, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	f43f aeb4 	beq.w	80045a0 <_strtod_l+0x478>
 8004838:	68c3      	ldr	r3, [r0, #12]
 800483a:	2400      	movs	r4, #0
 800483c:	60c4      	str	r4, [r0, #12]
 800483e:	9904      	ldr	r1, [sp, #16]
 8004840:	9308      	str	r3, [sp, #32]
 8004842:	f002 f97e 	bl	8006b42 <__mcmp>
 8004846:	42a0      	cmp	r0, r4
 8004848:	f280 808b 	bge.w	8004962 <_strtod_l+0x83a>
 800484c:	9b08      	ldr	r3, [sp, #32]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 8202 	bne.w	8004c58 <_strtod_l+0xb30>
 8004854:	f1b8 0f00 	cmp.w	r8, #0
 8004858:	f040 81fe 	bne.w	8004c58 <_strtod_l+0xb30>
 800485c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 81f9 	bne.w	8004c58 <_strtod_l+0xb30>
 8004866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800486a:	0d1b      	lsrs	r3, r3, #20
 800486c:	051b      	lsls	r3, r3, #20
 800486e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004872:	f240 81f1 	bls.w	8004c58 <_strtod_l+0xb30>
 8004876:	f8db 3014 	ldr.w	r3, [fp, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d06c      	beq.n	8004958 <_strtod_l+0x830>
 800487e:	4659      	mov	r1, fp
 8004880:	2201      	movs	r2, #1
 8004882:	4650      	mov	r0, sl
 8004884:	f002 f90c 	bl	8006aa0 <__lshift>
 8004888:	9904      	ldr	r1, [sp, #16]
 800488a:	4683      	mov	fp, r0
 800488c:	f002 f959 	bl	8006b42 <__mcmp>
 8004890:	2800      	cmp	r0, #0
 8004892:	f340 81e1 	ble.w	8004c58 <_strtod_l+0xb30>
 8004896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800489a:	9a05      	ldr	r2, [sp, #20]
 800489c:	0d1b      	lsrs	r3, r3, #20
 800489e:	051b      	lsls	r3, r3, #20
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	f000 808d 	beq.w	80049c0 <_strtod_l+0x898>
 80048a6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80048aa:	f300 8089 	bgt.w	80049c0 <_strtod_l+0x898>
 80048ae:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80048b2:	f300 81d3 	bgt.w	8004c5c <_strtod_l+0xb34>
 80048b6:	2322      	movs	r3, #34	; 0x22
 80048b8:	f04f 0800 	mov.w	r8, #0
 80048bc:	f04f 0900 	mov.w	r9, #0
 80048c0:	f8ca 3000 	str.w	r3, [sl]
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 81d9 	bne.w	8004c7e <_strtod_l+0xb56>
 80048cc:	e1eb      	b.n	8004ca6 <_strtod_l+0xb7e>
 80048ce:	2301      	movs	r3, #1
 80048d0:	2500      	movs	r5, #0
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
 80048d4:	e788      	b.n	80047e8 <_strtod_l+0x6c0>
 80048d6:	461a      	mov	r2, r3
 80048d8:	9904      	ldr	r1, [sp, #16]
 80048da:	4650      	mov	r0, sl
 80048dc:	f002 f892 	bl	8006a04 <__pow5mult>
 80048e0:	9004      	str	r0, [sp, #16]
 80048e2:	2800      	cmp	r0, #0
 80048e4:	f43f ae5c 	beq.w	80045a0 <_strtod_l+0x478>
 80048e8:	4601      	mov	r1, r0
 80048ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80048ec:	4650      	mov	r0, sl
 80048ee:	f001 fff9 	bl	80068e4 <__multiply>
 80048f2:	9008      	str	r0, [sp, #32]
 80048f4:	2800      	cmp	r0, #0
 80048f6:	f43f ae53 	beq.w	80045a0 <_strtod_l+0x478>
 80048fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048fc:	4650      	mov	r0, sl
 80048fe:	f001 ff0b 	bl	8006718 <_Bfree>
 8004902:	9b08      	ldr	r3, [sp, #32]
 8004904:	931a      	str	r3, [sp, #104]	; 0x68
 8004906:	e782      	b.n	800480e <_strtod_l+0x6e6>
 8004908:	463a      	mov	r2, r7
 800490a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800490c:	4650      	mov	r0, sl
 800490e:	f002 f8c7 	bl	8006aa0 <__lshift>
 8004912:	901a      	str	r0, [sp, #104]	; 0x68
 8004914:	2800      	cmp	r0, #0
 8004916:	f47f af7c 	bne.w	8004812 <_strtod_l+0x6ea>
 800491a:	e641      	b.n	80045a0 <_strtod_l+0x478>
 800491c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800491e:	9906      	ldr	r1, [sp, #24]
 8004920:	4650      	mov	r0, sl
 8004922:	f002 f86f 	bl	8006a04 <__pow5mult>
 8004926:	9006      	str	r0, [sp, #24]
 8004928:	2800      	cmp	r0, #0
 800492a:	f47f af76 	bne.w	800481a <_strtod_l+0x6f2>
 800492e:	e637      	b.n	80045a0 <_strtod_l+0x478>
 8004930:	4622      	mov	r2, r4
 8004932:	9906      	ldr	r1, [sp, #24]
 8004934:	4650      	mov	r0, sl
 8004936:	f002 f8b3 	bl	8006aa0 <__lshift>
 800493a:	9006      	str	r0, [sp, #24]
 800493c:	2800      	cmp	r0, #0
 800493e:	f47f af6f 	bne.w	8004820 <_strtod_l+0x6f8>
 8004942:	e62d      	b.n	80045a0 <_strtod_l+0x478>
 8004944:	4632      	mov	r2, r6
 8004946:	9904      	ldr	r1, [sp, #16]
 8004948:	4650      	mov	r0, sl
 800494a:	f002 f8a9 	bl	8006aa0 <__lshift>
 800494e:	9004      	str	r0, [sp, #16]
 8004950:	2800      	cmp	r0, #0
 8004952:	f47f af68 	bne.w	8004826 <_strtod_l+0x6fe>
 8004956:	e623      	b.n	80045a0 <_strtod_l+0x478>
 8004958:	f8db 3010 	ldr.w	r3, [fp, #16]
 800495c:	2b01      	cmp	r3, #1
 800495e:	dc8e      	bgt.n	800487e <_strtod_l+0x756>
 8004960:	e17a      	b.n	8004c58 <_strtod_l+0xb30>
 8004962:	d161      	bne.n	8004a28 <_strtod_l+0x900>
 8004964:	9a08      	ldr	r2, [sp, #32]
 8004966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800496a:	b322      	cbz	r2, 80049b6 <_strtod_l+0x88e>
 800496c:	4943      	ldr	r1, [pc, #268]	; (8004a7c <_strtod_l+0x954>)
 800496e:	464a      	mov	r2, r9
 8004970:	428b      	cmp	r3, r1
 8004972:	d12e      	bne.n	80049d2 <_strtod_l+0x8aa>
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	4641      	mov	r1, r8
 8004978:	b163      	cbz	r3, 8004994 <_strtod_l+0x86c>
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <_strtod_l+0x958>)
 800497c:	4013      	ands	r3, r2
 800497e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004982:	d807      	bhi.n	8004994 <_strtod_l+0x86c>
 8004984:	0d1b      	lsrs	r3, r3, #20
 8004986:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800498a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498e:	fa00 f303 	lsl.w	r3, r0, r3
 8004992:	e001      	b.n	8004998 <_strtod_l+0x870>
 8004994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004998:	428b      	cmp	r3, r1
 800499a:	d11a      	bne.n	80049d2 <_strtod_l+0x8aa>
 800499c:	4939      	ldr	r1, [pc, #228]	; (8004a84 <_strtod_l+0x95c>)
 800499e:	428a      	cmp	r2, r1
 80049a0:	d102      	bne.n	80049a8 <_strtod_l+0x880>
 80049a2:	3301      	adds	r3, #1
 80049a4:	f43f adfc 	beq.w	80045a0 <_strtod_l+0x478>
 80049a8:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <_strtod_l+0x958>)
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	4013      	ands	r3, r2
 80049b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80049b4:	e150      	b.n	8004c58 <_strtod_l+0xb30>
 80049b6:	b963      	cbnz	r3, 80049d2 <_strtod_l+0x8aa>
 80049b8:	f1b8 0f00 	cmp.w	r8, #0
 80049bc:	d109      	bne.n	80049d2 <_strtod_l+0x8aa>
 80049be:	e76a      	b.n	8004896 <_strtod_l+0x76e>
 80049c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80049c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80049c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80049cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80049d0:	e142      	b.n	8004c58 <_strtod_l+0xb30>
 80049d2:	b115      	cbz	r5, 80049da <_strtod_l+0x8b2>
 80049d4:	ea15 0f09 	tst.w	r5, r9
 80049d8:	e002      	b.n	80049e0 <_strtod_l+0x8b8>
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	ea13 0f08 	tst.w	r3, r8
 80049e0:	f000 813a 	beq.w	8004c58 <_strtod_l+0xb30>
 80049e4:	9b08      	ldr	r3, [sp, #32]
 80049e6:	9a05      	ldr	r2, [sp, #20]
 80049e8:	4640      	mov	r0, r8
 80049ea:	4649      	mov	r1, r9
 80049ec:	b153      	cbz	r3, 8004a04 <_strtod_l+0x8dc>
 80049ee:	f7ff fb77 	bl	80040e0 <sulp>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049fa:	f7fb fbc5 	bl	8000188 <__adddf3>
 80049fe:	4680      	mov	r8, r0
 8004a00:	4689      	mov	r9, r1
 8004a02:	e129      	b.n	8004c58 <_strtod_l+0xb30>
 8004a04:	f7ff fb6c 	bl	80040e0 <sulp>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a10:	f7fb fbb8 	bl	8000184 <__aeabi_dsub>
 8004a14:	2200      	movs	r2, #0
 8004a16:	2300      	movs	r3, #0
 8004a18:	4680      	mov	r8, r0
 8004a1a:	4689      	mov	r9, r1
 8004a1c:	f7fb ffce 	bl	80009bc <__aeabi_dcmpeq>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f47f af48 	bne.w	80048b6 <_strtod_l+0x78e>
 8004a26:	e117      	b.n	8004c58 <_strtod_l+0xb30>
 8004a28:	9904      	ldr	r1, [sp, #16]
 8004a2a:	4658      	mov	r0, fp
 8004a2c:	f002 f9c3 	bl	8006db6 <__ratio>
 8004a30:	2200      	movs	r2, #0
 8004a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a36:	4606      	mov	r6, r0
 8004a38:	460f      	mov	r7, r1
 8004a3a:	f7fb ffd3 	bl	80009e4 <__aeabi_dcmple>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d03f      	beq.n	8004ac2 <_strtod_l+0x99a>
 8004a42:	9b08      	ldr	r3, [sp, #32]
 8004a44:	b113      	cbz	r3, 8004a4c <_strtod_l+0x924>
 8004a46:	2600      	movs	r6, #0
 8004a48:	4f0f      	ldr	r7, [pc, #60]	; (8004a88 <_strtod_l+0x960>)
 8004a4a:	e010      	b.n	8004a6e <_strtod_l+0x946>
 8004a4c:	f1b8 0f00 	cmp.w	r8, #0
 8004a50:	d103      	bne.n	8004a5a <_strtod_l+0x932>
 8004a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a56:	b93b      	cbnz	r3, 8004a68 <_strtod_l+0x940>
 8004a58:	e01a      	b.n	8004a90 <_strtod_l+0x968>
 8004a5a:	f1b8 0f01 	cmp.w	r8, #1
 8004a5e:	d103      	bne.n	8004a68 <_strtod_l+0x940>
 8004a60:	f1b9 0f00 	cmp.w	r9, #0
 8004a64:	f43f af27 	beq.w	80048b6 <_strtod_l+0x78e>
 8004a68:	4f08      	ldr	r7, [pc, #32]	; (8004a8c <_strtod_l+0x964>)
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	2400      	movs	r4, #0
 8004a6e:	4d06      	ldr	r5, [pc, #24]	; (8004a88 <_strtod_l+0x960>)
 8004a70:	e03c      	b.n	8004aec <_strtod_l+0x9c4>
 8004a72:	bf00      	nop
 8004a74:	fffffc02 	.word	0xfffffc02
 8004a78:	fffffbe2 	.word	0xfffffbe2
 8004a7c:	000fffff 	.word	0x000fffff
 8004a80:	7ff00000 	.word	0x7ff00000
 8004a84:	7fefffff 	.word	0x7fefffff
 8004a88:	3ff00000 	.word	0x3ff00000
 8004a8c:	bff00000 	.word	0xbff00000
 8004a90:	2200      	movs	r2, #0
 8004a92:	4b99      	ldr	r3, [pc, #612]	; (8004cf8 <_strtod_l+0xbd0>)
 8004a94:	4630      	mov	r0, r6
 8004a96:	4639      	mov	r1, r7
 8004a98:	f7fb ff9a 	bl	80009d0 <__aeabi_dcmplt>
 8004a9c:	b940      	cbnz	r0, 8004ab0 <_strtod_l+0x988>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4b96      	ldr	r3, [pc, #600]	; (8004cfc <_strtod_l+0xbd4>)
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	f7fb fd21 	bl	80004ec <__aeabi_dmul>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	460d      	mov	r5, r1
 8004aae:	e001      	b.n	8004ab4 <_strtod_l+0x98c>
 8004ab0:	9c08      	ldr	r4, [sp, #32]
 8004ab2:	4d92      	ldr	r5, [pc, #584]	; (8004cfc <_strtod_l+0xbd4>)
 8004ab4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ab8:	9416      	str	r4, [sp, #88]	; 0x58
 8004aba:	9317      	str	r3, [sp, #92]	; 0x5c
 8004abc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004ac0:	e014      	b.n	8004aec <_strtod_l+0x9c4>
 8004ac2:	4b8e      	ldr	r3, [pc, #568]	; (8004cfc <_strtod_l+0xbd4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fb fd0f 	bl	80004ec <__aeabi_dmul>
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	b923      	cbnz	r3, 8004ae0 <_strtod_l+0x9b8>
 8004ad6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ada:	9010      	str	r0, [sp, #64]	; 0x40
 8004adc:	9311      	str	r3, [sp, #68]	; 0x44
 8004ade:	e003      	b.n	8004ae8 <_strtod_l+0x9c0>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004ae8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004aec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004af0:	0d1b      	lsrs	r3, r3, #20
 8004af2:	051b      	lsls	r3, r3, #20
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <_strtod_l+0xbd8>)
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d12b      	bne.n	8004b56 <_strtod_l+0xa2e>
 8004afe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b02:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004b06:	4640      	mov	r0, r8
 8004b08:	4649      	mov	r1, r9
 8004b0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004b0e:	f002 f893 	bl	8006c38 <__ulp>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4630      	mov	r0, r6
 8004b18:	4639      	mov	r1, r7
 8004b1a:	f7fb fce7 	bl	80004ec <__aeabi_dmul>
 8004b1e:	4642      	mov	r2, r8
 8004b20:	464b      	mov	r3, r9
 8004b22:	f7fb fb31 	bl	8000188 <__adddf3>
 8004b26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	4a75      	ldr	r2, [pc, #468]	; (8004d04 <_strtod_l+0xbdc>)
 8004b2e:	051b      	lsls	r3, r3, #20
 8004b30:	4293      	cmp	r3, r2
 8004b32:	4680      	mov	r8, r0
 8004b34:	d90c      	bls.n	8004b50 <_strtod_l+0xa28>
 8004b36:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <_strtod_l+0xbe0>)
 8004b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d103      	bne.n	8004b46 <_strtod_l+0xa1e>
 8004b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b40:	3301      	adds	r3, #1
 8004b42:	f43f ad2d 	beq.w	80045a0 <_strtod_l+0x478>
 8004b46:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8004d08 <_strtod_l+0xbe0>
 8004b4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b4e:	e072      	b.n	8004c36 <_strtod_l+0xb0e>
 8004b50:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8004b54:	e039      	b.n	8004bca <_strtod_l+0xaa2>
 8004b56:	9b05      	ldr	r3, [sp, #20]
 8004b58:	b33b      	cbz	r3, 8004baa <_strtod_l+0xa82>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b60:	d823      	bhi.n	8004baa <_strtod_l+0xa82>
 8004b62:	a35d      	add	r3, pc, #372	; (adr r3, 8004cd8 <_strtod_l+0xbb0>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7fb ff3a 	bl	80009e4 <__aeabi_dcmple>
 8004b70:	b1b8      	cbz	r0, 8004ba2 <_strtod_l+0xa7a>
 8004b72:	4629      	mov	r1, r5
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7fb ff91 	bl	8000a9c <__aeabi_d2uiz>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	bf08      	it	eq
 8004b7e:	2001      	moveq	r0, #1
 8004b80:	f7fb fc3e 	bl	8000400 <__aeabi_ui2d>
 8004b84:	9b08      	ldr	r3, [sp, #32]
 8004b86:	4604      	mov	r4, r0
 8004b88:	460d      	mov	r5, r1
 8004b8a:	b923      	cbnz	r3, 8004b96 <_strtod_l+0xa6e>
 8004b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b90:	9012      	str	r0, [sp, #72]	; 0x48
 8004b92:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b94:	e003      	b.n	8004b9e <_strtod_l+0xa76>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004b9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004ba8:	1a9f      	subs	r7, r3, r2
 8004baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bae:	f002 f843 	bl	8006c38 <__ulp>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f7fb fc97 	bl	80004ec <__aeabi_dmul>
 8004bbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bc2:	f7fb fae1 	bl	8000188 <__adddf3>
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	4689      	mov	r9, r1
 8004bca:	9b05      	ldr	r3, [sp, #20]
 8004bcc:	bb9b      	cbnz	r3, 8004c36 <_strtod_l+0xb0e>
 8004bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bd2:	0d1b      	lsrs	r3, r3, #20
 8004bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bd6:	051b      	lsls	r3, r3, #20
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	464e      	mov	r6, r9
 8004bdc:	d12b      	bne.n	8004c36 <_strtod_l+0xb0e>
 8004bde:	4629      	mov	r1, r5
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fb ff33 	bl	8000a4c <__aeabi_d2iz>
 8004be6:	f7fb fc1b 	bl	8000420 <__aeabi_i2d>
 8004bea:	460b      	mov	r3, r1
 8004bec:	4602      	mov	r2, r0
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7fb fac7 	bl	8000184 <__aeabi_dsub>
 8004bf6:	9b08      	ldr	r3, [sp, #32]
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	b92b      	cbnz	r3, 8004c0a <_strtod_l+0xae2>
 8004bfe:	f1b8 0f00 	cmp.w	r8, #0
 8004c02:	d102      	bne.n	8004c0a <_strtod_l+0xae2>
 8004c04:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8004c08:	b17e      	cbz	r6, 8004c2a <_strtod_l+0xb02>
 8004c0a:	a335      	add	r3, pc, #212	; (adr r3, 8004ce0 <_strtod_l+0xbb8>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	4620      	mov	r0, r4
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7fb fedc 	bl	80009d0 <__aeabi_dcmplt>
 8004c18:	bb88      	cbnz	r0, 8004c7e <_strtod_l+0xb56>
 8004c1a:	a333      	add	r3, pc, #204	; (adr r3, 8004ce8 <_strtod_l+0xbc0>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	4620      	mov	r0, r4
 8004c22:	4629      	mov	r1, r5
 8004c24:	f7fb fef2 	bl	8000a0c <__aeabi_dcmpgt>
 8004c28:	e004      	b.n	8004c34 <_strtod_l+0xb0c>
 8004c2a:	a331      	add	r3, pc, #196	; (adr r3, 8004cf0 <_strtod_l+0xbc8>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fece 	bl	80009d0 <__aeabi_dcmplt>
 8004c34:	bb18      	cbnz	r0, 8004c7e <_strtod_l+0xb56>
 8004c36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c38:	4650      	mov	r0, sl
 8004c3a:	f001 fd6d 	bl	8006718 <_Bfree>
 8004c3e:	9906      	ldr	r1, [sp, #24]
 8004c40:	4650      	mov	r0, sl
 8004c42:	f001 fd69 	bl	8006718 <_Bfree>
 8004c46:	9904      	ldr	r1, [sp, #16]
 8004c48:	4650      	mov	r0, sl
 8004c4a:	f001 fd65 	bl	8006718 <_Bfree>
 8004c4e:	4659      	mov	r1, fp
 8004c50:	4650      	mov	r0, sl
 8004c52:	f001 fd61 	bl	8006718 <_Bfree>
 8004c56:	e574      	b.n	8004742 <_strtod_l+0x61a>
 8004c58:	9b05      	ldr	r3, [sp, #20]
 8004c5a:	b183      	cbz	r3, 8004c7e <_strtod_l+0xb56>
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <_strtod_l+0xbe4>)
 8004c5e:	4640      	mov	r0, r8
 8004c60:	930d      	str	r3, [sp, #52]	; 0x34
 8004c62:	2300      	movs	r3, #0
 8004c64:	930c      	str	r3, [sp, #48]	; 0x30
 8004c66:	4649      	mov	r1, r9
 8004c68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c6c:	f7fb fc3e 	bl	80004ec <__aeabi_dmul>
 8004c70:	4680      	mov	r8, r0
 8004c72:	4689      	mov	r9, r1
 8004c74:	b919      	cbnz	r1, 8004c7e <_strtod_l+0xb56>
 8004c76:	b910      	cbnz	r0, 8004c7e <_strtod_l+0xb56>
 8004c78:	2322      	movs	r3, #34	; 0x22
 8004c7a:	f8ca 3000 	str.w	r3, [sl]
 8004c7e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c80:	4650      	mov	r0, sl
 8004c82:	f001 fd49 	bl	8006718 <_Bfree>
 8004c86:	9906      	ldr	r1, [sp, #24]
 8004c88:	4650      	mov	r0, sl
 8004c8a:	f001 fd45 	bl	8006718 <_Bfree>
 8004c8e:	9904      	ldr	r1, [sp, #16]
 8004c90:	4650      	mov	r0, sl
 8004c92:	f001 fd41 	bl	8006718 <_Bfree>
 8004c96:	9907      	ldr	r1, [sp, #28]
 8004c98:	4650      	mov	r0, sl
 8004c9a:	f001 fd3d 	bl	8006718 <_Bfree>
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	f001 fd39 	bl	8006718 <_Bfree>
 8004ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ca8:	b113      	cbz	r3, 8004cb0 <_strtod_l+0xb88>
 8004caa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb2:	b11b      	cbz	r3, 8004cbc <_strtod_l+0xb94>
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cba:	e007      	b.n	8004ccc <_strtod_l+0xba4>
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	e004      	b.n	8004ccc <_strtod_l+0xba4>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	f7ff bb3f 	b.w	800434a <_strtod_l+0x222>
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	b01f      	add	sp, #124	; 0x7c
 8004cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	ffc00000 	.word	0xffc00000
 8004cdc:	41dfffff 	.word	0x41dfffff
 8004ce0:	94a03595 	.word	0x94a03595
 8004ce4:	3fdfffff 	.word	0x3fdfffff
 8004ce8:	35afe535 	.word	0x35afe535
 8004cec:	3fe00000 	.word	0x3fe00000
 8004cf0:	94a03595 	.word	0x94a03595
 8004cf4:	3fcfffff 	.word	0x3fcfffff
 8004cf8:	3ff00000 	.word	0x3ff00000
 8004cfc:	3fe00000 	.word	0x3fe00000
 8004d00:	7fe00000 	.word	0x7fe00000
 8004d04:	7c9fffff 	.word	0x7c9fffff
 8004d08:	7fefffff 	.word	0x7fefffff
 8004d0c:	39500000 	.word	0x39500000

08004d10 <_strtod_r>:
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_strtod_r+0x18>)
 8004d12:	b410      	push	{r4}
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4c05      	ldr	r4, [pc, #20]	; (8004d2c <_strtod_r+0x1c>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf08      	it	eq
 8004d1e:	4623      	moveq	r3, r4
 8004d20:	bc10      	pop	{r4}
 8004d22:	f7ff ba01 	b.w	8004128 <_strtod_l>
 8004d26:	bf00      	nop
 8004d28:	20000140 	.word	0x20000140
 8004d2c:	20000144 	.word	0x20000144

08004d30 <_strtol_l.isra.0>:
 8004d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	4680      	mov	r8, r0
 8004d36:	4689      	mov	r9, r1
 8004d38:	4692      	mov	sl, r2
 8004d3a:	461e      	mov	r6, r3
 8004d3c:	460f      	mov	r7, r1
 8004d3e:	463d      	mov	r5, r7
 8004d40:	9808      	ldr	r0, [sp, #32]
 8004d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d46:	f001 fc0b 	bl	8006560 <__locale_ctype_ptr_l>
 8004d4a:	4420      	add	r0, r4
 8004d4c:	7842      	ldrb	r2, [r0, #1]
 8004d4e:	f002 0208 	and.w	r2, r2, #8
 8004d52:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004d56:	b10a      	cbz	r2, 8004d5c <_strtol_l.isra.0+0x2c>
 8004d58:	462f      	mov	r7, r5
 8004d5a:	e7f0      	b.n	8004d3e <_strtol_l.isra.0+0xe>
 8004d5c:	2c2d      	cmp	r4, #45	; 0x2d
 8004d5e:	d103      	bne.n	8004d68 <_strtol_l.isra.0+0x38>
 8004d60:	1cbd      	adds	r5, r7, #2
 8004d62:	787c      	ldrb	r4, [r7, #1]
 8004d64:	2301      	movs	r3, #1
 8004d66:	e003      	b.n	8004d70 <_strtol_l.isra.0+0x40>
 8004d68:	2c2b      	cmp	r4, #43	; 0x2b
 8004d6a:	bf04      	itt	eq
 8004d6c:	787c      	ldrbeq	r4, [r7, #1]
 8004d6e:	1cbd      	addeq	r5, r7, #2
 8004d70:	b116      	cbz	r6, 8004d78 <_strtol_l.isra.0+0x48>
 8004d72:	2e10      	cmp	r6, #16
 8004d74:	d10a      	bne.n	8004d8c <_strtol_l.isra.0+0x5c>
 8004d76:	e05e      	b.n	8004e36 <_strtol_l.isra.0+0x106>
 8004d78:	2c30      	cmp	r4, #48	; 0x30
 8004d7a:	d15a      	bne.n	8004e32 <_strtol_l.isra.0+0x102>
 8004d7c:	782a      	ldrb	r2, [r5, #0]
 8004d7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004d82:	2a58      	cmp	r2, #88	; 0x58
 8004d84:	d150      	bne.n	8004e28 <_strtol_l.isra.0+0xf8>
 8004d86:	786c      	ldrb	r4, [r5, #1]
 8004d88:	2610      	movs	r6, #16
 8004d8a:	3502      	adds	r5, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf14      	ite	ne
 8004d90:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8004d94:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
 8004d98:	fbb2 fef6 	udiv	lr, r2, r6
 8004d9c:	fb06 211e 	mls	r1, r6, lr, r2
 8004da0:	2200      	movs	r2, #0
 8004da2:	4610      	mov	r0, r2
 8004da4:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004da8:	2f09      	cmp	r7, #9
 8004daa:	d801      	bhi.n	8004db0 <_strtol_l.isra.0+0x80>
 8004dac:	463c      	mov	r4, r7
 8004dae:	e00a      	b.n	8004dc6 <_strtol_l.isra.0+0x96>
 8004db0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004db4:	2f19      	cmp	r7, #25
 8004db6:	d801      	bhi.n	8004dbc <_strtol_l.isra.0+0x8c>
 8004db8:	3c37      	subs	r4, #55	; 0x37
 8004dba:	e004      	b.n	8004dc6 <_strtol_l.isra.0+0x96>
 8004dbc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004dc0:	2f19      	cmp	r7, #25
 8004dc2:	d813      	bhi.n	8004dec <_strtol_l.isra.0+0xbc>
 8004dc4:	3c57      	subs	r4, #87	; 0x57
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	dd10      	ble.n	8004dec <_strtol_l.isra.0+0xbc>
 8004dca:	1c57      	adds	r7, r2, #1
 8004dcc:	d00b      	beq.n	8004de6 <_strtol_l.isra.0+0xb6>
 8004dce:	4586      	cmp	lr, r0
 8004dd0:	d307      	bcc.n	8004de2 <_strtol_l.isra.0+0xb2>
 8004dd2:	d101      	bne.n	8004dd8 <_strtol_l.isra.0+0xa8>
 8004dd4:	42a1      	cmp	r1, r4
 8004dd6:	db03      	blt.n	8004de0 <_strtol_l.isra.0+0xb0>
 8004dd8:	fb00 4006 	mla	r0, r0, r6, r4
 8004ddc:	2201      	movs	r2, #1
 8004dde:	e002      	b.n	8004de6 <_strtol_l.isra.0+0xb6>
 8004de0:	4670      	mov	r0, lr
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004de6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dea:	e7db      	b.n	8004da4 <_strtol_l.isra.0+0x74>
 8004dec:	1c51      	adds	r1, r2, #1
 8004dee:	d10e      	bne.n	8004e0e <_strtol_l.isra.0+0xde>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f04f 0322 	mov.w	r3, #34	; 0x22
 8004df6:	bf14      	ite	ne
 8004df8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8004dfc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004e00:	f8c8 3000 	str.w	r3, [r8]
 8004e04:	f1ba 0f00 	cmp.w	sl, #0
 8004e08:	d107      	bne.n	8004e1a <_strtol_l.isra.0+0xea>
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	b103      	cbz	r3, 8004e12 <_strtol_l.isra.0+0xe2>
 8004e10:	4240      	negs	r0, r0
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	d011      	beq.n	8004e3c <_strtol_l.isra.0+0x10c>
 8004e18:	b10a      	cbz	r2, 8004e1e <_strtol_l.isra.0+0xee>
 8004e1a:	3d01      	subs	r5, #1
 8004e1c:	e000      	b.n	8004e20 <_strtol_l.isra.0+0xf0>
 8004e1e:	464d      	mov	r5, r9
 8004e20:	f8ca 5000 	str.w	r5, [sl]
 8004e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e28:	2430      	movs	r4, #48	; 0x30
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	d1ae      	bne.n	8004d8c <_strtol_l.isra.0+0x5c>
 8004e2e:	2608      	movs	r6, #8
 8004e30:	e7ac      	b.n	8004d8c <_strtol_l.isra.0+0x5c>
 8004e32:	260a      	movs	r6, #10
 8004e34:	e7aa      	b.n	8004d8c <_strtol_l.isra.0+0x5c>
 8004e36:	2c30      	cmp	r4, #48	; 0x30
 8004e38:	d0a0      	beq.n	8004d7c <_strtol_l.isra.0+0x4c>
 8004e3a:	e7a7      	b.n	8004d8c <_strtol_l.isra.0+0x5c>
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004e40 <_strtol_r>:
 8004e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e42:	4c06      	ldr	r4, [pc, #24]	; (8004e5c <_strtol_r+0x1c>)
 8004e44:	4d06      	ldr	r5, [pc, #24]	; (8004e60 <_strtol_r+0x20>)
 8004e46:	6824      	ldr	r4, [r4, #0]
 8004e48:	6a24      	ldr	r4, [r4, #32]
 8004e4a:	2c00      	cmp	r4, #0
 8004e4c:	bf08      	it	eq
 8004e4e:	462c      	moveq	r4, r5
 8004e50:	9400      	str	r4, [sp, #0]
 8004e52:	f7ff ff6d 	bl	8004d30 <_strtol_l.isra.0>
 8004e56:	b003      	add	sp, #12
 8004e58:	bd30      	pop	{r4, r5, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000140 	.word	0x20000140
 8004e60:	20000144 	.word	0x20000144

08004e64 <__swbuf_r>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	460f      	mov	r7, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	b118      	cbz	r0, 8004e76 <__swbuf_r+0x12>
 8004e6e:	6983      	ldr	r3, [r0, #24]
 8004e70:	b90b      	cbnz	r3, 8004e76 <__swbuf_r+0x12>
 8004e72:	f000 ffcd 	bl	8005e10 <__sinit>
 8004e76:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <__swbuf_r+0x9c>)
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	d101      	bne.n	8004e80 <__swbuf_r+0x1c>
 8004e7c:	686c      	ldr	r4, [r5, #4]
 8004e7e:	e008      	b.n	8004e92 <__swbuf_r+0x2e>
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <__swbuf_r+0xa0>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d101      	bne.n	8004e8a <__swbuf_r+0x26>
 8004e86:	68ac      	ldr	r4, [r5, #8]
 8004e88:	e003      	b.n	8004e92 <__swbuf_r+0x2e>
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <__swbuf_r+0xa4>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	bf08      	it	eq
 8004e90:	68ec      	ldreq	r4, [r5, #12]
 8004e92:	69a3      	ldr	r3, [r4, #24]
 8004e94:	60a3      	str	r3, [r4, #8]
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	071a      	lsls	r2, r3, #28
 8004e9a:	d509      	bpl.n	8004eb0 <__swbuf_r+0x4c>
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	b13b      	cbz	r3, 8004eb0 <__swbuf_r+0x4c>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	6920      	ldr	r0, [r4, #16]
 8004ea4:	b2fe      	uxtb	r6, r7
 8004ea6:	1a18      	subs	r0, r3, r0
 8004ea8:	6963      	ldr	r3, [r4, #20]
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	db0f      	blt.n	8004ece <__swbuf_r+0x6a>
 8004eae:	e008      	b.n	8004ec2 <__swbuf_r+0x5e>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f82a 	bl	8004f0c <__swsetup_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0f1      	beq.n	8004ea0 <__swbuf_r+0x3c>
 8004ebc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004ec0:	e01b      	b.n	8004efa <__swbuf_r+0x96>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f000 ff39 	bl	8005d3c <_fflush_r>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1f6      	bne.n	8004ebc <__swbuf_r+0x58>
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	6022      	str	r2, [r4, #0]
 8004edc:	701f      	strb	r7, [r3, #0]
 8004ede:	6963      	ldr	r3, [r4, #20]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	d004      	beq.n	8004eee <__swbuf_r+0x8a>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	07db      	lsls	r3, r3, #31
 8004ee8:	d507      	bpl.n	8004efa <__swbuf_r+0x96>
 8004eea:	2e0a      	cmp	r6, #10
 8004eec:	d105      	bne.n	8004efa <__swbuf_r+0x96>
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 ff23 	bl	8005d3c <_fflush_r>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d1e0      	bne.n	8004ebc <__swbuf_r+0x58>
 8004efa:	4630      	mov	r0, r6
 8004efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efe:	bf00      	nop
 8004f00:	08007c18 	.word	0x08007c18
 8004f04:	08007c38 	.word	0x08007c38
 8004f08:	08007c58 	.word	0x08007c58

08004f0c <__swsetup_r>:
 8004f0c:	4b32      	ldr	r3, [pc, #200]	; (8004fd8 <__swsetup_r+0xcc>)
 8004f0e:	b570      	push	{r4, r5, r6, lr}
 8004f10:	681d      	ldr	r5, [r3, #0]
 8004f12:	4606      	mov	r6, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	b125      	cbz	r5, 8004f22 <__swsetup_r+0x16>
 8004f18:	69ab      	ldr	r3, [r5, #24]
 8004f1a:	b913      	cbnz	r3, 8004f22 <__swsetup_r+0x16>
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 ff77 	bl	8005e10 <__sinit>
 8004f22:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <__swsetup_r+0xd0>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d101      	bne.n	8004f2c <__swsetup_r+0x20>
 8004f28:	686c      	ldr	r4, [r5, #4]
 8004f2a:	e008      	b.n	8004f3e <__swsetup_r+0x32>
 8004f2c:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <__swsetup_r+0xd4>)
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	d101      	bne.n	8004f36 <__swsetup_r+0x2a>
 8004f32:	68ac      	ldr	r4, [r5, #8]
 8004f34:	e003      	b.n	8004f3e <__swsetup_r+0x32>
 8004f36:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <__swsetup_r+0xd8>)
 8004f38:	429c      	cmp	r4, r3
 8004f3a:	bf08      	it	eq
 8004f3c:	68ec      	ldreq	r4, [r5, #12]
 8004f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	0715      	lsls	r5, r2, #28
 8004f46:	d41d      	bmi.n	8004f84 <__swsetup_r+0x78>
 8004f48:	06d0      	lsls	r0, r2, #27
 8004f4a:	d402      	bmi.n	8004f52 <__swsetup_r+0x46>
 8004f4c:	2209      	movs	r2, #9
 8004f4e:	6032      	str	r2, [r6, #0]
 8004f50:	e03a      	b.n	8004fc8 <__swsetup_r+0xbc>
 8004f52:	0751      	lsls	r1, r2, #29
 8004f54:	d512      	bpl.n	8004f7c <__swsetup_r+0x70>
 8004f56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f58:	b141      	cbz	r1, 8004f6c <__swsetup_r+0x60>
 8004f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d002      	beq.n	8004f68 <__swsetup_r+0x5c>
 8004f62:	4630      	mov	r0, r6
 8004f64:	f001 ff9a 	bl	8006e9c <_free_r>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	2300      	movs	r3, #0
 8004f76:	6063      	str	r3, [r4, #4]
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f043 0308 	orr.w	r3, r3, #8
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	b94b      	cbnz	r3, 8004f9c <__swsetup_r+0x90>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f92:	d003      	beq.n	8004f9c <__swsetup_r+0x90>
 8004f94:	4621      	mov	r1, r4
 8004f96:	4630      	mov	r0, r6
 8004f98:	f001 fb1a 	bl	80065d0 <__smakebuf_r>
 8004f9c:	89a2      	ldrh	r2, [r4, #12]
 8004f9e:	f012 0301 	ands.w	r3, r2, #1
 8004fa2:	d005      	beq.n	8004fb0 <__swsetup_r+0xa4>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60a3      	str	r3, [r4, #8]
 8004fa8:	6963      	ldr	r3, [r4, #20]
 8004faa:	425b      	negs	r3, r3
 8004fac:	61a3      	str	r3, [r4, #24]
 8004fae:	e003      	b.n	8004fb8 <__swsetup_r+0xac>
 8004fb0:	0792      	lsls	r2, r2, #30
 8004fb2:	bf58      	it	pl
 8004fb4:	6963      	ldrpl	r3, [r4, #20]
 8004fb6:	60a3      	str	r3, [r4, #8]
 8004fb8:	6923      	ldr	r3, [r4, #16]
 8004fba:	b95b      	cbnz	r3, 8004fd4 <__swsetup_r+0xc8>
 8004fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc0:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004fc4:	b280      	uxth	r0, r0
 8004fc6:	b130      	cbz	r0, 8004fd6 <__swsetup_r+0xca>
 8004fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	20000140 	.word	0x20000140
 8004fdc:	08007c18 	.word	0x08007c18
 8004fe0:	08007c38 	.word	0x08007c38
 8004fe4:	08007c58 	.word	0x08007c58

08004fe8 <quorem>:
 8004fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	6903      	ldr	r3, [r0, #16]
 8004fee:	690c      	ldr	r4, [r1, #16]
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	dc7f      	bgt.n	80050f6 <quorem+0x10e>
 8004ff6:	3c01      	subs	r4, #1
 8004ff8:	f101 0714 	add.w	r7, r1, #20
 8004ffc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005000:	f100 0614 	add.w	r6, r0, #20
 8005004:	eb06 030e 	add.w	r3, r6, lr
 8005008:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005012:	3501      	adds	r5, #1
 8005014:	fbb3 f5f5 	udiv	r5, r3, r5
 8005018:	eb07 090e 	add.w	r9, r7, lr
 800501c:	b3c5      	cbz	r5, 8005090 <quorem+0xa8>
 800501e:	f04f 0a00 	mov.w	sl, #0
 8005022:	4638      	mov	r0, r7
 8005024:	46b4      	mov	ip, r6
 8005026:	46d3      	mov	fp, sl
 8005028:	f850 3b04 	ldr.w	r3, [r0], #4
 800502c:	b29a      	uxth	r2, r3
 800502e:	fb05 a202 	mla	r2, r5, r2, sl
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005038:	fb05 a303 	mla	r3, r5, r3, sl
 800503c:	b292      	uxth	r2, r2
 800503e:	ebc2 0b0b 	rsb	fp, r2, fp
 8005042:	f8bc 2000 	ldrh.w	r2, [ip]
 8005046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800504a:	445a      	add	r2, fp
 800504c:	fa1f fb83 	uxth.w	fp, r3
 8005050:	f8dc 3000 	ldr.w	r3, [ip]
 8005054:	4581      	cmp	r9, r0
 8005056:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800505a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800505e:	b292      	uxth	r2, r2
 8005060:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005064:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005068:	f84c 2b04 	str.w	r2, [ip], #4
 800506c:	d2dc      	bcs.n	8005028 <quorem+0x40>
 800506e:	f856 300e 	ldr.w	r3, [r6, lr]
 8005072:	b96b      	cbnz	r3, 8005090 <quorem+0xa8>
 8005074:	9b01      	ldr	r3, [sp, #4]
 8005076:	3b04      	subs	r3, #4
 8005078:	429e      	cmp	r6, r3
 800507a:	461a      	mov	r2, r3
 800507c:	d302      	bcc.n	8005084 <quorem+0x9c>
 800507e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005082:	e005      	b.n	8005090 <quorem+0xa8>
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	3b04      	subs	r3, #4
 8005088:	2a00      	cmp	r2, #0
 800508a:	d1f8      	bne.n	800507e <quorem+0x96>
 800508c:	3c01      	subs	r4, #1
 800508e:	e7f3      	b.n	8005078 <quorem+0x90>
 8005090:	4640      	mov	r0, r8
 8005092:	f001 fd56 	bl	8006b42 <__mcmp>
 8005096:	2800      	cmp	r0, #0
 8005098:	db2b      	blt.n	80050f2 <quorem+0x10a>
 800509a:	4630      	mov	r0, r6
 800509c:	3501      	adds	r5, #1
 800509e:	f04f 0e00 	mov.w	lr, #0
 80050a2:	f857 2b04 	ldr.w	r2, [r7], #4
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	b291      	uxth	r1, r2
 80050aa:	ebc1 0e0e 	rsb	lr, r1, lr
 80050ae:	0c12      	lsrs	r2, r2, #16
 80050b0:	b299      	uxth	r1, r3
 80050b2:	4471      	add	r1, lr
 80050b4:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80050b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80050bc:	b289      	uxth	r1, r1
 80050be:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80050c2:	45b9      	cmp	r9, r7
 80050c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80050c8:	f840 3b04 	str.w	r3, [r0], #4
 80050cc:	d2e9      	bcs.n	80050a2 <quorem+0xba>
 80050ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80050d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80050d6:	b962      	cbnz	r2, 80050f2 <quorem+0x10a>
 80050d8:	3b04      	subs	r3, #4
 80050da:	429e      	cmp	r6, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	d302      	bcc.n	80050e6 <quorem+0xfe>
 80050e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80050e4:	e005      	b.n	80050f2 <quorem+0x10a>
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	2a00      	cmp	r2, #0
 80050ec:	d1f8      	bne.n	80050e0 <quorem+0xf8>
 80050ee:	3c01      	subs	r4, #1
 80050f0:	e7f3      	b.n	80050da <quorem+0xf2>
 80050f2:	4628      	mov	r0, r5
 80050f4:	e000      	b.n	80050f8 <quorem+0x110>
 80050f6:	2000      	movs	r0, #0
 80050f8:	b003      	add	sp, #12
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005100 <_dtoa_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005106:	b095      	sub	sp, #84	; 0x54
 8005108:	4682      	mov	sl, r0
 800510a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800510c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005110:	b945      	cbnz	r5, 8005124 <_dtoa_r+0x24>
 8005112:	2010      	movs	r0, #16
 8005114:	f001 fa98 	bl	8006648 <malloc>
 8005118:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800511c:	6045      	str	r5, [r0, #4]
 800511e:	6085      	str	r5, [r0, #8]
 8005120:	6005      	str	r5, [r0, #0]
 8005122:	60c5      	str	r5, [r0, #12]
 8005124:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	b159      	cbz	r1, 8005144 <_dtoa_r+0x44>
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	2301      	movs	r3, #1
 8005130:	4093      	lsls	r3, r2
 8005132:	604a      	str	r2, [r1, #4]
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	4650      	mov	r0, sl
 8005138:	f001 faee 	bl	8006718 <_Bfree>
 800513c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	4aa0      	ldr	r2, [pc, #640]	; (80053c8 <_dtoa_r+0x2c8>)
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfbd      	ittte	lt
 800514c:	2301      	movlt	r3, #1
 800514e:	6023      	strlt	r3, [r4, #0]
 8005150:	9b03      	ldrlt	r3, [sp, #12]
 8005152:	2300      	movge	r3, #0
 8005154:	bfbc      	itt	lt
 8005156:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800515a:	9303      	strlt	r3, [sp, #12]
 800515c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005160:	bfa8      	it	ge
 8005162:	6023      	strge	r3, [r4, #0]
 8005164:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005168:	0d1b      	lsrs	r3, r3, #20
 800516a:	051b      	lsls	r3, r3, #20
 800516c:	4293      	cmp	r3, r2
 800516e:	d11d      	bne.n	80051ac <_dtoa_r+0xac>
 8005170:	f242 730f 	movw	r3, #9999	; 0x270f
 8005174:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	b943      	cbnz	r3, 800518e <_dtoa_r+0x8e>
 800517c:	4a93      	ldr	r2, [pc, #588]	; (80053cc <_dtoa_r+0x2cc>)
 800517e:	4b94      	ldr	r3, [pc, #592]	; (80053d0 <_dtoa_r+0x2d0>)
 8005180:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005184:	2800      	cmp	r0, #0
 8005186:	bf14      	ite	ne
 8005188:	4618      	movne	r0, r3
 800518a:	4610      	moveq	r0, r2
 800518c:	e000      	b.n	8005190 <_dtoa_r+0x90>
 800518e:	4890      	ldr	r0, [pc, #576]	; (80053d0 <_dtoa_r+0x2d0>)
 8005190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8546 	beq.w	8005c24 <_dtoa_r+0xb24>
 8005198:	78c3      	ldrb	r3, [r0, #3]
 800519a:	b113      	cbz	r3, 80051a2 <_dtoa_r+0xa2>
 800519c:	f100 0308 	add.w	r3, r0, #8
 80051a0:	e000      	b.n	80051a4 <_dtoa_r+0xa4>
 80051a2:	1cc3      	adds	r3, r0, #3
 80051a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	f000 bd3c 	b.w	8005c24 <_dtoa_r+0xb24>
 80051ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fb fc00 	bl	80009bc <__aeabi_dcmpeq>
 80051bc:	4607      	mov	r7, r0
 80051be:	b158      	cbz	r0, 80051d8 <_dtoa_r+0xd8>
 80051c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051c2:	2301      	movs	r3, #1
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 851e 	beq.w	8005c0a <_dtoa_r+0xb0a>
 80051ce:	4881      	ldr	r0, [pc, #516]	; (80053d4 <_dtoa_r+0x2d4>)
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	3801      	subs	r0, #1
 80051d4:	f000 bd26 	b.w	8005c24 <_dtoa_r+0xb24>
 80051d8:	ab12      	add	r3, sp, #72	; 0x48
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	ab13      	add	r3, sp, #76	; 0x4c
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4622      	mov	r2, r4
 80051e2:	462b      	mov	r3, r5
 80051e4:	4650      	mov	r0, sl
 80051e6:	f001 fd98 	bl	8006d1a <__d2b>
 80051ea:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80051ee:	9004      	str	r0, [sp, #16]
 80051f0:	b156      	cbz	r6, 8005208 <_dtoa_r+0x108>
 80051f2:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80051f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80051fa:	4620      	mov	r0, r4
 80051fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005200:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005204:	9711      	str	r7, [sp, #68]	; 0x44
 8005206:	e01d      	b.n	8005244 <_dtoa_r+0x144>
 8005208:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800520a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800520c:	441e      	add	r6, r3
 800520e:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005212:	2b20      	cmp	r3, #32
 8005214:	dd0a      	ble.n	800522c <_dtoa_r+0x12c>
 8005216:	9a02      	ldr	r2, [sp, #8]
 8005218:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800521c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005220:	fa22 f000 	lsr.w	r0, r2, r0
 8005224:	fa08 f303 	lsl.w	r3, r8, r3
 8005228:	4318      	orrs	r0, r3
 800522a:	e004      	b.n	8005236 <_dtoa_r+0x136>
 800522c:	f1c3 0020 	rsb	r0, r3, #32
 8005230:	9b02      	ldr	r3, [sp, #8]
 8005232:	fa03 f000 	lsl.w	r0, r3, r0
 8005236:	f7fb f8e3 	bl	8000400 <__aeabi_ui2d>
 800523a:	2301      	movs	r3, #1
 800523c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005240:	3e01      	subs	r6, #1
 8005242:	9311      	str	r3, [sp, #68]	; 0x44
 8005244:	2200      	movs	r2, #0
 8005246:	4b64      	ldr	r3, [pc, #400]	; (80053d8 <_dtoa_r+0x2d8>)
 8005248:	f7fa ff9c 	bl	8000184 <__aeabi_dsub>
 800524c:	a358      	add	r3, pc, #352	; (adr r3, 80053b0 <_dtoa_r+0x2b0>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fb f94b 	bl	80004ec <__aeabi_dmul>
 8005256:	a358      	add	r3, pc, #352	; (adr r3, 80053b8 <_dtoa_r+0x2b8>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fa ff94 	bl	8000188 <__adddf3>
 8005260:	4604      	mov	r4, r0
 8005262:	4630      	mov	r0, r6
 8005264:	460d      	mov	r5, r1
 8005266:	f7fb f8db 	bl	8000420 <__aeabi_i2d>
 800526a:	a355      	add	r3, pc, #340	; (adr r3, 80053c0 <_dtoa_r+0x2c0>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f7fb f93c 	bl	80004ec <__aeabi_dmul>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4620      	mov	r0, r4
 800527a:	4629      	mov	r1, r5
 800527c:	f7fa ff84 	bl	8000188 <__adddf3>
 8005280:	4604      	mov	r4, r0
 8005282:	460d      	mov	r5, r1
 8005284:	f7fb fbe2 	bl	8000a4c <__aeabi_d2iz>
 8005288:	2200      	movs	r2, #0
 800528a:	4683      	mov	fp, r0
 800528c:	2300      	movs	r3, #0
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f7fb fb9d 	bl	80009d0 <__aeabi_dcmplt>
 8005296:	b158      	cbz	r0, 80052b0 <_dtoa_r+0x1b0>
 8005298:	4658      	mov	r0, fp
 800529a:	f7fb f8c1 	bl	8000420 <__aeabi_i2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb fb89 	bl	80009bc <__aeabi_dcmpeq>
 80052aa:	b908      	cbnz	r0, 80052b0 <_dtoa_r+0x1b0>
 80052ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80052b0:	f1bb 0f16 	cmp.w	fp, #22
 80052b4:	d80d      	bhi.n	80052d2 <_dtoa_r+0x1d2>
 80052b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ba:	4948      	ldr	r1, [pc, #288]	; (80053dc <_dtoa_r+0x2dc>)
 80052bc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80052c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052c4:	f7fb fba2 	bl	8000a0c <__aeabi_dcmpgt>
 80052c8:	b130      	cbz	r0, 80052d8 <_dtoa_r+0x1d8>
 80052ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <_dtoa_r+0x1d4>
 80052d2:	2301      	movs	r3, #1
 80052d4:	9310      	str	r3, [sp, #64]	; 0x40
 80052d6:	e000      	b.n	80052da <_dtoa_r+0x1da>
 80052d8:	9010      	str	r0, [sp, #64]	; 0x40
 80052da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052dc:	1b9e      	subs	r6, r3, r6
 80052de:	1e73      	subs	r3, r6, #1
 80052e0:	9307      	str	r3, [sp, #28]
 80052e2:	bf43      	ittte	mi
 80052e4:	f1c3 0800 	rsbmi	r8, r3, #0
 80052e8:	2300      	movmi	r3, #0
 80052ea:	9307      	strmi	r3, [sp, #28]
 80052ec:	f04f 0800 	movpl.w	r8, #0
 80052f0:	f1bb 0f00 	cmp.w	fp, #0
 80052f4:	db06      	blt.n	8005304 <_dtoa_r+0x204>
 80052f6:	9b07      	ldr	r3, [sp, #28]
 80052f8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80052fc:	445b      	add	r3, fp
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	2700      	movs	r7, #0
 8005302:	e005      	b.n	8005310 <_dtoa_r+0x210>
 8005304:	2300      	movs	r3, #0
 8005306:	ebcb 0808 	rsb	r8, fp, r8
 800530a:	f1cb 0700 	rsb	r7, fp, #0
 800530e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005312:	2b09      	cmp	r3, #9
 8005314:	d828      	bhi.n	8005368 <_dtoa_r+0x268>
 8005316:	2b05      	cmp	r3, #5
 8005318:	bfc4      	itt	gt
 800531a:	3b04      	subgt	r3, #4
 800531c:	931e      	strgt	r3, [sp, #120]	; 0x78
 800531e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005320:	bfc8      	it	gt
 8005322:	2500      	movgt	r5, #0
 8005324:	f1a3 0302 	sub.w	r3, r3, #2
 8005328:	bfd8      	it	le
 800532a:	2501      	movle	r5, #1
 800532c:	2b03      	cmp	r3, #3
 800532e:	d820      	bhi.n	8005372 <_dtoa_r+0x272>
 8005330:	e8df f003 	tbb	[pc, r3]
 8005334:	04020e06 	.word	0x04020e06
 8005338:	2301      	movs	r3, #1
 800533a:	e002      	b.n	8005342 <_dtoa_r+0x242>
 800533c:	2301      	movs	r3, #1
 800533e:	e008      	b.n	8005352 <_dtoa_r+0x252>
 8005340:	2300      	movs	r3, #0
 8005342:	930a      	str	r3, [sp, #40]	; 0x28
 8005344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd1d      	ble.n	8005386 <_dtoa_r+0x286>
 800534a:	4699      	mov	r9, r3
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	e021      	b.n	8005394 <_dtoa_r+0x294>
 8005350:	2300      	movs	r3, #0
 8005352:	930a      	str	r3, [sp, #40]	; 0x28
 8005354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005356:	eb0b 0903 	add.w	r9, fp, r3
 800535a:	f109 0301 	add.w	r3, r9, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	9305      	str	r3, [sp, #20]
 8005362:	bfb8      	it	lt
 8005364:	2301      	movlt	r3, #1
 8005366:	e015      	b.n	8005394 <_dtoa_r+0x294>
 8005368:	2501      	movs	r5, #1
 800536a:	2300      	movs	r3, #0
 800536c:	931e      	str	r3, [sp, #120]	; 0x78
 800536e:	950a      	str	r5, [sp, #40]	; 0x28
 8005370:	e001      	b.n	8005376 <_dtoa_r+0x276>
 8005372:	2301      	movs	r3, #1
 8005374:	930a      	str	r3, [sp, #40]	; 0x28
 8005376:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800537a:	2200      	movs	r2, #0
 800537c:	f8cd 9014 	str.w	r9, [sp, #20]
 8005380:	2312      	movs	r3, #18
 8005382:	921f      	str	r2, [sp, #124]	; 0x7c
 8005384:	e006      	b.n	8005394 <_dtoa_r+0x294>
 8005386:	f04f 0901 	mov.w	r9, #1
 800538a:	464b      	mov	r3, r9
 800538c:	f8cd 9014 	str.w	r9, [sp, #20]
 8005390:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005394:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8005398:	2200      	movs	r2, #0
 800539a:	6062      	str	r2, [r4, #4]
 800539c:	2104      	movs	r1, #4
 800539e:	f101 0214 	add.w	r2, r1, #20
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d81c      	bhi.n	80053e0 <_dtoa_r+0x2e0>
 80053a6:	6862      	ldr	r2, [r4, #4]
 80053a8:	0049      	lsls	r1, r1, #1
 80053aa:	3201      	adds	r2, #1
 80053ac:	6062      	str	r2, [r4, #4]
 80053ae:	e7f6      	b.n	800539e <_dtoa_r+0x29e>
 80053b0:	636f4361 	.word	0x636f4361
 80053b4:	3fd287a7 	.word	0x3fd287a7
 80053b8:	8b60c8b3 	.word	0x8b60c8b3
 80053bc:	3fc68a28 	.word	0x3fc68a28
 80053c0:	509f79fb 	.word	0x509f79fb
 80053c4:	3fd34413 	.word	0x3fd34413
 80053c8:	7ff00000 	.word	0x7ff00000
 80053cc:	08007c08 	.word	0x08007c08
 80053d0:	08007c11 	.word	0x08007c11
 80053d4:	08007b8d 	.word	0x08007b8d
 80053d8:	3ff80000 	.word	0x3ff80000
 80053dc:	08007c88 	.word	0x08007c88
 80053e0:	6861      	ldr	r1, [r4, #4]
 80053e2:	4650      	mov	r0, sl
 80053e4:	f001 f963 	bl	80066ae <_Balloc>
 80053e8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80053ec:	6020      	str	r0, [r4, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	9306      	str	r3, [sp, #24]
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	2b0e      	cmp	r3, #14
 80053f6:	f200 815b 	bhi.w	80056b0 <_dtoa_r+0x5b0>
 80053fa:	2d00      	cmp	r5, #0
 80053fc:	f000 8158 	beq.w	80056b0 <_dtoa_r+0x5b0>
 8005400:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8005404:	f1bb 0f00 	cmp.w	fp, #0
 8005408:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 800540c:	dd30      	ble.n	8005470 <_dtoa_r+0x370>
 800540e:	4a9f      	ldr	r2, [pc, #636]	; (800568c <_dtoa_r+0x58c>)
 8005410:	f00b 030f 	and.w	r3, fp, #15
 8005414:	ea4f 152b 	mov.w	r5, fp, asr #4
 8005418:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800541c:	06e8      	lsls	r0, r5, #27
 800541e:	cb18      	ldmia	r3, {r3, r4}
 8005420:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005424:	d50c      	bpl.n	8005440 <_dtoa_r+0x340>
 8005426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800542a:	4b99      	ldr	r3, [pc, #612]	; (8005690 <_dtoa_r+0x590>)
 800542c:	f005 050f 	and.w	r5, r5, #15
 8005430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005434:	f7fb f984 	bl	8000740 <__aeabi_ddiv>
 8005438:	2403      	movs	r4, #3
 800543a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800543e:	e000      	b.n	8005442 <_dtoa_r+0x342>
 8005440:	2402      	movs	r4, #2
 8005442:	4e93      	ldr	r6, [pc, #588]	; (8005690 <_dtoa_r+0x590>)
 8005444:	b16d      	cbz	r5, 8005462 <_dtoa_r+0x362>
 8005446:	07e9      	lsls	r1, r5, #31
 8005448:	d508      	bpl.n	800545c <_dtoa_r+0x35c>
 800544a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800544e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005452:	f7fb f84b 	bl	80004ec <__aeabi_dmul>
 8005456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800545a:	3401      	adds	r4, #1
 800545c:	106d      	asrs	r5, r5, #1
 800545e:	3608      	adds	r6, #8
 8005460:	e7f0      	b.n	8005444 <_dtoa_r+0x344>
 8005462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800546a:	f7fb f969 	bl	8000740 <__aeabi_ddiv>
 800546e:	e020      	b.n	80054b2 <_dtoa_r+0x3b2>
 8005470:	f1cb 0500 	rsb	r5, fp, #0
 8005474:	b305      	cbz	r5, 80054b8 <_dtoa_r+0x3b8>
 8005476:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800547a:	4b84      	ldr	r3, [pc, #528]	; (800568c <_dtoa_r+0x58c>)
 800547c:	f005 020f 	and.w	r2, r5, #15
 8005480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fb f830 	bl	80004ec <__aeabi_dmul>
 800548c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005490:	4e7f      	ldr	r6, [pc, #508]	; (8005690 <_dtoa_r+0x590>)
 8005492:	112d      	asrs	r5, r5, #4
 8005494:	2300      	movs	r3, #0
 8005496:	2402      	movs	r4, #2
 8005498:	b155      	cbz	r5, 80054b0 <_dtoa_r+0x3b0>
 800549a:	07ea      	lsls	r2, r5, #31
 800549c:	d505      	bpl.n	80054aa <_dtoa_r+0x3aa>
 800549e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054a2:	f7fb f823 	bl	80004ec <__aeabi_dmul>
 80054a6:	3401      	adds	r4, #1
 80054a8:	2301      	movs	r3, #1
 80054aa:	106d      	asrs	r5, r5, #1
 80054ac:	3608      	adds	r6, #8
 80054ae:	e7f3      	b.n	8005498 <_dtoa_r+0x398>
 80054b0:	b11b      	cbz	r3, 80054ba <_dtoa_r+0x3ba>
 80054b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b6:	e000      	b.n	80054ba <_dtoa_r+0x3ba>
 80054b8:	2402      	movs	r4, #2
 80054ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054bc:	b1e3      	cbz	r3, 80054f8 <_dtoa_r+0x3f8>
 80054be:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b73      	ldr	r3, [pc, #460]	; (8005694 <_dtoa_r+0x594>)
 80054c6:	4628      	mov	r0, r5
 80054c8:	4631      	mov	r1, r6
 80054ca:	f7fb fa81 	bl	80009d0 <__aeabi_dcmplt>
 80054ce:	b198      	cbz	r0, 80054f8 <_dtoa_r+0x3f8>
 80054d0:	9b05      	ldr	r3, [sp, #20]
 80054d2:	b18b      	cbz	r3, 80054f8 <_dtoa_r+0x3f8>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	f340 80e6 	ble.w	80056a8 <_dtoa_r+0x5a8>
 80054dc:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80054e0:	9308      	str	r3, [sp, #32]
 80054e2:	4631      	mov	r1, r6
 80054e4:	2200      	movs	r2, #0
 80054e6:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <_dtoa_r+0x598>)
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7fa ffff 	bl	80004ec <__aeabi_dmul>
 80054ee:	3401      	adds	r4, #1
 80054f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f4:	464e      	mov	r6, r9
 80054f6:	e002      	b.n	80054fe <_dtoa_r+0x3fe>
 80054f8:	9e05      	ldr	r6, [sp, #20]
 80054fa:	f8cd b020 	str.w	fp, [sp, #32]
 80054fe:	4620      	mov	r0, r4
 8005500:	f7fa ff8e 	bl	8000420 <__aeabi_i2d>
 8005504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005508:	f7fa fff0 	bl	80004ec <__aeabi_dmul>
 800550c:	4b63      	ldr	r3, [pc, #396]	; (800569c <_dtoa_r+0x59c>)
 800550e:	2200      	movs	r2, #0
 8005510:	f7fa fe3a 	bl	8000188 <__adddf3>
 8005514:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005518:	4604      	mov	r4, r0
 800551a:	930c      	str	r3, [sp, #48]	; 0x30
 800551c:	461d      	mov	r5, r3
 800551e:	b9d6      	cbnz	r6, 8005556 <_dtoa_r+0x456>
 8005520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	4b5e      	ldr	r3, [pc, #376]	; (80056a0 <_dtoa_r+0x5a0>)
 8005528:	f7fa fe2c 	bl	8000184 <__aeabi_dsub>
 800552c:	4622      	mov	r2, r4
 800552e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005534:	f7fb fa6a 	bl	8000a0c <__aeabi_dcmpgt>
 8005538:	2800      	cmp	r0, #0
 800553a:	f040 823f 	bne.w	80059bc <_dtoa_r+0x8bc>
 800553e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005540:	4622      	mov	r2, r4
 8005542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554a:	f7fb fa41 	bl	80009d0 <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	f040 822b 	bne.w	80059aa <_dtoa_r+0x8aa>
 8005554:	e0a8      	b.n	80056a8 <_dtoa_r+0x5a8>
 8005556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005558:	4b4c      	ldr	r3, [pc, #304]	; (800568c <_dtoa_r+0x58c>)
 800555a:	1e71      	subs	r1, r6, #1
 800555c:	2a00      	cmp	r2, #0
 800555e:	d049      	beq.n	80055f4 <_dtoa_r+0x4f4>
 8005560:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	2000      	movs	r0, #0
 800556a:	494e      	ldr	r1, [pc, #312]	; (80056a4 <_dtoa_r+0x5a4>)
 800556c:	f7fb f8e8 	bl	8000740 <__aeabi_ddiv>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fa fe06 	bl	8000184 <__aeabi_dsub>
 8005578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800557c:	9c06      	ldr	r4, [sp, #24]
 800557e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005582:	f7fb fa63 	bl	8000a4c <__aeabi_d2iz>
 8005586:	4605      	mov	r5, r0
 8005588:	f7fa ff4a 	bl	8000420 <__aeabi_i2d>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005594:	f7fa fdf6 	bl	8000184 <__aeabi_dsub>
 8005598:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800559c:	3530      	adds	r5, #48	; 0x30
 800559e:	f804 5b01 	strb.w	r5, [r4], #1
 80055a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055a6:	f7fb fa13 	bl	80009d0 <__aeabi_dcmplt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	f040 831d 	bne.w	8005bea <_dtoa_r+0xaea>
 80055b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b4:	2000      	movs	r0, #0
 80055b6:	4937      	ldr	r1, [pc, #220]	; (8005694 <_dtoa_r+0x594>)
 80055b8:	f7fa fde4 	bl	8000184 <__aeabi_dsub>
 80055bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055c0:	f7fb fa06 	bl	80009d0 <__aeabi_dcmplt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 80d1 	bne.w	800576c <_dtoa_r+0x66c>
 80055ca:	9b06      	ldr	r3, [sp, #24]
 80055cc:	1ae3      	subs	r3, r4, r3
 80055ce:	42b3      	cmp	r3, r6
 80055d0:	da6a      	bge.n	80056a8 <_dtoa_r+0x5a8>
 80055d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d6:	2200      	movs	r2, #0
 80055d8:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <_dtoa_r+0x598>)
 80055da:	f7fa ff87 	bl	80004ec <__aeabi_dmul>
 80055de:	2200      	movs	r2, #0
 80055e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e8:	4b2b      	ldr	r3, [pc, #172]	; (8005698 <_dtoa_r+0x598>)
 80055ea:	f7fa ff7f 	bl	80004ec <__aeabi_dmul>
 80055ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f2:	e7c4      	b.n	800557e <_dtoa_r+0x47e>
 80055f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80055f8:	4622      	mov	r2, r4
 80055fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055fe:	462b      	mov	r3, r5
 8005600:	f7fa ff74 	bl	80004ec <__aeabi_dmul>
 8005604:	9b06      	ldr	r3, [sp, #24]
 8005606:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800560a:	461d      	mov	r5, r3
 800560c:	199c      	adds	r4, r3, r6
 800560e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005612:	f7fb fa1b 	bl	8000a4c <__aeabi_d2iz>
 8005616:	4606      	mov	r6, r0
 8005618:	f7fa ff02 	bl	8000420 <__aeabi_i2d>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005624:	f7fa fdae 	bl	8000184 <__aeabi_dsub>
 8005628:	3630      	adds	r6, #48	; 0x30
 800562a:	f805 6b01 	strb.w	r6, [r5], #1
 800562e:	42ac      	cmp	r4, r5
 8005630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	d122      	bne.n	8005680 <_dtoa_r+0x580>
 800563a:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <_dtoa_r+0x5a4>)
 800563c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005640:	f7fa fda2 	bl	8000188 <__adddf3>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800564c:	f7fb f9de 	bl	8000a0c <__aeabi_dcmpgt>
 8005650:	2800      	cmp	r0, #0
 8005652:	f040 808b 	bne.w	800576c <_dtoa_r+0x66c>
 8005656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800565a:	2000      	movs	r0, #0
 800565c:	4911      	ldr	r1, [pc, #68]	; (80056a4 <_dtoa_r+0x5a4>)
 800565e:	f7fa fd91 	bl	8000184 <__aeabi_dsub>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800566a:	f7fb f9b1 	bl	80009d0 <__aeabi_dcmplt>
 800566e:	b1d8      	cbz	r0, 80056a8 <_dtoa_r+0x5a8>
 8005670:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005674:	1e62      	subs	r2, r4, #1
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	f040 82b7 	bne.w	8005bea <_dtoa_r+0xaea>
 800567c:	4614      	mov	r4, r2
 800567e:	e7f7      	b.n	8005670 <_dtoa_r+0x570>
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <_dtoa_r+0x598>)
 8005682:	f7fa ff33 	bl	80004ec <__aeabi_dmul>
 8005686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800568a:	e7c0      	b.n	800560e <_dtoa_r+0x50e>
 800568c:	08007c88 	.word	0x08007c88
 8005690:	08007d50 	.word	0x08007d50
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	40240000 	.word	0x40240000
 800569c:	401c0000 	.word	0x401c0000
 80056a0:	40140000 	.word	0x40140000
 80056a4:	3fe00000 	.word	0x3fe00000
 80056a8:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80056ac:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	db7c      	blt.n	80057b0 <_dtoa_r+0x6b0>
 80056b6:	f1bb 0f0e 	cmp.w	fp, #14
 80056ba:	dc79      	bgt.n	80057b0 <_dtoa_r+0x6b0>
 80056bc:	4bab      	ldr	r3, [pc, #684]	; (800596c <_dtoa_r+0x86c>)
 80056be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056c2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80056c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da14      	bge.n	80056f6 <_dtoa_r+0x5f6>
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc11      	bgt.n	80056f6 <_dtoa_r+0x5f6>
 80056d2:	f040 816c 	bne.w	80059ae <_dtoa_r+0x8ae>
 80056d6:	2200      	movs	r2, #0
 80056d8:	4ba5      	ldr	r3, [pc, #660]	; (8005970 <_dtoa_r+0x870>)
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fa ff05 	bl	80004ec <__aeabi_dmul>
 80056e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e6:	f7fb f987 	bl	80009f8 <__aeabi_dcmpge>
 80056ea:	9d05      	ldr	r5, [sp, #20]
 80056ec:	462e      	mov	r6, r5
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 815f 	bne.w	80059b2 <_dtoa_r+0x8b2>
 80056f4:	e165      	b.n	80059c2 <_dtoa_r+0x8c2>
 80056f6:	9c06      	ldr	r4, [sp, #24]
 80056f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fb f81c 	bl	8000740 <__aeabi_ddiv>
 8005708:	f7fb f9a0 	bl	8000a4c <__aeabi_d2iz>
 800570c:	4605      	mov	r5, r0
 800570e:	f7fa fe87 	bl	8000420 <__aeabi_i2d>
 8005712:	4632      	mov	r2, r6
 8005714:	463b      	mov	r3, r7
 8005716:	f7fa fee9 	bl	80004ec <__aeabi_dmul>
 800571a:	460b      	mov	r3, r1
 800571c:	4602      	mov	r2, r0
 800571e:	4649      	mov	r1, r9
 8005720:	4640      	mov	r0, r8
 8005722:	f7fa fd2f 	bl	8000184 <__aeabi_dsub>
 8005726:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800572a:	9b06      	ldr	r3, [sp, #24]
 800572c:	f804 eb01 	strb.w	lr, [r4], #1
 8005730:	ebc3 0e04 	rsb	lr, r3, r4
 8005734:	9b05      	ldr	r3, [sp, #20]
 8005736:	4573      	cmp	r3, lr
 8005738:	d12d      	bne.n	8005796 <_dtoa_r+0x696>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	f7fa fd23 	bl	8000188 <__adddf3>
 8005742:	4680      	mov	r8, r0
 8005744:	4689      	mov	r9, r1
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4630      	mov	r0, r6
 800574c:	4639      	mov	r1, r7
 800574e:	f7fb f93f 	bl	80009d0 <__aeabi_dcmplt>
 8005752:	b978      	cbnz	r0, 8005774 <_dtoa_r+0x674>
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	f7fb f92e 	bl	80009bc <__aeabi_dcmpeq>
 8005760:	2800      	cmp	r0, #0
 8005762:	f000 8244 	beq.w	8005bee <_dtoa_r+0xaee>
 8005766:	07eb      	lsls	r3, r5, #31
 8005768:	d404      	bmi.n	8005774 <_dtoa_r+0x674>
 800576a:	e240      	b.n	8005bee <_dtoa_r+0xaee>
 800576c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005770:	e000      	b.n	8005774 <_dtoa_r+0x674>
 8005772:	461c      	mov	r4, r3
 8005774:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005778:	1e63      	subs	r3, r4, #1
 800577a:	2a39      	cmp	r2, #57	; 0x39
 800577c:	d107      	bne.n	800578e <_dtoa_r+0x68e>
 800577e:	9a06      	ldr	r2, [sp, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d1f6      	bne.n	8005772 <_dtoa_r+0x672>
 8005784:	9906      	ldr	r1, [sp, #24]
 8005786:	2230      	movs	r2, #48	; 0x30
 8005788:	f10b 0b01 	add.w	fp, fp, #1
 800578c:	700a      	strb	r2, [r1, #0]
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	3201      	adds	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e22b      	b.n	8005bee <_dtoa_r+0xaee>
 8005796:	2200      	movs	r2, #0
 8005798:	4b76      	ldr	r3, [pc, #472]	; (8005974 <_dtoa_r+0x874>)
 800579a:	f7fa fea7 	bl	80004ec <__aeabi_dmul>
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4680      	mov	r8, r0
 80057a4:	4689      	mov	r9, r1
 80057a6:	f7fb f909 	bl	80009bc <__aeabi_dcmpeq>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d0a6      	beq.n	80056fc <_dtoa_r+0x5fc>
 80057ae:	e21e      	b.n	8005bee <_dtoa_r+0xaee>
 80057b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	d02b      	beq.n	800580e <_dtoa_r+0x70e>
 80057b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057b8:	2a01      	cmp	r2, #1
 80057ba:	dc0a      	bgt.n	80057d2 <_dtoa_r+0x6d2>
 80057bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80057be:	b112      	cbz	r2, 80057c6 <_dtoa_r+0x6c6>
 80057c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057c4:	e002      	b.n	80057cc <_dtoa_r+0x6cc>
 80057c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057cc:	463d      	mov	r5, r7
 80057ce:	4644      	mov	r4, r8
 80057d0:	e013      	b.n	80057fa <_dtoa_r+0x6fa>
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	1e5d      	subs	r5, r3, #1
 80057d6:	42af      	cmp	r7, r5
 80057d8:	bfbf      	itttt	lt
 80057da:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80057dc:	1bea      	sublt	r2, r5, r7
 80057de:	189b      	addlt	r3, r3, r2
 80057e0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80057e2:	9b05      	ldr	r3, [sp, #20]
 80057e4:	bfb6      	itet	lt
 80057e6:	462f      	movlt	r7, r5
 80057e8:	1b7d      	subge	r5, r7, r5
 80057ea:	2500      	movlt	r5, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfa7      	ittee	ge
 80057f0:	4644      	movge	r4, r8
 80057f2:	9b05      	ldrge	r3, [sp, #20]
 80057f4:	ebc3 0408 	rsblt	r4, r3, r8
 80057f8:	2300      	movlt	r3, #0
 80057fa:	9a07      	ldr	r2, [sp, #28]
 80057fc:	2101      	movs	r1, #1
 80057fe:	441a      	add	r2, r3
 8005800:	4650      	mov	r0, sl
 8005802:	4498      	add	r8, r3
 8005804:	9207      	str	r2, [sp, #28]
 8005806:	f001 f864 	bl	80068d2 <__i2b>
 800580a:	4606      	mov	r6, r0
 800580c:	e002      	b.n	8005814 <_dtoa_r+0x714>
 800580e:	463d      	mov	r5, r7
 8005810:	4644      	mov	r4, r8
 8005812:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005814:	b15c      	cbz	r4, 800582e <_dtoa_r+0x72e>
 8005816:	9b07      	ldr	r3, [sp, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dd08      	ble.n	800582e <_dtoa_r+0x72e>
 800581c:	42a3      	cmp	r3, r4
 800581e:	bfa8      	it	ge
 8005820:	4623      	movge	r3, r4
 8005822:	9a07      	ldr	r2, [sp, #28]
 8005824:	ebc3 0808 	rsb	r8, r3, r8
 8005828:	1ae4      	subs	r4, r4, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	9307      	str	r3, [sp, #28]
 800582e:	2f00      	cmp	r7, #0
 8005830:	dd1d      	ble.n	800586e <_dtoa_r+0x76e>
 8005832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005834:	b1ab      	cbz	r3, 8005862 <_dtoa_r+0x762>
 8005836:	b18d      	cbz	r5, 800585c <_dtoa_r+0x75c>
 8005838:	4631      	mov	r1, r6
 800583a:	462a      	mov	r2, r5
 800583c:	4650      	mov	r0, sl
 800583e:	f001 f8e1 	bl	8006a04 <__pow5mult>
 8005842:	9a04      	ldr	r2, [sp, #16]
 8005844:	4601      	mov	r1, r0
 8005846:	4606      	mov	r6, r0
 8005848:	4650      	mov	r0, sl
 800584a:	f001 f84b 	bl	80068e4 <__multiply>
 800584e:	9904      	ldr	r1, [sp, #16]
 8005850:	9008      	str	r0, [sp, #32]
 8005852:	4650      	mov	r0, sl
 8005854:	f000 ff60 	bl	8006718 <_Bfree>
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	1b7a      	subs	r2, r7, r5
 800585e:	d006      	beq.n	800586e <_dtoa_r+0x76e>
 8005860:	e000      	b.n	8005864 <_dtoa_r+0x764>
 8005862:	463a      	mov	r2, r7
 8005864:	9904      	ldr	r1, [sp, #16]
 8005866:	4650      	mov	r0, sl
 8005868:	f001 f8cc 	bl	8006a04 <__pow5mult>
 800586c:	9004      	str	r0, [sp, #16]
 800586e:	2101      	movs	r1, #1
 8005870:	4650      	mov	r0, sl
 8005872:	f001 f82e 	bl	80068d2 <__i2b>
 8005876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005878:	4605      	mov	r5, r0
 800587a:	b35b      	cbz	r3, 80058d4 <_dtoa_r+0x7d4>
 800587c:	461a      	mov	r2, r3
 800587e:	4601      	mov	r1, r0
 8005880:	4650      	mov	r0, sl
 8005882:	f001 f8bf 	bl	8006a04 <__pow5mult>
 8005886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005888:	4605      	mov	r5, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	dc18      	bgt.n	80058c0 <_dtoa_r+0x7c0>
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	b983      	cbnz	r3, 80058b4 <_dtoa_r+0x7b4>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005898:	b973      	cbnz	r3, 80058b8 <_dtoa_r+0x7b8>
 800589a:	9b03      	ldr	r3, [sp, #12]
 800589c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80058a0:	0d3f      	lsrs	r7, r7, #20
 80058a2:	053f      	lsls	r7, r7, #20
 80058a4:	b14f      	cbz	r7, 80058ba <_dtoa_r+0x7ba>
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	f108 0801 	add.w	r8, r8, #1
 80058ac:	3301      	adds	r3, #1
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	2701      	movs	r7, #1
 80058b2:	e002      	b.n	80058ba <_dtoa_r+0x7ba>
 80058b4:	2700      	movs	r7, #0
 80058b6:	e000      	b.n	80058ba <_dtoa_r+0x7ba>
 80058b8:	9f02      	ldr	r7, [sp, #8]
 80058ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058bc:	b173      	cbz	r3, 80058dc <_dtoa_r+0x7dc>
 80058be:	e000      	b.n	80058c2 <_dtoa_r+0x7c2>
 80058c0:	2700      	movs	r7, #0
 80058c2:	692b      	ldr	r3, [r5, #16]
 80058c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80058c8:	6918      	ldr	r0, [r3, #16]
 80058ca:	f000 ffb5 	bl	8006838 <__hi0bits>
 80058ce:	f1c0 0020 	rsb	r0, r0, #32
 80058d2:	e004      	b.n	80058de <_dtoa_r+0x7de>
 80058d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	ddd9      	ble.n	800588e <_dtoa_r+0x78e>
 80058da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80058dc:	2001      	movs	r0, #1
 80058de:	9b07      	ldr	r3, [sp, #28]
 80058e0:	4418      	add	r0, r3
 80058e2:	f010 001f 	ands.w	r0, r0, #31
 80058e6:	d008      	beq.n	80058fa <_dtoa_r+0x7fa>
 80058e8:	f1c0 0320 	rsb	r3, r0, #32
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	dd02      	ble.n	80058f6 <_dtoa_r+0x7f6>
 80058f0:	f1c0 001c 	rsb	r0, r0, #28
 80058f4:	e002      	b.n	80058fc <_dtoa_r+0x7fc>
 80058f6:	d006      	beq.n	8005906 <_dtoa_r+0x806>
 80058f8:	4618      	mov	r0, r3
 80058fa:	301c      	adds	r0, #28
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	4480      	add	r8, r0
 8005900:	4403      	add	r3, r0
 8005902:	4404      	add	r4, r0
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	f1b8 0f00 	cmp.w	r8, #0
 800590a:	dd05      	ble.n	8005918 <_dtoa_r+0x818>
 800590c:	4642      	mov	r2, r8
 800590e:	9904      	ldr	r1, [sp, #16]
 8005910:	4650      	mov	r0, sl
 8005912:	f001 f8c5 	bl	8006aa0 <__lshift>
 8005916:	9004      	str	r0, [sp, #16]
 8005918:	9b07      	ldr	r3, [sp, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x82a>
 800591e:	4629      	mov	r1, r5
 8005920:	461a      	mov	r2, r3
 8005922:	4650      	mov	r0, sl
 8005924:	f001 f8bc 	bl	8006aa0 <__lshift>
 8005928:	4605      	mov	r5, r0
 800592a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800592c:	b323      	cbz	r3, 8005978 <_dtoa_r+0x878>
 800592e:	4629      	mov	r1, r5
 8005930:	9804      	ldr	r0, [sp, #16]
 8005932:	f001 f906 	bl	8006b42 <__mcmp>
 8005936:	2800      	cmp	r0, #0
 8005938:	da1e      	bge.n	8005978 <_dtoa_r+0x878>
 800593a:	2300      	movs	r3, #0
 800593c:	220a      	movs	r2, #10
 800593e:	9904      	ldr	r1, [sp, #16]
 8005940:	4650      	mov	r0, sl
 8005942:	f000 ff00 	bl	8006746 <__multadd>
 8005946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005948:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800594c:	9004      	str	r0, [sp, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 815f 	beq.w	8005c12 <_dtoa_r+0xb12>
 8005954:	4631      	mov	r1, r6
 8005956:	2300      	movs	r3, #0
 8005958:	220a      	movs	r2, #10
 800595a:	4650      	mov	r0, sl
 800595c:	f000 fef3 	bl	8006746 <__multadd>
 8005960:	f1b9 0f00 	cmp.w	r9, #0
 8005964:	4606      	mov	r6, r0
 8005966:	dc3f      	bgt.n	80059e8 <_dtoa_r+0x8e8>
 8005968:	e03b      	b.n	80059e2 <_dtoa_r+0x8e2>
 800596a:	bf00      	nop
 800596c:	08007c88 	.word	0x08007c88
 8005970:	40140000 	.word	0x40140000
 8005974:	40240000 	.word	0x40240000
 8005978:	9b05      	ldr	r3, [sp, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dc2b      	bgt.n	80059d6 <_dtoa_r+0x8d6>
 800597e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005980:	2b02      	cmp	r3, #2
 8005982:	dd28      	ble.n	80059d6 <_dtoa_r+0x8d6>
 8005984:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005988:	f1b9 0f00 	cmp.w	r9, #0
 800598c:	d111      	bne.n	80059b2 <_dtoa_r+0x8b2>
 800598e:	4629      	mov	r1, r5
 8005990:	464b      	mov	r3, r9
 8005992:	2205      	movs	r2, #5
 8005994:	4650      	mov	r0, sl
 8005996:	f000 fed6 	bl	8006746 <__multadd>
 800599a:	4601      	mov	r1, r0
 800599c:	4605      	mov	r5, r0
 800599e:	9804      	ldr	r0, [sp, #16]
 80059a0:	f001 f8cf 	bl	8006b42 <__mcmp>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	dc0c      	bgt.n	80059c2 <_dtoa_r+0x8c2>
 80059a8:	e003      	b.n	80059b2 <_dtoa_r+0x8b2>
 80059aa:	4635      	mov	r5, r6
 80059ac:	e000      	b.n	80059b0 <_dtoa_r+0x8b0>
 80059ae:	2500      	movs	r5, #0
 80059b0:	462e      	mov	r6, r5
 80059b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059b4:	9c06      	ldr	r4, [sp, #24]
 80059b6:	ea6f 0b03 	mvn.w	fp, r3
 80059ba:	e009      	b.n	80059d0 <_dtoa_r+0x8d0>
 80059bc:	4635      	mov	r5, r6
 80059be:	f8dd b020 	ldr.w	fp, [sp, #32]
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	9a06      	ldr	r2, [sp, #24]
 80059c6:	1c5c      	adds	r4, r3, #1
 80059c8:	2331      	movs	r3, #49	; 0x31
 80059ca:	7013      	strb	r3, [r2, #0]
 80059cc:	f10b 0b01 	add.w	fp, fp, #1
 80059d0:	9605      	str	r6, [sp, #20]
 80059d2:	2600      	movs	r6, #0
 80059d4:	e0f7      	b.n	8005bc6 <_dtoa_r+0xac6>
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80059dc:	b923      	cbnz	r3, 80059e8 <_dtoa_r+0x8e8>
 80059de:	9c06      	ldr	r4, [sp, #24]
 80059e0:	e0b2      	b.n	8005b48 <_dtoa_r+0xa48>
 80059e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	dccf      	bgt.n	8005988 <_dtoa_r+0x888>
 80059e8:	2c00      	cmp	r4, #0
 80059ea:	dd05      	ble.n	80059f8 <_dtoa_r+0x8f8>
 80059ec:	4631      	mov	r1, r6
 80059ee:	4622      	mov	r2, r4
 80059f0:	4650      	mov	r0, sl
 80059f2:	f001 f855 	bl	8006aa0 <__lshift>
 80059f6:	4606      	mov	r6, r0
 80059f8:	b19f      	cbz	r7, 8005a22 <_dtoa_r+0x922>
 80059fa:	6871      	ldr	r1, [r6, #4]
 80059fc:	4650      	mov	r0, sl
 80059fe:	f000 fe56 	bl	80066ae <_Balloc>
 8005a02:	4604      	mov	r4, r0
 8005a04:	6932      	ldr	r2, [r6, #16]
 8005a06:	f106 010c 	add.w	r1, r6, #12
 8005a0a:	3202      	adds	r2, #2
 8005a0c:	0092      	lsls	r2, r2, #2
 8005a0e:	300c      	adds	r0, #12
 8005a10:	f000 fe42 	bl	8006698 <memcpy>
 8005a14:	2201      	movs	r2, #1
 8005a16:	4621      	mov	r1, r4
 8005a18:	4650      	mov	r0, sl
 8005a1a:	f001 f841 	bl	8006aa0 <__lshift>
 8005a1e:	9005      	str	r0, [sp, #20]
 8005a20:	e000      	b.n	8005a24 <_dtoa_r+0x924>
 8005a22:	9605      	str	r6, [sp, #20]
 8005a24:	9b02      	ldr	r3, [sp, #8]
 8005a26:	9f06      	ldr	r7, [sp, #24]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	4629      	mov	r1, r5
 8005a30:	9804      	ldr	r0, [sp, #16]
 8005a32:	f7ff fad9 	bl	8004fe8 <quorem>
 8005a36:	4631      	mov	r1, r6
 8005a38:	4604      	mov	r4, r0
 8005a3a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a3e:	9804      	ldr	r0, [sp, #16]
 8005a40:	f001 f87f 	bl	8006b42 <__mcmp>
 8005a44:	9a05      	ldr	r2, [sp, #20]
 8005a46:	9002      	str	r0, [sp, #8]
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f001 f895 	bl	8006b7a <__mdiff>
 8005a50:	68c3      	ldr	r3, [r0, #12]
 8005a52:	4602      	mov	r2, r0
 8005a54:	b93b      	cbnz	r3, 8005a66 <_dtoa_r+0x966>
 8005a56:	4601      	mov	r1, r0
 8005a58:	900a      	str	r0, [sp, #40]	; 0x28
 8005a5a:	9804      	ldr	r0, [sp, #16]
 8005a5c:	f001 f871 	bl	8006b42 <__mcmp>
 8005a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a62:	4603      	mov	r3, r0
 8005a64:	e000      	b.n	8005a68 <_dtoa_r+0x968>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6e:	f000 fe53 	bl	8006718 <_Bfree>
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	b953      	cbnz	r3, 8005a8c <_dtoa_r+0x98c>
 8005a76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a78:	b942      	cbnz	r2, 8005a8c <_dtoa_r+0x98c>
 8005a7a:	9a07      	ldr	r2, [sp, #28]
 8005a7c:	b932      	cbnz	r2, 8005a8c <_dtoa_r+0x98c>
 8005a7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a82:	d02a      	beq.n	8005ada <_dtoa_r+0x9da>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dc1c      	bgt.n	8005ac4 <_dtoa_r+0x9c4>
 8005a8a:	e01d      	b.n	8005ac8 <_dtoa_r+0x9c8>
 8005a8c:	9a02      	ldr	r2, [sp, #8]
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	db04      	blt.n	8005a9c <_dtoa_r+0x99c>
 8005a92:	d11b      	bne.n	8005acc <_dtoa_r+0x9cc>
 8005a94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a96:	b9ca      	cbnz	r2, 8005acc <_dtoa_r+0x9cc>
 8005a98:	9a07      	ldr	r2, [sp, #28]
 8005a9a:	b9ba      	cbnz	r2, 8005acc <_dtoa_r+0x9cc>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd13      	ble.n	8005ac8 <_dtoa_r+0x9c8>
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	9904      	ldr	r1, [sp, #16]
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	f000 fffb 	bl	8006aa0 <__lshift>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	9004      	str	r0, [sp, #16]
 8005aae:	f001 f848 	bl	8006b42 <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	dc03      	bgt.n	8005abe <_dtoa_r+0x9be>
 8005ab6:	d107      	bne.n	8005ac8 <_dtoa_r+0x9c8>
 8005ab8:	f018 0f01 	tst.w	r8, #1
 8005abc:	d004      	beq.n	8005ac8 <_dtoa_r+0x9c8>
 8005abe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ac2:	d00a      	beq.n	8005ada <_dtoa_r+0x9da>
 8005ac4:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8005ac8:	1c7c      	adds	r4, r7, #1
 8005aca:	e00c      	b.n	8005ae6 <_dtoa_r+0x9e6>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f107 0401 	add.w	r4, r7, #1
 8005ad2:	dd0b      	ble.n	8005aec <_dtoa_r+0x9ec>
 8005ad4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ad8:	d103      	bne.n	8005ae2 <_dtoa_r+0x9e2>
 8005ada:	2339      	movs	r3, #57	; 0x39
 8005adc:	703b      	strb	r3, [r7, #0]
 8005ade:	3701      	adds	r7, #1
 8005ae0:	e056      	b.n	8005b90 <_dtoa_r+0xa90>
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	f887 8000 	strb.w	r8, [r7]
 8005aea:	e06c      	b.n	8005bc6 <_dtoa_r+0xac6>
 8005aec:	9b06      	ldr	r3, [sp, #24]
 8005aee:	4627      	mov	r7, r4
 8005af0:	1ae3      	subs	r3, r4, r3
 8005af2:	454b      	cmp	r3, r9
 8005af4:	f804 8c01 	strb.w	r8, [r4, #-1]
 8005af8:	d03b      	beq.n	8005b72 <_dtoa_r+0xa72>
 8005afa:	2300      	movs	r3, #0
 8005afc:	220a      	movs	r2, #10
 8005afe:	9904      	ldr	r1, [sp, #16]
 8005b00:	4650      	mov	r0, sl
 8005b02:	f000 fe20 	bl	8006746 <__multadd>
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	9004      	str	r0, [sp, #16]
 8005b0a:	429e      	cmp	r6, r3
 8005b0c:	f04f 020a 	mov.w	r2, #10
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	4631      	mov	r1, r6
 8005b16:	4650      	mov	r0, sl
 8005b18:	d104      	bne.n	8005b24 <_dtoa_r+0xa24>
 8005b1a:	f000 fe14 	bl	8006746 <__multadd>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	9005      	str	r0, [sp, #20]
 8005b22:	e784      	b.n	8005a2e <_dtoa_r+0x92e>
 8005b24:	f000 fe0f 	bl	8006746 <__multadd>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	220a      	movs	r2, #10
 8005b2e:	9905      	ldr	r1, [sp, #20]
 8005b30:	4650      	mov	r0, sl
 8005b32:	f000 fe08 	bl	8006746 <__multadd>
 8005b36:	9005      	str	r0, [sp, #20]
 8005b38:	e779      	b.n	8005a2e <_dtoa_r+0x92e>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	9904      	ldr	r1, [sp, #16]
 8005b40:	4650      	mov	r0, sl
 8005b42:	f000 fe00 	bl	8006746 <__multadd>
 8005b46:	9004      	str	r0, [sp, #16]
 8005b48:	4629      	mov	r1, r5
 8005b4a:	9804      	ldr	r0, [sp, #16]
 8005b4c:	f7ff fa4c 	bl	8004fe8 <quorem>
 8005b50:	9b06      	ldr	r3, [sp, #24]
 8005b52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b56:	f804 8b01 	strb.w	r8, [r4], #1
 8005b5a:	1ae3      	subs	r3, r4, r3
 8005b5c:	454b      	cmp	r3, r9
 8005b5e:	dbec      	blt.n	8005b3a <_dtoa_r+0xa3a>
 8005b60:	9b06      	ldr	r3, [sp, #24]
 8005b62:	9605      	str	r6, [sp, #20]
 8005b64:	f1b9 0f01 	cmp.w	r9, #1
 8005b68:	bfac      	ite	ge
 8005b6a:	444b      	addge	r3, r9
 8005b6c:	3301      	addlt	r3, #1
 8005b6e:	461f      	mov	r7, r3
 8005b70:	2600      	movs	r6, #0
 8005b72:	2201      	movs	r2, #1
 8005b74:	9904      	ldr	r1, [sp, #16]
 8005b76:	4650      	mov	r0, sl
 8005b78:	f000 ff92 	bl	8006aa0 <__lshift>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	9004      	str	r0, [sp, #16]
 8005b80:	f000 ffdf 	bl	8006b42 <__mcmp>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	dc03      	bgt.n	8005b90 <_dtoa_r+0xa90>
 8005b88:	d115      	bne.n	8005bb6 <_dtoa_r+0xab6>
 8005b8a:	f018 0f01 	tst.w	r8, #1
 8005b8e:	d012      	beq.n	8005bb6 <_dtoa_r+0xab6>
 8005b90:	463c      	mov	r4, r7
 8005b92:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005b96:	1e62      	subs	r2, r4, #1
 8005b98:	2b39      	cmp	r3, #57	; 0x39
 8005b9a:	d109      	bne.n	8005bb0 <_dtoa_r+0xab0>
 8005b9c:	9b06      	ldr	r3, [sp, #24]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d104      	bne.n	8005bac <_dtoa_r+0xaac>
 8005ba2:	f10b 0b01 	add.w	fp, fp, #1
 8005ba6:	2331      	movs	r3, #49	; 0x31
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	e002      	b.n	8005bb2 <_dtoa_r+0xab2>
 8005bac:	4614      	mov	r4, r2
 8005bae:	e7f0      	b.n	8005b92 <_dtoa_r+0xa92>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	7013      	strb	r3, [r2, #0]
 8005bb4:	e007      	b.n	8005bc6 <_dtoa_r+0xac6>
 8005bb6:	463c      	mov	r4, r7
 8005bb8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005bbc:	1e62      	subs	r2, r4, #1
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d101      	bne.n	8005bc6 <_dtoa_r+0xac6>
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	e7f8      	b.n	8005bb8 <_dtoa_r+0xab8>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4650      	mov	r0, sl
 8005bca:	f000 fda5 	bl	8006718 <_Bfree>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	b16b      	cbz	r3, 8005bee <_dtoa_r+0xaee>
 8005bd2:	b12e      	cbz	r6, 8005be0 <_dtoa_r+0xae0>
 8005bd4:	429e      	cmp	r6, r3
 8005bd6:	d003      	beq.n	8005be0 <_dtoa_r+0xae0>
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4650      	mov	r0, sl
 8005bdc:	f000 fd9c 	bl	8006718 <_Bfree>
 8005be0:	9905      	ldr	r1, [sp, #20]
 8005be2:	4650      	mov	r0, sl
 8005be4:	f000 fd98 	bl	8006718 <_Bfree>
 8005be8:	e001      	b.n	8005bee <_dtoa_r+0xaee>
 8005bea:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005bee:	9904      	ldr	r1, [sp, #16]
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	f000 fd91 	bl	8006718 <_Bfree>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bfa:	7023      	strb	r3, [r4, #0]
 8005bfc:	f10b 0301 	add.w	r3, fp, #1
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c04:	b11b      	cbz	r3, 8005c0e <_dtoa_r+0xb0e>
 8005c06:	601c      	str	r4, [r3, #0]
 8005c08:	e001      	b.n	8005c0e <_dtoa_r+0xb0e>
 8005c0a:	4808      	ldr	r0, [pc, #32]	; (8005c2c <_dtoa_r+0xb2c>)
 8005c0c:	e00a      	b.n	8005c24 <_dtoa_r+0xb24>
 8005c0e:	9806      	ldr	r0, [sp, #24]
 8005c10:	e008      	b.n	8005c24 <_dtoa_r+0xb24>
 8005c12:	f1b9 0f00 	cmp.w	r9, #0
 8005c16:	f73f aee2 	bgt.w	80059de <_dtoa_r+0x8de>
 8005c1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	f77f aede 	ble.w	80059de <_dtoa_r+0x8de>
 8005c22:	e6b1      	b.n	8005988 <_dtoa_r+0x888>
 8005c24:	b015      	add	sp, #84	; 0x54
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08007b8c 	.word	0x08007b8c

08005c30 <__sflush_r>:
 8005c30:	898a      	ldrh	r2, [r1, #12]
 8005c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c36:	4605      	mov	r5, r0
 8005c38:	0710      	lsls	r0, r2, #28
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	d459      	bmi.n	8005cf2 <__sflush_r+0xc2>
 8005c3e:	684b      	ldr	r3, [r1, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dc02      	bgt.n	8005c4a <__sflush_r+0x1a>
 8005c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dd17      	ble.n	8005c7a <__sflush_r+0x4a>
 8005c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c4c:	b1ae      	cbz	r6, 8005c7a <__sflush_r+0x4a>
 8005c4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c52:	2300      	movs	r3, #0
 8005c54:	b292      	uxth	r2, r2
 8005c56:	682f      	ldr	r7, [r5, #0]
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	b10a      	cbz	r2, 8005c60 <__sflush_r+0x30>
 8005c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c5e:	e015      	b.n	8005c8c <__sflush_r+0x5c>
 8005c60:	6a21      	ldr	r1, [r4, #32]
 8005c62:	2301      	movs	r3, #1
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b0      	blx	r6
 8005c68:	1c41      	adds	r1, r0, #1
 8005c6a:	d10f      	bne.n	8005c8c <__sflush_r+0x5c>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b16b      	cbz	r3, 8005c8c <__sflush_r+0x5c>
 8005c70:	2b1d      	cmp	r3, #29
 8005c72:	d001      	beq.n	8005c78 <__sflush_r+0x48>
 8005c74:	2b16      	cmp	r3, #22
 8005c76:	d103      	bne.n	8005c80 <__sflush_r+0x50>
 8005c78:	602f      	str	r7, [r5, #0]
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	075a      	lsls	r2, r3, #29
 8005c90:	d505      	bpl.n	8005c9e <__sflush_r+0x6e>
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	1ac0      	subs	r0, r0, r3
 8005c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c98:	b10b      	cbz	r3, 8005c9e <__sflush_r+0x6e>
 8005c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c9c:	1ac0      	subs	r0, r0, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca4:	6a21      	ldr	r1, [r4, #32]
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b0      	blx	r6
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	d106      	bne.n	8005cbe <__sflush_r+0x8e>
 8005cb0:	6829      	ldr	r1, [r5, #0]
 8005cb2:	291d      	cmp	r1, #29
 8005cb4:	d839      	bhi.n	8005d2a <__sflush_r+0xfa>
 8005cb6:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <__sflush_r+0x108>)
 8005cb8:	40ca      	lsrs	r2, r1
 8005cba:	07d6      	lsls	r6, r2, #31
 8005cbc:	d535      	bpl.n	8005d2a <__sflush_r+0xfa>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	6062      	str	r2, [r4, #4]
 8005cc2:	6922      	ldr	r2, [r4, #16]
 8005cc4:	04d9      	lsls	r1, r3, #19
 8005cc6:	6022      	str	r2, [r4, #0]
 8005cc8:	d504      	bpl.n	8005cd4 <__sflush_r+0xa4>
 8005cca:	1c42      	adds	r2, r0, #1
 8005ccc:	d101      	bne.n	8005cd2 <__sflush_r+0xa2>
 8005cce:	682b      	ldr	r3, [r5, #0]
 8005cd0:	b903      	cbnz	r3, 8005cd4 <__sflush_r+0xa4>
 8005cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8005cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd6:	602f      	str	r7, [r5, #0]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d0ce      	beq.n	8005c7a <__sflush_r+0x4a>
 8005cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d002      	beq.n	8005cea <__sflush_r+0xba>
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f001 f8d9 	bl	8006e9c <_free_r>
 8005cea:	2000      	movs	r0, #0
 8005cec:	6360      	str	r0, [r4, #52]	; 0x34
 8005cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf2:	690f      	ldr	r7, [r1, #16]
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	d0c0      	beq.n	8005c7a <__sflush_r+0x4a>
 8005cf8:	0793      	lsls	r3, r2, #30
 8005cfa:	680e      	ldr	r6, [r1, #0]
 8005cfc:	bf0c      	ite	eq
 8005cfe:	694b      	ldreq	r3, [r1, #20]
 8005d00:	2300      	movne	r3, #0
 8005d02:	ebc7 0806 	rsb	r8, r7, r6
 8005d06:	600f      	str	r7, [r1, #0]
 8005d08:	608b      	str	r3, [r1, #8]
 8005d0a:	e002      	b.n	8005d12 <__sflush_r+0xe2>
 8005d0c:	4407      	add	r7, r0
 8005d0e:	ebc0 0808 	rsb	r8, r0, r8
 8005d12:	f1b8 0f00 	cmp.w	r8, #0
 8005d16:	ddb0      	ble.n	8005c7a <__sflush_r+0x4a>
 8005d18:	4643      	mov	r3, r8
 8005d1a:	463a      	mov	r2, r7
 8005d1c:	6a21      	ldr	r1, [r4, #32]
 8005d1e:	4628      	mov	r0, r5
 8005d20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d22:	47b0      	blx	r6
 8005d24:	2800      	cmp	r0, #0
 8005d26:	dcf1      	bgt.n	8005d0c <__sflush_r+0xdc>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d38:	20400001 	.word	0x20400001

08005d3c <_fflush_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	690b      	ldr	r3, [r1, #16]
 8005d40:	4605      	mov	r5, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	b1db      	cbz	r3, 8005d7e <_fflush_r+0x42>
 8005d46:	b118      	cbz	r0, 8005d50 <_fflush_r+0x14>
 8005d48:	6983      	ldr	r3, [r0, #24]
 8005d4a:	b90b      	cbnz	r3, 8005d50 <_fflush_r+0x14>
 8005d4c:	f000 f860 	bl	8005e10 <__sinit>
 8005d50:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <_fflush_r+0x48>)
 8005d52:	429c      	cmp	r4, r3
 8005d54:	d101      	bne.n	8005d5a <_fflush_r+0x1e>
 8005d56:	686c      	ldr	r4, [r5, #4]
 8005d58:	e008      	b.n	8005d6c <_fflush_r+0x30>
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <_fflush_r+0x4c>)
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d101      	bne.n	8005d64 <_fflush_r+0x28>
 8005d60:	68ac      	ldr	r4, [r5, #8]
 8005d62:	e003      	b.n	8005d6c <_fflush_r+0x30>
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <_fflush_r+0x50>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	bf08      	it	eq
 8005d6a:	68ec      	ldreq	r4, [r5, #12]
 8005d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d70:	b12b      	cbz	r3, 8005d7e <_fflush_r+0x42>
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d7a:	f7ff bf59 	b.w	8005c30 <__sflush_r>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	bf00      	nop
 8005d84:	08007c18 	.word	0x08007c18
 8005d88:	08007c38 	.word	0x08007c38
 8005d8c:	08007c58 	.word	0x08007c58

08005d90 <_cleanup_r>:
 8005d90:	4901      	ldr	r1, [pc, #4]	; (8005d98 <_cleanup_r+0x8>)
 8005d92:	f000 b8a9 	b.w	8005ee8 <_fwalk_reent>
 8005d96:	bf00      	nop
 8005d98:	08005d3d 	.word	0x08005d3d

08005d9c <std.isra.0>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2300      	movs	r3, #0
 8005da2:	6003      	str	r3, [r0, #0]
 8005da4:	6043      	str	r3, [r0, #4]
 8005da6:	6083      	str	r3, [r0, #8]
 8005da8:	8181      	strh	r1, [r0, #12]
 8005daa:	6643      	str	r3, [r0, #100]	; 0x64
 8005dac:	81c2      	strh	r2, [r0, #14]
 8005dae:	6103      	str	r3, [r0, #16]
 8005db0:	6143      	str	r3, [r0, #20]
 8005db2:	6183      	str	r3, [r0, #24]
 8005db4:	4619      	mov	r1, r3
 8005db6:	2208      	movs	r2, #8
 8005db8:	305c      	adds	r0, #92	; 0x5c
 8005dba:	f7fd fa97 	bl	80032ec <memset>
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <std.isra.0+0x38>)
 8005dc0:	6224      	str	r4, [r4, #32]
 8005dc2:	6263      	str	r3, [r4, #36]	; 0x24
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <std.isra.0+0x3c>)
 8005dc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <std.isra.0+0x40>)
 8005dca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <std.isra.0+0x44>)
 8005dce:	6323      	str	r3, [r4, #48]	; 0x30
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08007535 	.word	0x08007535
 8005dd8:	08007557 	.word	0x08007557
 8005ddc:	0800758f 	.word	0x0800758f
 8005de0:	080075b3 	.word	0x080075b3

08005de4 <__sfmoreglue>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	2368      	movs	r3, #104	; 0x68
 8005de8:	1e4d      	subs	r5, r1, #1
 8005dea:	435d      	muls	r5, r3
 8005dec:	460e      	mov	r6, r1
 8005dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005df2:	f001 f89f 	bl	8006f34 <_malloc_r>
 8005df6:	4604      	mov	r4, r0
 8005df8:	b140      	cbz	r0, 8005e0c <__sfmoreglue+0x28>
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	e880 0042 	stmia.w	r0, {r1, r6}
 8005e00:	300c      	adds	r0, #12
 8005e02:	60a0      	str	r0, [r4, #8]
 8005e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e08:	f7fd fa70 	bl	80032ec <memset>
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}

08005e10 <__sinit>:
 8005e10:	6983      	ldr	r3, [r0, #24]
 8005e12:	b510      	push	{r4, lr}
 8005e14:	4604      	mov	r4, r0
 8005e16:	bb33      	cbnz	r3, 8005e66 <__sinit+0x56>
 8005e18:	6483      	str	r3, [r0, #72]	; 0x48
 8005e1a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005e1c:	6503      	str	r3, [r0, #80]	; 0x50
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <__sinit+0x58>)
 8005e20:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <__sinit+0x5c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6282      	str	r2, [r0, #40]	; 0x28
 8005e26:	4298      	cmp	r0, r3
 8005e28:	bf04      	itt	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	6183      	streq	r3, [r0, #24]
 8005e2e:	f000 f81f 	bl	8005e70 <__sfp>
 8005e32:	6060      	str	r0, [r4, #4]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 f81b 	bl	8005e70 <__sfp>
 8005e3a:	60a0      	str	r0, [r4, #8]
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 f817 	bl	8005e70 <__sfp>
 8005e42:	2200      	movs	r2, #0
 8005e44:	60e0      	str	r0, [r4, #12]
 8005e46:	2104      	movs	r1, #4
 8005e48:	6860      	ldr	r0, [r4, #4]
 8005e4a:	f7ff ffa7 	bl	8005d9c <std.isra.0>
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2109      	movs	r1, #9
 8005e52:	68a0      	ldr	r0, [r4, #8]
 8005e54:	f7ff ffa2 	bl	8005d9c <std.isra.0>
 8005e58:	2202      	movs	r2, #2
 8005e5a:	2112      	movs	r1, #18
 8005e5c:	68e0      	ldr	r0, [r4, #12]
 8005e5e:	f7ff ff9d 	bl	8005d9c <std.isra.0>
 8005e62:	2301      	movs	r3, #1
 8005e64:	61a3      	str	r3, [r4, #24]
 8005e66:	bd10      	pop	{r4, pc}
 8005e68:	08007b78 	.word	0x08007b78
 8005e6c:	08005d91 	.word	0x08005d91

08005e70 <__sfp>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <__sfp+0x74>)
 8005e74:	4607      	mov	r7, r0
 8005e76:	681e      	ldr	r6, [r3, #0]
 8005e78:	69b3      	ldr	r3, [r6, #24]
 8005e7a:	b913      	cbnz	r3, 8005e82 <__sfp+0x12>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff ffc7 	bl	8005e10 <__sinit>
 8005e82:	3648      	adds	r6, #72	; 0x48
 8005e84:	68b4      	ldr	r4, [r6, #8]
 8005e86:	6873      	ldr	r3, [r6, #4]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	d404      	bmi.n	8005e96 <__sfp+0x26>
 8005e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e90:	b17d      	cbz	r5, 8005eb2 <__sfp+0x42>
 8005e92:	3468      	adds	r4, #104	; 0x68
 8005e94:	e7f8      	b.n	8005e88 <__sfp+0x18>
 8005e96:	6833      	ldr	r3, [r6, #0]
 8005e98:	b10b      	cbz	r3, 8005e9e <__sfp+0x2e>
 8005e9a:	6836      	ldr	r6, [r6, #0]
 8005e9c:	e7f2      	b.n	8005e84 <__sfp+0x14>
 8005e9e:	2104      	movs	r1, #4
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff ff9f 	bl	8005de4 <__sfmoreglue>
 8005ea6:	6030      	str	r0, [r6, #0]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1f6      	bne.n	8005e9a <__sfp+0x2a>
 8005eac:	230c      	movs	r3, #12
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eb6:	81e3      	strh	r3, [r4, #14]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	6665      	str	r5, [r4, #100]	; 0x64
 8005ebe:	6025      	str	r5, [r4, #0]
 8005ec0:	60a5      	str	r5, [r4, #8]
 8005ec2:	6065      	str	r5, [r4, #4]
 8005ec4:	6125      	str	r5, [r4, #16]
 8005ec6:	6165      	str	r5, [r4, #20]
 8005ec8:	61a5      	str	r5, [r4, #24]
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ed2:	f7fd fa0b 	bl	80032ec <memset>
 8005ed6:	6365      	str	r5, [r4, #52]	; 0x34
 8005ed8:	63a5      	str	r5, [r4, #56]	; 0x38
 8005eda:	64a5      	str	r5, [r4, #72]	; 0x48
 8005edc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005ede:	4620      	mov	r0, r4
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08007b78 	.word	0x08007b78

08005ee8 <_fwalk_reent>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4680      	mov	r8, r0
 8005eee:	4689      	mov	r9, r1
 8005ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	b194      	cbz	r4, 8005f1e <_fwalk_reent+0x36>
 8005ef8:	68a5      	ldr	r5, [r4, #8]
 8005efa:	6867      	ldr	r7, [r4, #4]
 8005efc:	3f01      	subs	r7, #1
 8005efe:	d40c      	bmi.n	8005f1a <_fwalk_reent+0x32>
 8005f00:	89ab      	ldrh	r3, [r5, #12]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d907      	bls.n	8005f16 <_fwalk_reent+0x2e>
 8005f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	d003      	beq.n	8005f16 <_fwalk_reent+0x2e>
 8005f0e:	4629      	mov	r1, r5
 8005f10:	4640      	mov	r0, r8
 8005f12:	47c8      	blx	r9
 8005f14:	4306      	orrs	r6, r0
 8005f16:	3568      	adds	r5, #104	; 0x68
 8005f18:	e7f0      	b.n	8005efc <_fwalk_reent+0x14>
 8005f1a:	6824      	ldr	r4, [r4, #0]
 8005f1c:	e7eb      	b.n	8005ef6 <_fwalk_reent+0xe>
 8005f1e:	4630      	mov	r0, r6
 8005f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005f24 <rshift>:
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	6906      	ldr	r6, [r0, #16]
 8005f28:	114b      	asrs	r3, r1, #5
 8005f2a:	42b3      	cmp	r3, r6
 8005f2c:	f100 0514 	add.w	r5, r0, #20
 8005f30:	da27      	bge.n	8005f82 <rshift+0x5e>
 8005f32:	f011 011f 	ands.w	r1, r1, #31
 8005f36:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005f3a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005f3e:	d101      	bne.n	8005f44 <rshift+0x20>
 8005f40:	4629      	mov	r1, r5
 8005f42:	e016      	b.n	8005f72 <rshift+0x4e>
 8005f44:	1d14      	adds	r4, r2, #4
 8005f46:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	f1c1 0e20 	rsb	lr, r1, #32
 8005f50:	40ca      	lsrs	r2, r1
 8005f52:	42b4      	cmp	r4, r6
 8005f54:	d209      	bcs.n	8005f6a <rshift+0x46>
 8005f56:	6827      	ldr	r7, [r4, #0]
 8005f58:	fa07 f70e 	lsl.w	r7, r7, lr
 8005f5c:	433a      	orrs	r2, r7
 8005f5e:	f843 2b04 	str.w	r2, [r3], #4
 8005f62:	f854 2b04 	ldr.w	r2, [r4], #4
 8005f66:	40ca      	lsrs	r2, r1
 8005f68:	e7f3      	b.n	8005f52 <rshift+0x2e>
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	b152      	cbz	r2, 8005f84 <rshift+0x60>
 8005f6e:	3304      	adds	r3, #4
 8005f70:	e008      	b.n	8005f84 <rshift+0x60>
 8005f72:	42b2      	cmp	r2, r6
 8005f74:	460b      	mov	r3, r1
 8005f76:	d205      	bcs.n	8005f84 <rshift+0x60>
 8005f78:	f852 3b04 	ldr.w	r3, [r2], #4
 8005f7c:	f841 3b04 	str.w	r3, [r1], #4
 8005f80:	e7f7      	b.n	8005f72 <rshift+0x4e>
 8005f82:	462b      	mov	r3, r5
 8005f84:	1b5b      	subs	r3, r3, r5
 8005f86:	109b      	asrs	r3, r3, #2
 8005f88:	6103      	str	r3, [r0, #16]
 8005f8a:	b903      	cbnz	r3, 8005f8e <rshift+0x6a>
 8005f8c:	6143      	str	r3, [r0, #20]
 8005f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f90 <__hexdig_fun>:
 8005f90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005f94:	2b09      	cmp	r3, #9
 8005f96:	d801      	bhi.n	8005f9c <__hexdig_fun+0xc>
 8005f98:	3820      	subs	r0, #32
 8005f9a:	e00a      	b.n	8005fb2 <__hexdig_fun+0x22>
 8005f9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d801      	bhi.n	8005fa8 <__hexdig_fun+0x18>
 8005fa4:	3847      	subs	r0, #71	; 0x47
 8005fa6:	e004      	b.n	8005fb2 <__hexdig_fun+0x22>
 8005fa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005fac:	2b05      	cmp	r3, #5
 8005fae:	d802      	bhi.n	8005fb6 <__hexdig_fun+0x26>
 8005fb0:	3827      	subs	r0, #39	; 0x27
 8005fb2:	b2c0      	uxtb	r0, r0
 8005fb4:	4770      	bx	lr
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	4770      	bx	lr

08005fba <__gethex>:
 8005fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbe:	b08b      	sub	sp, #44	; 0x2c
 8005fc0:	9002      	str	r0, [sp, #8]
 8005fc2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005fc4:	468a      	mov	sl, r1
 8005fc6:	4690      	mov	r8, r2
 8005fc8:	9306      	str	r3, [sp, #24]
 8005fca:	f000 facc 	bl	8006566 <__localeconv_l>
 8005fce:	6803      	ldr	r3, [r0, #0]
 8005fd0:	f04f 0b00 	mov.w	fp, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	f7fa f8c8 	bl	800016c <strlen>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	9001      	str	r0, [sp, #4]
 8005fe0:	4403      	add	r3, r0
 8005fe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005fe6:	9307      	str	r3, [sp, #28]
 8005fe8:	f8da 3000 	ldr.w	r3, [sl]
 8005fec:	3302      	adds	r3, #2
 8005fee:	461f      	mov	r7, r3
 8005ff0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005ff4:	2830      	cmp	r0, #48	; 0x30
 8005ff6:	d102      	bne.n	8005ffe <__gethex+0x44>
 8005ff8:	f10b 0b01 	add.w	fp, fp, #1
 8005ffc:	e7f7      	b.n	8005fee <__gethex+0x34>
 8005ffe:	f7ff ffc7 	bl	8005f90 <__hexdig_fun>
 8006002:	4604      	mov	r4, r0
 8006004:	b9e0      	cbnz	r0, 8006040 <__gethex+0x86>
 8006006:	9a01      	ldr	r2, [sp, #4]
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	4638      	mov	r0, r7
 800600c:	f001 fad5 	bl	80075ba <strncmp>
 8006010:	2800      	cmp	r0, #0
 8006012:	d134      	bne.n	800607e <__gethex+0xc4>
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	5cf8      	ldrb	r0, [r7, r3]
 8006018:	18fe      	adds	r6, r7, r3
 800601a:	f7ff ffb9 	bl	8005f90 <__hexdig_fun>
 800601e:	b380      	cbz	r0, 8006082 <__gethex+0xc8>
 8006020:	4633      	mov	r3, r6
 8006022:	7818      	ldrb	r0, [r3, #0]
 8006024:	461f      	mov	r7, r3
 8006026:	2830      	cmp	r0, #48	; 0x30
 8006028:	f103 0301 	add.w	r3, r3, #1
 800602c:	d0f9      	beq.n	8006022 <__gethex+0x68>
 800602e:	f7ff ffaf 	bl	8005f90 <__hexdig_fun>
 8006032:	fab0 f580 	clz	r5, r0
 8006036:	4634      	mov	r4, r6
 8006038:	096d      	lsrs	r5, r5, #5
 800603a:	f04f 0b01 	mov.w	fp, #1
 800603e:	e001      	b.n	8006044 <__gethex+0x8a>
 8006040:	2500      	movs	r5, #0
 8006042:	462c      	mov	r4, r5
 8006044:	463a      	mov	r2, r7
 8006046:	4616      	mov	r6, r2
 8006048:	7830      	ldrb	r0, [r6, #0]
 800604a:	3201      	adds	r2, #1
 800604c:	f7ff ffa0 	bl	8005f90 <__hexdig_fun>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1f8      	bne.n	8006046 <__gethex+0x8c>
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	4630      	mov	r0, r6
 800605a:	f001 faae 	bl	80075ba <strncmp>
 800605e:	b950      	cbnz	r0, 8006076 <__gethex+0xbc>
 8006060:	b954      	cbnz	r4, 8006078 <__gethex+0xbe>
 8006062:	9b01      	ldr	r3, [sp, #4]
 8006064:	18f4      	adds	r4, r6, r3
 8006066:	4622      	mov	r2, r4
 8006068:	4616      	mov	r6, r2
 800606a:	7830      	ldrb	r0, [r6, #0]
 800606c:	3201      	adds	r2, #1
 800606e:	f7ff ff8f 	bl	8005f90 <__hexdig_fun>
 8006072:	2800      	cmp	r0, #0
 8006074:	d1f8      	bne.n	8006068 <__gethex+0xae>
 8006076:	b134      	cbz	r4, 8006086 <__gethex+0xcc>
 8006078:	1ba4      	subs	r4, r4, r6
 800607a:	00a4      	lsls	r4, r4, #2
 800607c:	e003      	b.n	8006086 <__gethex+0xcc>
 800607e:	463e      	mov	r6, r7
 8006080:	e000      	b.n	8006084 <__gethex+0xca>
 8006082:	4604      	mov	r4, r0
 8006084:	2501      	movs	r5, #1
 8006086:	7833      	ldrb	r3, [r6, #0]
 8006088:	2b50      	cmp	r3, #80	; 0x50
 800608a:	d001      	beq.n	8006090 <__gethex+0xd6>
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d12a      	bne.n	80060e6 <__gethex+0x12c>
 8006090:	7873      	ldrb	r3, [r6, #1]
 8006092:	2b2b      	cmp	r3, #43	; 0x2b
 8006094:	d008      	beq.n	80060a8 <__gethex+0xee>
 8006096:	2b2d      	cmp	r3, #45	; 0x2d
 8006098:	d003      	beq.n	80060a2 <__gethex+0xe8>
 800609a:	1c71      	adds	r1, r6, #1
 800609c:	f04f 0900 	mov.w	r9, #0
 80060a0:	e005      	b.n	80060ae <__gethex+0xf4>
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	e001      	b.n	80060ac <__gethex+0xf2>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	1cb1      	adds	r1, r6, #2
 80060ae:	7808      	ldrb	r0, [r1, #0]
 80060b0:	f7ff ff6e 	bl	8005f90 <__hexdig_fun>
 80060b4:	1e43      	subs	r3, r0, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b18      	cmp	r3, #24
 80060ba:	d814      	bhi.n	80060e6 <__gethex+0x12c>
 80060bc:	f1a0 0210 	sub.w	r2, r0, #16
 80060c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80060c4:	f7ff ff64 	bl	8005f90 <__hexdig_fun>
 80060c8:	1e43      	subs	r3, r0, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b18      	cmp	r3, #24
 80060ce:	d804      	bhi.n	80060da <__gethex+0x120>
 80060d0:	230a      	movs	r3, #10
 80060d2:	fb03 0202 	mla	r2, r3, r2, r0
 80060d6:	3a10      	subs	r2, #16
 80060d8:	e7f2      	b.n	80060c0 <__gethex+0x106>
 80060da:	f1b9 0f00 	cmp.w	r9, #0
 80060de:	d000      	beq.n	80060e2 <__gethex+0x128>
 80060e0:	4252      	negs	r2, r2
 80060e2:	4414      	add	r4, r2
 80060e4:	e000      	b.n	80060e8 <__gethex+0x12e>
 80060e6:	4631      	mov	r1, r6
 80060e8:	f8ca 1000 	str.w	r1, [sl]
 80060ec:	b12d      	cbz	r5, 80060fa <__gethex+0x140>
 80060ee:	f1bb 0f00 	cmp.w	fp, #0
 80060f2:	bf14      	ite	ne
 80060f4:	2000      	movne	r0, #0
 80060f6:	2006      	moveq	r0, #6
 80060f8:	e17c      	b.n	80063f4 <__gethex+0x43a>
 80060fa:	4629      	mov	r1, r5
 80060fc:	1bf3      	subs	r3, r6, r7
 80060fe:	3b01      	subs	r3, #1
 8006100:	2b07      	cmp	r3, #7
 8006102:	dd02      	ble.n	800610a <__gethex+0x150>
 8006104:	3101      	adds	r1, #1
 8006106:	105b      	asrs	r3, r3, #1
 8006108:	e7fa      	b.n	8006100 <__gethex+0x146>
 800610a:	9802      	ldr	r0, [sp, #8]
 800610c:	f000 facf 	bl	80066ae <_Balloc>
 8006110:	f04f 0900 	mov.w	r9, #0
 8006114:	4605      	mov	r5, r0
 8006116:	46cb      	mov	fp, r9
 8006118:	9b01      	ldr	r3, [sp, #4]
 800611a:	f100 0a14 	add.w	sl, r0, #20
 800611e:	f1c3 0301 	rsb	r3, r3, #1
 8006122:	f8cd a010 	str.w	sl, [sp, #16]
 8006126:	9308      	str	r3, [sp, #32]
 8006128:	42b7      	cmp	r7, r6
 800612a:	d22f      	bcs.n	800618c <__gethex+0x1d2>
 800612c:	1e73      	subs	r3, r6, #1
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	9a07      	ldr	r2, [sp, #28]
 8006132:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <__gethex+0x198>
 800613a:	f1bb 0f20 	cmp.w	fp, #32
 800613e:	d116      	bne.n	800616e <__gethex+0x1b4>
 8006140:	9b04      	ldr	r3, [sp, #16]
 8006142:	f8c3 9000 	str.w	r9, [r3]
 8006146:	3304      	adds	r3, #4
 8006148:	f04f 0900 	mov.w	r9, #0
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	46cb      	mov	fp, r9
 8006150:	e00d      	b.n	800616e <__gethex+0x1b4>
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	9a08      	ldr	r2, [sp, #32]
 8006156:	4413      	add	r3, r2
 8006158:	429f      	cmp	r7, r3
 800615a:	d8ee      	bhi.n	800613a <__gethex+0x180>
 800615c:	4618      	mov	r0, r3
 800615e:	9a01      	ldr	r2, [sp, #4]
 8006160:	9903      	ldr	r1, [sp, #12]
 8006162:	9309      	str	r3, [sp, #36]	; 0x24
 8006164:	f001 fa29 	bl	80075ba <strncmp>
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	b168      	cbz	r0, 8006188 <__gethex+0x1ce>
 800616c:	e7e5      	b.n	800613a <__gethex+0x180>
 800616e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006172:	f7ff ff0d 	bl	8005f90 <__hexdig_fun>
 8006176:	f000 000f 	and.w	r0, r0, #15
 800617a:	fa00 f00b 	lsl.w	r0, r0, fp
 800617e:	9b05      	ldr	r3, [sp, #20]
 8006180:	ea49 0900 	orr.w	r9, r9, r0
 8006184:	f10b 0b04 	add.w	fp, fp, #4
 8006188:	461e      	mov	r6, r3
 800618a:	e7cd      	b.n	8006128 <__gethex+0x16e>
 800618c:	9804      	ldr	r0, [sp, #16]
 800618e:	f840 9b04 	str.w	r9, [r0], #4
 8006192:	ebca 0000 	rsb	r0, sl, r0
 8006196:	1080      	asrs	r0, r0, #2
 8006198:	6128      	str	r0, [r5, #16]
 800619a:	0147      	lsls	r7, r0, #5
 800619c:	4648      	mov	r0, r9
 800619e:	f000 fb4b 	bl	8006838 <__hi0bits>
 80061a2:	f8d8 6000 	ldr.w	r6, [r8]
 80061a6:	1a38      	subs	r0, r7, r0
 80061a8:	42b0      	cmp	r0, r6
 80061aa:	dd26      	ble.n	80061fa <__gethex+0x240>
 80061ac:	1b87      	subs	r7, r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 fe42 	bl	8006e3a <__any_on>
 80061b6:	b1c8      	cbz	r0, 80061ec <__gethex+0x232>
 80061b8:	1e7b      	subs	r3, r7, #1
 80061ba:	1159      	asrs	r1, r3, #5
 80061bc:	f003 021f 	and.w	r2, r3, #31
 80061c0:	f04f 0901 	mov.w	r9, #1
 80061c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80061c8:	fa09 f202 	lsl.w	r2, r9, r2
 80061cc:	420a      	tst	r2, r1
 80061ce:	d00e      	beq.n	80061ee <__gethex+0x234>
 80061d0:	454b      	cmp	r3, r9
 80061d2:	dc02      	bgt.n	80061da <__gethex+0x220>
 80061d4:	f04f 0902 	mov.w	r9, #2
 80061d8:	e009      	b.n	80061ee <__gethex+0x234>
 80061da:	1eb9      	subs	r1, r7, #2
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 fe2c 	bl	8006e3a <__any_on>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0f6      	beq.n	80061d4 <__gethex+0x21a>
 80061e6:	f04f 0903 	mov.w	r9, #3
 80061ea:	e000      	b.n	80061ee <__gethex+0x234>
 80061ec:	4681      	mov	r9, r0
 80061ee:	4639      	mov	r1, r7
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fe97 	bl	8005f24 <rshift>
 80061f6:	443c      	add	r4, r7
 80061f8:	e00c      	b.n	8006214 <__gethex+0x25a>
 80061fa:	da09      	bge.n	8006210 <__gethex+0x256>
 80061fc:	1a37      	subs	r7, r6, r0
 80061fe:	4629      	mov	r1, r5
 8006200:	463a      	mov	r2, r7
 8006202:	9802      	ldr	r0, [sp, #8]
 8006204:	f000 fc4c 	bl	8006aa0 <__lshift>
 8006208:	4605      	mov	r5, r0
 800620a:	1be4      	subs	r4, r4, r7
 800620c:	f100 0a14 	add.w	sl, r0, #20
 8006210:	f04f 0900 	mov.w	r9, #0
 8006214:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006218:	429c      	cmp	r4, r3
 800621a:	dd08      	ble.n	800622e <__gethex+0x274>
 800621c:	9802      	ldr	r0, [sp, #8]
 800621e:	4629      	mov	r1, r5
 8006220:	f000 fa7a 	bl	8006718 <_Bfree>
 8006224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006226:	2300      	movs	r3, #0
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	20a3      	movs	r0, #163	; 0xa3
 800622c:	e0e2      	b.n	80063f4 <__gethex+0x43a>
 800622e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006232:	4284      	cmp	r4, r0
 8006234:	da53      	bge.n	80062de <__gethex+0x324>
 8006236:	1b04      	subs	r4, r0, r4
 8006238:	42a6      	cmp	r6, r4
 800623a:	dc2e      	bgt.n	800629a <__gethex+0x2e0>
 800623c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d01a      	beq.n	800627a <__gethex+0x2c0>
 8006244:	2b03      	cmp	r3, #3
 8006246:	d01c      	beq.n	8006282 <__gethex+0x2c8>
 8006248:	2b01      	cmp	r3, #1
 800624a:	d11d      	bne.n	8006288 <__gethex+0x2ce>
 800624c:	42a6      	cmp	r6, r4
 800624e:	d11b      	bne.n	8006288 <__gethex+0x2ce>
 8006250:	2e01      	cmp	r6, #1
 8006252:	dc0b      	bgt.n	800626c <__gethex+0x2b2>
 8006254:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	2062      	movs	r0, #98	; 0x62
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	2301      	movs	r3, #1
 8006260:	612b      	str	r3, [r5, #16]
 8006262:	f8ca 3000 	str.w	r3, [sl]
 8006266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006268:	601d      	str	r5, [r3, #0]
 800626a:	e0c3      	b.n	80063f4 <__gethex+0x43a>
 800626c:	1e71      	subs	r1, r6, #1
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fde3 	bl	8006e3a <__any_on>
 8006274:	2800      	cmp	r0, #0
 8006276:	d1ed      	bne.n	8006254 <__gethex+0x29a>
 8006278:	e006      	b.n	8006288 <__gethex+0x2ce>
 800627a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0e9      	beq.n	8006254 <__gethex+0x29a>
 8006280:	e002      	b.n	8006288 <__gethex+0x2ce>
 8006282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <__gethex+0x29a>
 8006288:	9802      	ldr	r0, [sp, #8]
 800628a:	4629      	mov	r1, r5
 800628c:	f000 fa44 	bl	8006718 <_Bfree>
 8006290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	2050      	movs	r0, #80	; 0x50
 8006298:	e0ac      	b.n	80063f4 <__gethex+0x43a>
 800629a:	1e67      	subs	r7, r4, #1
 800629c:	f1b9 0f00 	cmp.w	r9, #0
 80062a0:	d106      	bne.n	80062b0 <__gethex+0x2f6>
 80062a2:	b13f      	cbz	r7, 80062b4 <__gethex+0x2fa>
 80062a4:	4639      	mov	r1, r7
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fdc7 	bl	8006e3a <__any_on>
 80062ac:	4681      	mov	r9, r0
 80062ae:	e001      	b.n	80062b4 <__gethex+0x2fa>
 80062b0:	f04f 0901 	mov.w	r9, #1
 80062b4:	117a      	asrs	r2, r7, #5
 80062b6:	2301      	movs	r3, #1
 80062b8:	f007 071f 	and.w	r7, r7, #31
 80062bc:	fa03 f707 	lsl.w	r7, r3, r7
 80062c0:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80062c4:	4621      	mov	r1, r4
 80062c6:	421f      	tst	r7, r3
 80062c8:	4628      	mov	r0, r5
 80062ca:	bf18      	it	ne
 80062cc:	f049 0902 	orrne.w	r9, r9, #2
 80062d0:	1b36      	subs	r6, r6, r4
 80062d2:	f7ff fe27 	bl	8005f24 <rshift>
 80062d6:	2702      	movs	r7, #2
 80062d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80062dc:	e000      	b.n	80062e0 <__gethex+0x326>
 80062de:	2701      	movs	r7, #1
 80062e0:	f1b9 0f00 	cmp.w	r9, #0
 80062e4:	f000 8081 	beq.w	80063ea <__gethex+0x430>
 80062e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d00e      	beq.n	800630e <__gethex+0x354>
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d010      	beq.n	8006316 <__gethex+0x35c>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d176      	bne.n	80063e6 <__gethex+0x42c>
 80062f8:	f019 0f02 	tst.w	r9, #2
 80062fc:	d073      	beq.n	80063e6 <__gethex+0x42c>
 80062fe:	f8da 0000 	ldr.w	r0, [sl]
 8006302:	ea49 0900 	orr.w	r9, r9, r0
 8006306:	f019 0f01 	tst.w	r9, #1
 800630a:	d107      	bne.n	800631c <__gethex+0x362>
 800630c:	e06b      	b.n	80063e6 <__gethex+0x42c>
 800630e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006310:	f1c3 0301 	rsb	r3, r3, #1
 8006314:	9315      	str	r3, [sp, #84]	; 0x54
 8006316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006318:	2b00      	cmp	r3, #0
 800631a:	d064      	beq.n	80063e6 <__gethex+0x42c>
 800631c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006320:	f105 0314 	add.w	r3, r5, #20
 8006324:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8006328:	eb03 0109 	add.w	r1, r3, r9
 800632c:	2000      	movs	r0, #0
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006334:	d002      	beq.n	800633c <__gethex+0x382>
 8006336:	3201      	adds	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e020      	b.n	800637e <__gethex+0x3c4>
 800633c:	f843 0b04 	str.w	r0, [r3], #4
 8006340:	4299      	cmp	r1, r3
 8006342:	d8f4      	bhi.n	800632e <__gethex+0x374>
 8006344:	68ab      	ldr	r3, [r5, #8]
 8006346:	459a      	cmp	sl, r3
 8006348:	db12      	blt.n	8006370 <__gethex+0x3b6>
 800634a:	6869      	ldr	r1, [r5, #4]
 800634c:	9802      	ldr	r0, [sp, #8]
 800634e:	3101      	adds	r1, #1
 8006350:	f000 f9ad 	bl	80066ae <_Balloc>
 8006354:	4683      	mov	fp, r0
 8006356:	692a      	ldr	r2, [r5, #16]
 8006358:	f105 010c 	add.w	r1, r5, #12
 800635c:	3202      	adds	r2, #2
 800635e:	0092      	lsls	r2, r2, #2
 8006360:	300c      	adds	r0, #12
 8006362:	f000 f999 	bl	8006698 <memcpy>
 8006366:	4629      	mov	r1, r5
 8006368:	9802      	ldr	r0, [sp, #8]
 800636a:	f000 f9d5 	bl	8006718 <_Bfree>
 800636e:	465d      	mov	r5, fp
 8006370:	692b      	ldr	r3, [r5, #16]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	612a      	str	r2, [r5, #16]
 8006376:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]
 800637e:	2f02      	cmp	r7, #2
 8006380:	f105 0214 	add.w	r2, r5, #20
 8006384:	d111      	bne.n	80063aa <__gethex+0x3f0>
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	3b01      	subs	r3, #1
 800638c:	429e      	cmp	r6, r3
 800638e:	d127      	bne.n	80063e0 <__gethex+0x426>
 8006390:	1171      	asrs	r1, r6, #5
 8006392:	2301      	movs	r3, #1
 8006394:	f006 061f 	and.w	r6, r6, #31
 8006398:	fa03 f606 	lsl.w	r6, r3, r6
 800639c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063a0:	421e      	tst	r6, r3
 80063a2:	bf0c      	ite	eq
 80063a4:	2702      	moveq	r7, #2
 80063a6:	2701      	movne	r7, #1
 80063a8:	e01a      	b.n	80063e0 <__gethex+0x426>
 80063aa:	692b      	ldr	r3, [r5, #16]
 80063ac:	459a      	cmp	sl, r3
 80063ae:	da0a      	bge.n	80063c6 <__gethex+0x40c>
 80063b0:	2101      	movs	r1, #1
 80063b2:	4628      	mov	r0, r5
 80063b4:	f7ff fdb6 	bl	8005f24 <rshift>
 80063b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063bc:	3401      	adds	r4, #1
 80063be:	429c      	cmp	r4, r3
 80063c0:	f73f af2c 	bgt.w	800621c <__gethex+0x262>
 80063c4:	e00b      	b.n	80063de <__gethex+0x424>
 80063c6:	f016 061f 	ands.w	r6, r6, #31
 80063ca:	d008      	beq.n	80063de <__gethex+0x424>
 80063cc:	4491      	add	r9, r2
 80063ce:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80063d2:	f000 fa31 	bl	8006838 <__hi0bits>
 80063d6:	f1c6 0620 	rsb	r6, r6, #32
 80063da:	42b0      	cmp	r0, r6
 80063dc:	dbe8      	blt.n	80063b0 <__gethex+0x3f6>
 80063de:	2701      	movs	r7, #1
 80063e0:	f047 0720 	orr.w	r7, r7, #32
 80063e4:	e001      	b.n	80063ea <__gethex+0x430>
 80063e6:	f047 0710 	orr.w	r7, r7, #16
 80063ea:	4638      	mov	r0, r7
 80063ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063ee:	601d      	str	r5, [r3, #0]
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	601c      	str	r4, [r3, #0]
 80063f4:	b00b      	add	sp, #44	; 0x2c
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063fa <L_shift>:
 80063fa:	f1c2 0208 	rsb	r2, r2, #8
 80063fe:	0092      	lsls	r2, r2, #2
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	f1c2 0620 	rsb	r6, r2, #32
 8006406:	6843      	ldr	r3, [r0, #4]
 8006408:	6805      	ldr	r5, [r0, #0]
 800640a:	fa03 f406 	lsl.w	r4, r3, r6
 800640e:	432c      	orrs	r4, r5
 8006410:	40d3      	lsrs	r3, r2
 8006412:	6004      	str	r4, [r0, #0]
 8006414:	f840 3f04 	str.w	r3, [r0, #4]!
 8006418:	4288      	cmp	r0, r1
 800641a:	d3f4      	bcc.n	8006406 <L_shift+0xc>
 800641c:	bd70      	pop	{r4, r5, r6, pc}

0800641e <__match>:
 800641e:	b530      	push	{r4, r5, lr}
 8006420:	6803      	ldr	r3, [r0, #0]
 8006422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006426:	3301      	adds	r3, #1
 8006428:	b14c      	cbz	r4, 800643e <__match+0x20>
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006430:	2d19      	cmp	r5, #25
 8006432:	bf98      	it	ls
 8006434:	3220      	addls	r2, #32
 8006436:	42a2      	cmp	r2, r4
 8006438:	d0f3      	beq.n	8006422 <__match+0x4>
 800643a:	2000      	movs	r0, #0
 800643c:	bd30      	pop	{r4, r5, pc}
 800643e:	6003      	str	r3, [r0, #0]
 8006440:	2001      	movs	r0, #1
 8006442:	bd30      	pop	{r4, r5, pc}

08006444 <__hexnan>:
 8006444:	680b      	ldr	r3, [r1, #0]
 8006446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	115e      	asrs	r6, r3, #5
 800644c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006450:	f013 031f 	ands.w	r3, r3, #31
 8006454:	bf18      	it	ne
 8006456:	3604      	addne	r6, #4
 8006458:	1f35      	subs	r5, r6, #4
 800645a:	4617      	mov	r7, r2
 800645c:	2200      	movs	r2, #0
 800645e:	4682      	mov	sl, r0
 8006460:	46a8      	mov	r8, r5
 8006462:	462c      	mov	r4, r5
 8006464:	4691      	mov	r9, r2
 8006466:	b085      	sub	sp, #20
 8006468:	f8d0 b000 	ldr.w	fp, [r0]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006472:	9200      	str	r2, [sp, #0]
 8006474:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8006478:	2900      	cmp	r1, #0
 800647a:	d03c      	beq.n	80064f6 <__hexnan+0xb2>
 800647c:	4608      	mov	r0, r1
 800647e:	9203      	str	r2, [sp, #12]
 8006480:	9102      	str	r1, [sp, #8]
 8006482:	f7ff fd85 	bl	8005f90 <__hexdig_fun>
 8006486:	9a03      	ldr	r2, [sp, #12]
 8006488:	bb00      	cbnz	r0, 80064cc <__hexnan+0x88>
 800648a:	9902      	ldr	r1, [sp, #8]
 800648c:	2920      	cmp	r1, #32
 800648e:	d816      	bhi.n	80064be <__hexnan+0x7a>
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	4599      	cmp	r9, r3
 8006494:	ddee      	ble.n	8006474 <__hexnan+0x30>
 8006496:	4544      	cmp	r4, r8
 8006498:	d205      	bcs.n	80064a6 <__hexnan+0x62>
 800649a:	2a07      	cmp	r2, #7
 800649c:	dc03      	bgt.n	80064a6 <__hexnan+0x62>
 800649e:	4641      	mov	r1, r8
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ffaa 	bl	80063fa <L_shift>
 80064a6:	42bc      	cmp	r4, r7
 80064a8:	d923      	bls.n	80064f2 <__hexnan+0xae>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f1a4 0804 	sub.w	r8, r4, #4
 80064b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80064b4:	f8cd 9000 	str.w	r9, [sp]
 80064b8:	4644      	mov	r4, r8
 80064ba:	461a      	mov	r2, r3
 80064bc:	e7da      	b.n	8006474 <__hexnan+0x30>
 80064be:	2929      	cmp	r1, #41	; 0x29
 80064c0:	d148      	bne.n	8006554 <__hexnan+0x110>
 80064c2:	f10b 0301 	add.w	r3, fp, #1
 80064c6:	f8ca 3000 	str.w	r3, [sl]
 80064ca:	e014      	b.n	80064f6 <__hexnan+0xb2>
 80064cc:	3201      	adds	r2, #1
 80064ce:	2a08      	cmp	r2, #8
 80064d0:	f109 0901 	add.w	r9, r9, #1
 80064d4:	dd06      	ble.n	80064e4 <__hexnan+0xa0>
 80064d6:	42bc      	cmp	r4, r7
 80064d8:	d9cc      	bls.n	8006474 <__hexnan+0x30>
 80064da:	2300      	movs	r3, #0
 80064dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	3c04      	subs	r4, #4
 80064e4:	6821      	ldr	r1, [r4, #0]
 80064e6:	f000 000f 	and.w	r0, r0, #15
 80064ea:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80064ee:	6020      	str	r0, [r4, #0]
 80064f0:	e7c0      	b.n	8006474 <__hexnan+0x30>
 80064f2:	2208      	movs	r2, #8
 80064f4:	e7be      	b.n	8006474 <__hexnan+0x30>
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	d02b      	beq.n	8006554 <__hexnan+0x110>
 80064fc:	4544      	cmp	r4, r8
 80064fe:	d205      	bcs.n	800650c <__hexnan+0xc8>
 8006500:	2a07      	cmp	r2, #7
 8006502:	dc03      	bgt.n	800650c <__hexnan+0xc8>
 8006504:	4641      	mov	r1, r8
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff ff77 	bl	80063fa <L_shift>
 800650c:	42bc      	cmp	r4, r7
 800650e:	d90c      	bls.n	800652a <__hexnan+0xe6>
 8006510:	463b      	mov	r3, r7
 8006512:	f854 2b04 	ldr.w	r2, [r4], #4
 8006516:	42a5      	cmp	r5, r4
 8006518:	f843 2b04 	str.w	r2, [r3], #4
 800651c:	d2f9      	bcs.n	8006512 <__hexnan+0xce>
 800651e:	2200      	movs	r2, #0
 8006520:	f843 2b04 	str.w	r2, [r3], #4
 8006524:	429d      	cmp	r5, r3
 8006526:	d2fb      	bcs.n	8006520 <__hexnan+0xdc>
 8006528:	e00b      	b.n	8006542 <__hexnan+0xfe>
 800652a:	9b01      	ldr	r3, [sp, #4]
 800652c:	b14b      	cbz	r3, 8006542 <__hexnan+0xfe>
 800652e:	f1c3 0220 	rsb	r2, r3, #32
 8006532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006536:	40d3      	lsrs	r3, r2
 8006538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800653c:	4013      	ands	r3, r2
 800653e:	f846 3c04 	str.w	r3, [r6, #-4]
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	b943      	cbnz	r3, 8006558 <__hexnan+0x114>
 8006546:	42bd      	cmp	r5, r7
 8006548:	d102      	bne.n	8006550 <__hexnan+0x10c>
 800654a:	2301      	movs	r3, #1
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	e003      	b.n	8006558 <__hexnan+0x114>
 8006550:	3d04      	subs	r5, #4
 8006552:	e7f6      	b.n	8006542 <__hexnan+0xfe>
 8006554:	2004      	movs	r0, #4
 8006556:	e000      	b.n	800655a <__hexnan+0x116>
 8006558:	2005      	movs	r0, #5
 800655a:	b005      	add	sp, #20
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006560 <__locale_ctype_ptr_l>:
 8006560:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006564:	4770      	bx	lr

08006566 <__localeconv_l>:
 8006566:	30f0      	adds	r0, #240	; 0xf0
 8006568:	4770      	bx	lr
	...

0800656c <_localeconv_r>:
 800656c:	4b04      	ldr	r3, [pc, #16]	; (8006580 <_localeconv_r+0x14>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a18      	ldr	r0, [r3, #32]
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <_localeconv_r+0x18>)
 8006574:	2800      	cmp	r0, #0
 8006576:	bf08      	it	eq
 8006578:	4618      	moveq	r0, r3
 800657a:	30f0      	adds	r0, #240	; 0xf0
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000140 	.word	0x20000140
 8006584:	20000144 	.word	0x20000144

08006588 <__swhatbuf_r>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	460e      	mov	r6, r1
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	b090      	sub	sp, #64	; 0x40
 8006592:	2900      	cmp	r1, #0
 8006594:	4614      	mov	r4, r2
 8006596:	461d      	mov	r5, r3
 8006598:	da06      	bge.n	80065a8 <__swhatbuf_r+0x20>
 800659a:	2300      	movs	r3, #0
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	89b3      	ldrh	r3, [r6, #12]
 80065a0:	061a      	lsls	r2, r3, #24
 80065a2:	d50e      	bpl.n	80065c2 <__swhatbuf_r+0x3a>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	e00e      	b.n	80065c6 <__swhatbuf_r+0x3e>
 80065a8:	aa01      	add	r2, sp, #4
 80065aa:	f001 f84b 	bl	8007644 <_fstat_r>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	dbf3      	blt.n	800659a <__swhatbuf_r+0x12>
 80065b2:	9a02      	ldr	r2, [sp, #8]
 80065b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065bc:	425a      	negs	r2, r3
 80065be:	415a      	adcs	r2, r3
 80065c0:	602a      	str	r2, [r5, #0]
 80065c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c6:	2000      	movs	r0, #0
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	b010      	add	sp, #64	; 0x40
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080065d0 <__smakebuf_r>:
 80065d0:	898b      	ldrh	r3, [r1, #12]
 80065d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d4:	079e      	lsls	r6, r3, #30
 80065d6:	4605      	mov	r5, r0
 80065d8:	460c      	mov	r4, r1
 80065da:	d410      	bmi.n	80065fe <__smakebuf_r+0x2e>
 80065dc:	ab01      	add	r3, sp, #4
 80065de:	466a      	mov	r2, sp
 80065e0:	f7ff ffd2 	bl	8006588 <__swhatbuf_r>
 80065e4:	9900      	ldr	r1, [sp, #0]
 80065e6:	4606      	mov	r6, r0
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 fca3 	bl	8006f34 <_malloc_r>
 80065ee:	b968      	cbnz	r0, 800660c <__smakebuf_r+0x3c>
 80065f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f4:	059a      	lsls	r2, r3, #22
 80065f6:	d422      	bmi.n	800663e <__smakebuf_r+0x6e>
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	2301      	movs	r3, #1
 8006608:	6163      	str	r3, [r4, #20]
 800660a:	e018      	b.n	800663e <__smakebuf_r+0x6e>
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <__smakebuf_r+0x74>)
 800660e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	6020      	str	r0, [r4, #0]
 8006614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	9b00      	ldr	r3, [sp, #0]
 800661c:	6120      	str	r0, [r4, #16]
 800661e:	6163      	str	r3, [r4, #20]
 8006620:	9b01      	ldr	r3, [sp, #4]
 8006622:	b14b      	cbz	r3, 8006638 <__smakebuf_r+0x68>
 8006624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006628:	4628      	mov	r0, r5
 800662a:	f001 f81d 	bl	8007668 <_isatty_r>
 800662e:	b118      	cbz	r0, 8006638 <__smakebuf_r+0x68>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	89a0      	ldrh	r0, [r4, #12]
 800663a:	4330      	orrs	r0, r6
 800663c:	81a0      	strh	r0, [r4, #12]
 800663e:	b002      	add	sp, #8
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	bf00      	nop
 8006644:	08005d91 	.word	0x08005d91

08006648 <malloc>:
 8006648:	4b02      	ldr	r3, [pc, #8]	; (8006654 <malloc+0xc>)
 800664a:	4601      	mov	r1, r0
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f000 bc71 	b.w	8006f34 <_malloc_r>
 8006652:	bf00      	nop
 8006654:	20000140 	.word	0x20000140

08006658 <__ascii_mbtowc>:
 8006658:	b082      	sub	sp, #8
 800665a:	b901      	cbnz	r1, 800665e <__ascii_mbtowc+0x6>
 800665c:	a901      	add	r1, sp, #4
 800665e:	b13a      	cbz	r2, 8006670 <__ascii_mbtowc+0x18>
 8006660:	b143      	cbz	r3, 8006674 <__ascii_mbtowc+0x1c>
 8006662:	7813      	ldrb	r3, [r2, #0]
 8006664:	600b      	str	r3, [r1, #0]
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	1c10      	adds	r0, r2, #0
 800666a:	bf18      	it	ne
 800666c:	2001      	movne	r0, #1
 800666e:	e003      	b.n	8006678 <__ascii_mbtowc+0x20>
 8006670:	4610      	mov	r0, r2
 8006672:	e001      	b.n	8006678 <__ascii_mbtowc+0x20>
 8006674:	f06f 0001 	mvn.w	r0, #1
 8006678:	b002      	add	sp, #8
 800667a:	4770      	bx	lr

0800667c <memchr>:
 800667c:	b510      	push	{r4, lr}
 800667e:	b2c9      	uxtb	r1, r1
 8006680:	4402      	add	r2, r0
 8006682:	4290      	cmp	r0, r2
 8006684:	4603      	mov	r3, r0
 8006686:	d005      	beq.n	8006694 <memchr+0x18>
 8006688:	781c      	ldrb	r4, [r3, #0]
 800668a:	3001      	adds	r0, #1
 800668c:	428c      	cmp	r4, r1
 800668e:	d1f8      	bne.n	8006682 <memchr+0x6>
 8006690:	4618      	mov	r0, r3
 8006692:	bd10      	pop	{r4, pc}
 8006694:	2000      	movs	r0, #0
 8006696:	bd10      	pop	{r4, pc}

08006698 <memcpy>:
 8006698:	b510      	push	{r4, lr}
 800669a:	1e43      	subs	r3, r0, #1
 800669c:	440a      	add	r2, r1
 800669e:	4291      	cmp	r1, r2
 80066a0:	d004      	beq.n	80066ac <memcpy+0x14>
 80066a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066aa:	e7f8      	b.n	800669e <memcpy+0x6>
 80066ac:	bd10      	pop	{r4, pc}

080066ae <_Balloc>:
 80066ae:	b570      	push	{r4, r5, r6, lr}
 80066b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066b2:	4604      	mov	r4, r0
 80066b4:	460e      	mov	r6, r1
 80066b6:	b93d      	cbnz	r5, 80066c8 <_Balloc+0x1a>
 80066b8:	2010      	movs	r0, #16
 80066ba:	f7ff ffc5 	bl	8006648 <malloc>
 80066be:	6260      	str	r0, [r4, #36]	; 0x24
 80066c0:	6045      	str	r5, [r0, #4]
 80066c2:	6085      	str	r5, [r0, #8]
 80066c4:	6005      	str	r5, [r0, #0]
 80066c6:	60c5      	str	r5, [r0, #12]
 80066c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066ca:	68eb      	ldr	r3, [r5, #12]
 80066cc:	b143      	cbz	r3, 80066e0 <_Balloc+0x32>
 80066ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80066d6:	b178      	cbz	r0, 80066f8 <_Balloc+0x4a>
 80066d8:	6802      	ldr	r2, [r0, #0]
 80066da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80066de:	e017      	b.n	8006710 <_Balloc+0x62>
 80066e0:	2221      	movs	r2, #33	; 0x21
 80066e2:	2104      	movs	r1, #4
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fbca 	bl	8006e7e <_calloc_r>
 80066ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ec:	60e8      	str	r0, [r5, #12]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1ec      	bne.n	80066ce <_Balloc+0x20>
 80066f4:	2000      	movs	r0, #0
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	2101      	movs	r1, #1
 80066fa:	fa01 f506 	lsl.w	r5, r1, r6
 80066fe:	1d6a      	adds	r2, r5, #5
 8006700:	0092      	lsls	r2, r2, #2
 8006702:	4620      	mov	r0, r4
 8006704:	f000 fbbb 	bl	8006e7e <_calloc_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	d0f3      	beq.n	80066f4 <_Balloc+0x46>
 800670c:	6046      	str	r6, [r0, #4]
 800670e:	6085      	str	r5, [r0, #8]
 8006710:	2300      	movs	r3, #0
 8006712:	6103      	str	r3, [r0, #16]
 8006714:	60c3      	str	r3, [r0, #12]
 8006716:	bd70      	pop	{r4, r5, r6, pc}

08006718 <_Bfree>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800671c:	4606      	mov	r6, r0
 800671e:	460d      	mov	r5, r1
 8006720:	b93c      	cbnz	r4, 8006732 <_Bfree+0x1a>
 8006722:	2010      	movs	r0, #16
 8006724:	f7ff ff90 	bl	8006648 <malloc>
 8006728:	6270      	str	r0, [r6, #36]	; 0x24
 800672a:	6044      	str	r4, [r0, #4]
 800672c:	6084      	str	r4, [r0, #8]
 800672e:	6004      	str	r4, [r0, #0]
 8006730:	60c4      	str	r4, [r0, #12]
 8006732:	b13d      	cbz	r5, 8006744 <_Bfree+0x2c>
 8006734:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006736:	686a      	ldr	r2, [r5, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800673e:	6029      	str	r1, [r5, #0]
 8006740:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006744:	bd70      	pop	{r4, r5, r6, pc}

08006746 <__multadd>:
 8006746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674a:	4606      	mov	r6, r0
 800674c:	460c      	mov	r4, r1
 800674e:	690d      	ldr	r5, [r1, #16]
 8006750:	461f      	mov	r7, r3
 8006752:	f101 0e14 	add.w	lr, r1, #20
 8006756:	2300      	movs	r3, #0
 8006758:	f8de 0000 	ldr.w	r0, [lr]
 800675c:	3301      	adds	r3, #1
 800675e:	b281      	uxth	r1, r0
 8006760:	fb02 7101 	mla	r1, r2, r1, r7
 8006764:	0c00      	lsrs	r0, r0, #16
 8006766:	0c0f      	lsrs	r7, r1, #16
 8006768:	fb02 7000 	mla	r0, r2, r0, r7
 800676c:	b289      	uxth	r1, r1
 800676e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006772:	429d      	cmp	r5, r3
 8006774:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006778:	f84e 1b04 	str.w	r1, [lr], #4
 800677c:	dcec      	bgt.n	8006758 <__multadd+0x12>
 800677e:	b1d7      	cbz	r7, 80067b6 <__multadd+0x70>
 8006780:	68a3      	ldr	r3, [r4, #8]
 8006782:	429d      	cmp	r5, r3
 8006784:	db12      	blt.n	80067ac <__multadd+0x66>
 8006786:	6861      	ldr	r1, [r4, #4]
 8006788:	4630      	mov	r0, r6
 800678a:	3101      	adds	r1, #1
 800678c:	f7ff ff8f 	bl	80066ae <_Balloc>
 8006790:	4680      	mov	r8, r0
 8006792:	6922      	ldr	r2, [r4, #16]
 8006794:	f104 010c 	add.w	r1, r4, #12
 8006798:	3202      	adds	r2, #2
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	300c      	adds	r0, #12
 800679e:	f7ff ff7b 	bl	8006698 <memcpy>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff ffb7 	bl	8006718 <_Bfree>
 80067aa:	4644      	mov	r4, r8
 80067ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067b0:	3501      	adds	r5, #1
 80067b2:	615f      	str	r7, [r3, #20]
 80067b4:	6125      	str	r5, [r4, #16]
 80067b6:	4620      	mov	r0, r4
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067bc <__s2b>:
 80067bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	4606      	mov	r6, r0
 80067c2:	4615      	mov	r5, r2
 80067c4:	461f      	mov	r7, r3
 80067c6:	2209      	movs	r2, #9
 80067c8:	3308      	adds	r3, #8
 80067ca:	460c      	mov	r4, r1
 80067cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80067d0:	2100      	movs	r1, #0
 80067d2:	2201      	movs	r2, #1
 80067d4:	429a      	cmp	r2, r3
 80067d6:	da02      	bge.n	80067de <__s2b+0x22>
 80067d8:	0052      	lsls	r2, r2, #1
 80067da:	3101      	adds	r1, #1
 80067dc:	e7fa      	b.n	80067d4 <__s2b+0x18>
 80067de:	4630      	mov	r0, r6
 80067e0:	f7ff ff65 	bl	80066ae <_Balloc>
 80067e4:	9b08      	ldr	r3, [sp, #32]
 80067e6:	2d09      	cmp	r5, #9
 80067e8:	6143      	str	r3, [r0, #20]
 80067ea:	f04f 0301 	mov.w	r3, #1
 80067ee:	6103      	str	r3, [r0, #16]
 80067f0:	dd11      	ble.n	8006816 <__s2b+0x5a>
 80067f2:	f104 0809 	add.w	r8, r4, #9
 80067f6:	46c1      	mov	r9, r8
 80067f8:	442c      	add	r4, r5
 80067fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80067fe:	4601      	mov	r1, r0
 8006800:	3b30      	subs	r3, #48	; 0x30
 8006802:	220a      	movs	r2, #10
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff ff9e 	bl	8006746 <__multadd>
 800680a:	45a1      	cmp	r9, r4
 800680c:	d1f5      	bne.n	80067fa <__s2b+0x3e>
 800680e:	eb08 0405 	add.w	r4, r8, r5
 8006812:	3c08      	subs	r4, #8
 8006814:	e001      	b.n	800681a <__s2b+0x5e>
 8006816:	340a      	adds	r4, #10
 8006818:	2509      	movs	r5, #9
 800681a:	1b2d      	subs	r5, r5, r4
 800681c:	1963      	adds	r3, r4, r5
 800681e:	429f      	cmp	r7, r3
 8006820:	dd08      	ble.n	8006834 <__s2b+0x78>
 8006822:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006826:	4601      	mov	r1, r0
 8006828:	3b30      	subs	r3, #48	; 0x30
 800682a:	220a      	movs	r2, #10
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff ff8a 	bl	8006746 <__multadd>
 8006832:	e7f3      	b.n	800681c <__s2b+0x60>
 8006834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006838 <__hi0bits>:
 8006838:	0c03      	lsrs	r3, r0, #16
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	b913      	cbnz	r3, 8006844 <__hi0bits+0xc>
 800683e:	0400      	lsls	r0, r0, #16
 8006840:	2310      	movs	r3, #16
 8006842:	e000      	b.n	8006846 <__hi0bits+0xe>
 8006844:	2300      	movs	r3, #0
 8006846:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800684a:	bf04      	itt	eq
 800684c:	0200      	lsleq	r0, r0, #8
 800684e:	3308      	addeq	r3, #8
 8006850:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006854:	bf04      	itt	eq
 8006856:	0100      	lsleq	r0, r0, #4
 8006858:	3304      	addeq	r3, #4
 800685a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800685e:	bf04      	itt	eq
 8006860:	0080      	lsleq	r0, r0, #2
 8006862:	3302      	addeq	r3, #2
 8006864:	2800      	cmp	r0, #0
 8006866:	db03      	blt.n	8006870 <__hi0bits+0x38>
 8006868:	0042      	lsls	r2, r0, #1
 800686a:	d503      	bpl.n	8006874 <__hi0bits+0x3c>
 800686c:	1c58      	adds	r0, r3, #1
 800686e:	4770      	bx	lr
 8006870:	4618      	mov	r0, r3
 8006872:	4770      	bx	lr
 8006874:	2020      	movs	r0, #32
 8006876:	4770      	bx	lr

08006878 <__lo0bits>:
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	f013 0207 	ands.w	r2, r3, #7
 800687e:	d00b      	beq.n	8006898 <__lo0bits+0x20>
 8006880:	07d9      	lsls	r1, r3, #31
 8006882:	d422      	bmi.n	80068ca <__lo0bits+0x52>
 8006884:	079a      	lsls	r2, r3, #30
 8006886:	bf4b      	itete	mi
 8006888:	085b      	lsrmi	r3, r3, #1
 800688a:	089b      	lsrpl	r3, r3, #2
 800688c:	6003      	strmi	r3, [r0, #0]
 800688e:	6003      	strpl	r3, [r0, #0]
 8006890:	bf4c      	ite	mi
 8006892:	2001      	movmi	r0, #1
 8006894:	2002      	movpl	r0, #2
 8006896:	4770      	bx	lr
 8006898:	b299      	uxth	r1, r3
 800689a:	b909      	cbnz	r1, 80068a0 <__lo0bits+0x28>
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	2210      	movs	r2, #16
 80068a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068a4:	bf04      	itt	eq
 80068a6:	0a1b      	lsreq	r3, r3, #8
 80068a8:	3208      	addeq	r2, #8
 80068aa:	0719      	lsls	r1, r3, #28
 80068ac:	bf04      	itt	eq
 80068ae:	091b      	lsreq	r3, r3, #4
 80068b0:	3204      	addeq	r2, #4
 80068b2:	0799      	lsls	r1, r3, #30
 80068b4:	bf04      	itt	eq
 80068b6:	089b      	lsreq	r3, r3, #2
 80068b8:	3202      	addeq	r2, #2
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d402      	bmi.n	80068c4 <__lo0bits+0x4c>
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	d005      	beq.n	80068ce <__lo0bits+0x56>
 80068c2:	3201      	adds	r2, #1
 80068c4:	6003      	str	r3, [r0, #0]
 80068c6:	4610      	mov	r0, r2
 80068c8:	4770      	bx	lr
 80068ca:	2000      	movs	r0, #0
 80068cc:	4770      	bx	lr
 80068ce:	2020      	movs	r0, #32
 80068d0:	4770      	bx	lr

080068d2 <__i2b>:
 80068d2:	b510      	push	{r4, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	2101      	movs	r1, #1
 80068d8:	f7ff fee9 	bl	80066ae <_Balloc>
 80068dc:	2201      	movs	r2, #1
 80068de:	6144      	str	r4, [r0, #20]
 80068e0:	6102      	str	r2, [r0, #16]
 80068e2:	bd10      	pop	{r4, pc}

080068e4 <__multiply>:
 80068e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4614      	mov	r4, r2
 80068ea:	690a      	ldr	r2, [r1, #16]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	4688      	mov	r8, r1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bfbe      	ittt	lt
 80068f4:	460b      	movlt	r3, r1
 80068f6:	46a0      	movlt	r8, r4
 80068f8:	461c      	movlt	r4, r3
 80068fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006906:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800690a:	eb07 0609 	add.w	r6, r7, r9
 800690e:	429e      	cmp	r6, r3
 8006910:	bfc8      	it	gt
 8006912:	3101      	addgt	r1, #1
 8006914:	f7ff fecb 	bl	80066ae <_Balloc>
 8006918:	f100 0514 	add.w	r5, r0, #20
 800691c:	462b      	mov	r3, r5
 800691e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8006922:	2200      	movs	r2, #0
 8006924:	4563      	cmp	r3, ip
 8006926:	d202      	bcs.n	800692e <__multiply+0x4a>
 8006928:	f843 2b04 	str.w	r2, [r3], #4
 800692c:	e7fa      	b.n	8006924 <__multiply+0x40>
 800692e:	f104 0214 	add.w	r2, r4, #20
 8006932:	f108 0114 	add.w	r1, r8, #20
 8006936:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800693a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	4293      	cmp	r3, r2
 8006946:	d957      	bls.n	80069f8 <__multiply+0x114>
 8006948:	f8b2 b000 	ldrh.w	fp, [r2]
 800694c:	f1bb 0f00 	cmp.w	fp, #0
 8006950:	d023      	beq.n	800699a <__multiply+0xb6>
 8006952:	4689      	mov	r9, r1
 8006954:	46ae      	mov	lr, r5
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	f859 4b04 	ldr.w	r4, [r9], #4
 800695e:	f8be a000 	ldrh.w	sl, [lr]
 8006962:	b2a3      	uxth	r3, r4
 8006964:	fb0b a303 	mla	r3, fp, r3, sl
 8006968:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800696c:	f8de 4000 	ldr.w	r4, [lr]
 8006970:	4443      	add	r3, r8
 8006972:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006976:	fb0b 840a 	mla	r4, fp, sl, r8
 800697a:	46f2      	mov	sl, lr
 800697c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006986:	454f      	cmp	r7, r9
 8006988:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800698c:	f84a 3b04 	str.w	r3, [sl], #4
 8006990:	d901      	bls.n	8006996 <__multiply+0xb2>
 8006992:	46d6      	mov	lr, sl
 8006994:	e7e1      	b.n	800695a <__multiply+0x76>
 8006996:	f8ce 8004 	str.w	r8, [lr, #4]
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	3204      	adds	r2, #4
 800699e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80069a2:	f1ba 0f00 	cmp.w	sl, #0
 80069a6:	d021      	beq.n	80069ec <__multiply+0x108>
 80069a8:	462c      	mov	r4, r5
 80069aa:	4689      	mov	r9, r1
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	f04f 0800 	mov.w	r8, #0
 80069b2:	f8b9 e000 	ldrh.w	lr, [r9]
 80069b6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	fb0a be0e 	mla	lr, sl, lr, fp
 80069c0:	46a3      	mov	fp, r4
 80069c2:	44f0      	add	r8, lr
 80069c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80069c8:	f84b 3b04 	str.w	r3, [fp], #4
 80069cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80069d0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	fb0a e303 	mla	r3, sl, r3, lr
 80069da:	454f      	cmp	r7, r9
 80069dc:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80069e0:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80069e4:	d901      	bls.n	80069ea <__multiply+0x106>
 80069e6:	465c      	mov	r4, fp
 80069e8:	e7e3      	b.n	80069b2 <__multiply+0xce>
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	3504      	adds	r5, #4
 80069ee:	e7a7      	b.n	8006940 <__multiply+0x5c>
 80069f0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80069f4:	b913      	cbnz	r3, 80069fc <__multiply+0x118>
 80069f6:	3e01      	subs	r6, #1
 80069f8:	2e00      	cmp	r6, #0
 80069fa:	dcf9      	bgt.n	80069f0 <__multiply+0x10c>
 80069fc:	6106      	str	r6, [r0, #16]
 80069fe:	b003      	add	sp, #12
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a04 <__pow5mult>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4615      	mov	r5, r2
 8006a0a:	f012 0203 	ands.w	r2, r2, #3
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460f      	mov	r7, r1
 8006a12:	d007      	beq.n	8006a24 <__pow5mult+0x20>
 8006a14:	4c21      	ldr	r4, [pc, #132]	; (8006a9c <__pow5mult+0x98>)
 8006a16:	3a01      	subs	r2, #1
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a1e:	f7ff fe92 	bl	8006746 <__multadd>
 8006a22:	4607      	mov	r7, r0
 8006a24:	10ad      	asrs	r5, r5, #2
 8006a26:	d036      	beq.n	8006a96 <__pow5mult+0x92>
 8006a28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a2a:	b93c      	cbnz	r4, 8006a3c <__pow5mult+0x38>
 8006a2c:	2010      	movs	r0, #16
 8006a2e:	f7ff fe0b 	bl	8006648 <malloc>
 8006a32:	6270      	str	r0, [r6, #36]	; 0x24
 8006a34:	6044      	str	r4, [r0, #4]
 8006a36:	6084      	str	r4, [r0, #8]
 8006a38:	6004      	str	r4, [r0, #0]
 8006a3a:	60c4      	str	r4, [r0, #12]
 8006a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a44:	b94c      	cbnz	r4, 8006a5a <__pow5mult+0x56>
 8006a46:	f240 2171 	movw	r1, #625	; 0x271
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff ff41 	bl	80068d2 <__i2b>
 8006a50:	4604      	mov	r4, r0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a58:	6003      	str	r3, [r0, #0]
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	07eb      	lsls	r3, r5, #31
 8006a60:	d50a      	bpl.n	8006a78 <__pow5mult+0x74>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4622      	mov	r2, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ff3c 	bl	80068e4 <__multiply>
 8006a6c:	4681      	mov	r9, r0
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fe51 	bl	8006718 <_Bfree>
 8006a76:	464f      	mov	r7, r9
 8006a78:	106d      	asrs	r5, r5, #1
 8006a7a:	d00c      	beq.n	8006a96 <__pow5mult+0x92>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	b108      	cbz	r0, 8006a84 <__pow5mult+0x80>
 8006a80:	4604      	mov	r4, r0
 8006a82:	e7ec      	b.n	8006a5e <__pow5mult+0x5a>
 8006a84:	4622      	mov	r2, r4
 8006a86:	4621      	mov	r1, r4
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7ff ff2b 	bl	80068e4 <__multiply>
 8006a8e:	6020      	str	r0, [r4, #0]
 8006a90:	f8c0 8000 	str.w	r8, [r0]
 8006a94:	e7f4      	b.n	8006a80 <__pow5mult+0x7c>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	08007d78 	.word	0x08007d78

08006aa0 <__lshift>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	6926      	ldr	r6, [r4, #16]
 8006aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab0:	4456      	add	r6, sl
 8006ab2:	6849      	ldr	r1, [r1, #4]
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	1c75      	adds	r5, r6, #1
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	da02      	bge.n	8006ac2 <__lshift+0x22>
 8006abc:	3101      	adds	r1, #1
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	e7fa      	b.n	8006ab8 <__lshift+0x18>
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7ff fdf3 	bl	80066ae <_Balloc>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4680      	mov	r8, r0
 8006acc:	461a      	mov	r2, r3
 8006ace:	f100 0114 	add.w	r1, r0, #20
 8006ad2:	4553      	cmp	r3, sl
 8006ad4:	da03      	bge.n	8006ade <__lshift+0x3e>
 8006ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ada:	3301      	adds	r3, #1
 8006adc:	e7f9      	b.n	8006ad2 <__lshift+0x32>
 8006ade:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8006ae2:	6920      	ldr	r0, [r4, #16]
 8006ae4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006ae8:	f019 091f 	ands.w	r9, r9, #31
 8006aec:	f104 0114 	add.w	r1, r4, #20
 8006af0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006af4:	d014      	beq.n	8006b20 <__lshift+0x80>
 8006af6:	f1c9 0c20 	rsb	ip, r9, #32
 8006afa:	2200      	movs	r2, #0
 8006afc:	6808      	ldr	r0, [r1, #0]
 8006afe:	469a      	mov	sl, r3
 8006b00:	fa00 f009 	lsl.w	r0, r0, r9
 8006b04:	4302      	orrs	r2, r0
 8006b06:	f843 2b04 	str.w	r2, [r3], #4
 8006b0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b0e:	458e      	cmp	lr, r1
 8006b10:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b14:	d8f2      	bhi.n	8006afc <__lshift+0x5c>
 8006b16:	f8ca 2004 	str.w	r2, [sl, #4]
 8006b1a:	b142      	cbz	r2, 8006b2e <__lshift+0x8e>
 8006b1c:	1cb5      	adds	r5, r6, #2
 8006b1e:	e006      	b.n	8006b2e <__lshift+0x8e>
 8006b20:	3b04      	subs	r3, #4
 8006b22:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b26:	458e      	cmp	lr, r1
 8006b28:	f843 2f04 	str.w	r2, [r3, #4]!
 8006b2c:	d8f9      	bhi.n	8006b22 <__lshift+0x82>
 8006b2e:	3d01      	subs	r5, #1
 8006b30:	4638      	mov	r0, r7
 8006b32:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b36:	4621      	mov	r1, r4
 8006b38:	f7ff fdee 	bl	8006718 <_Bfree>
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b42 <__mcmp>:
 8006b42:	6903      	ldr	r3, [r0, #16]
 8006b44:	690a      	ldr	r2, [r1, #16]
 8006b46:	b510      	push	{r4, lr}
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	d111      	bne.n	8006b70 <__mcmp+0x2e>
 8006b4c:	0092      	lsls	r2, r2, #2
 8006b4e:	3014      	adds	r0, #20
 8006b50:	3114      	adds	r1, #20
 8006b52:	1883      	adds	r3, r0, r2
 8006b54:	440a      	add	r2, r1
 8006b56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006b5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b5e:	428c      	cmp	r4, r1
 8006b60:	d002      	beq.n	8006b68 <__mcmp+0x26>
 8006b62:	d307      	bcc.n	8006b74 <__mcmp+0x32>
 8006b64:	2001      	movs	r0, #1
 8006b66:	bd10      	pop	{r4, pc}
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	d3f4      	bcc.n	8006b56 <__mcmp+0x14>
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd10      	pop	{r4, pc}
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__mdiff>:
 8006b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	4607      	mov	r7, r0
 8006b82:	4611      	mov	r1, r2
 8006b84:	4620      	mov	r0, r4
 8006b86:	4615      	mov	r5, r2
 8006b88:	f7ff ffdb 	bl	8006b42 <__mcmp>
 8006b8c:	1e06      	subs	r6, r0, #0
 8006b8e:	d108      	bne.n	8006ba2 <__mdiff+0x28>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4638      	mov	r0, r7
 8006b94:	f7ff fd8b 	bl	80066ae <_Balloc>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	6103      	str	r3, [r0, #16]
 8006b9c:	6146      	str	r6, [r0, #20]
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	bfbc      	itt	lt
 8006ba4:	4623      	movlt	r3, r4
 8006ba6:	462c      	movlt	r4, r5
 8006ba8:	4638      	mov	r0, r7
 8006baa:	6861      	ldr	r1, [r4, #4]
 8006bac:	bfba      	itte	lt
 8006bae:	461d      	movlt	r5, r3
 8006bb0:	2601      	movlt	r6, #1
 8006bb2:	2600      	movge	r6, #0
 8006bb4:	f7ff fd7b 	bl	80066ae <_Balloc>
 8006bb8:	692b      	ldr	r3, [r5, #16]
 8006bba:	60c6      	str	r6, [r0, #12]
 8006bbc:	6926      	ldr	r6, [r4, #16]
 8006bbe:	f105 0914 	add.w	r9, r5, #20
 8006bc2:	f104 0114 	add.w	r1, r4, #20
 8006bc6:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8006bca:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006bce:	f100 0514 	add.w	r5, r0, #20
 8006bd2:	f04f 0c00 	mov.w	ip, #0
 8006bd6:	f851 2b04 	ldr.w	r2, [r1], #4
 8006bda:	f859 4b04 	ldr.w	r4, [r9], #4
 8006bde:	b293      	uxth	r3, r2
 8006be0:	449c      	add	ip, r3
 8006be2:	b2a3      	uxth	r3, r4
 8006be4:	0c24      	lsrs	r4, r4, #16
 8006be6:	ebc3 030c 	rsb	r3, r3, ip
 8006bea:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8006bee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bf8:	45c8      	cmp	r8, r9
 8006bfa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006bfe:	468e      	mov	lr, r1
 8006c00:	f845 2b04 	str.w	r2, [r5], #4
 8006c04:	d8e7      	bhi.n	8006bd6 <__mdiff+0x5c>
 8006c06:	45be      	cmp	lr, r7
 8006c08:	d20e      	bcs.n	8006c28 <__mdiff+0xae>
 8006c0a:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006c0e:	b28a      	uxth	r2, r1
 8006c10:	4462      	add	r2, ip
 8006c12:	1413      	asrs	r3, r2, #16
 8006c14:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c22:	f845 2b04 	str.w	r2, [r5], #4
 8006c26:	e7ee      	b.n	8006c06 <__mdiff+0x8c>
 8006c28:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c2c:	b90b      	cbnz	r3, 8006c32 <__mdiff+0xb8>
 8006c2e:	3e01      	subs	r6, #1
 8006c30:	e7fa      	b.n	8006c28 <__mdiff+0xae>
 8006c32:	6106      	str	r6, [r0, #16]
 8006c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c38 <__ulp>:
 8006c38:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <__ulp+0x44>)
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dd02      	ble.n	8006c4a <__ulp+0x12>
 8006c44:	2000      	movs	r0, #0
 8006c46:	4619      	mov	r1, r3
 8006c48:	4770      	bx	lr
 8006c4a:	425b      	negs	r3, r3
 8006c4c:	151b      	asrs	r3, r3, #20
 8006c4e:	2b13      	cmp	r3, #19
 8006c50:	f04f 0000 	mov.w	r0, #0
 8006c54:	f04f 0100 	mov.w	r1, #0
 8006c58:	dc04      	bgt.n	8006c64 <__ulp+0x2c>
 8006c5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c5e:	fa42 f103 	asr.w	r1, r2, r3
 8006c62:	4770      	bx	lr
 8006c64:	3b14      	subs	r3, #20
 8006c66:	2b1e      	cmp	r3, #30
 8006c68:	f04f 0201 	mov.w	r2, #1
 8006c6c:	bfce      	itee	gt
 8006c6e:	4613      	movgt	r3, r2
 8006c70:	f1c3 031f 	rsble	r3, r3, #31
 8006c74:	fa02 f303 	lslle.w	r3, r2, r3
 8006c78:	4618      	mov	r0, r3
 8006c7a:	4770      	bx	lr
 8006c7c:	7ff00000 	.word	0x7ff00000

08006c80 <__b2d>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	6905      	ldr	r5, [r0, #16]
 8006c84:	f100 0614 	add.w	r6, r0, #20
 8006c88:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8006c8c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006c90:	1f2f      	subs	r7, r5, #4
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff fdd0 	bl	8006838 <__hi0bits>
 8006c98:	f1c0 0320 	rsb	r3, r0, #32
 8006c9c:	280a      	cmp	r0, #10
 8006c9e:	600b      	str	r3, [r1, #0]
 8006ca0:	dc14      	bgt.n	8006ccc <__b2d+0x4c>
 8006ca2:	f1c0 0e0b 	rsb	lr, r0, #11
 8006ca6:	fa24 f10e 	lsr.w	r1, r4, lr
 8006caa:	42be      	cmp	r6, r7
 8006cac:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8006cb0:	bf34      	ite	cc
 8006cb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006cb6:	2100      	movcs	r1, #0
 8006cb8:	3015      	adds	r0, #21
 8006cba:	fa04 f000 	lsl.w	r0, r4, r0
 8006cbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8006cc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cc6:	ea40 0201 	orr.w	r2, r0, r1
 8006cca:	e023      	b.n	8006d14 <__b2d+0x94>
 8006ccc:	42be      	cmp	r6, r7
 8006cce:	bf3a      	itte	cc
 8006cd0:	f1a5 0708 	subcc.w	r7, r5, #8
 8006cd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006cd8:	2100      	movcs	r1, #0
 8006cda:	380b      	subs	r0, #11
 8006cdc:	d015      	beq.n	8006d0a <__b2d+0x8a>
 8006cde:	4084      	lsls	r4, r0
 8006ce0:	f1c0 0520 	rsb	r5, r0, #32
 8006ce4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006ce8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006cec:	42b7      	cmp	r7, r6
 8006cee:	fa21 fe05 	lsr.w	lr, r1, r5
 8006cf2:	ea44 030e 	orr.w	r3, r4, lr
 8006cf6:	bf8c      	ite	hi
 8006cf8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8006cfc:	2400      	movls	r4, #0
 8006cfe:	fa01 f000 	lsl.w	r0, r1, r0
 8006d02:	40ec      	lsrs	r4, r5
 8006d04:	ea40 0204 	orr.w	r2, r0, r4
 8006d08:	e004      	b.n	8006d14 <__b2d+0x94>
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006d10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d1a <__d2b>:
 8006d1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d1e:	461c      	mov	r4, r3
 8006d20:	2101      	movs	r1, #1
 8006d22:	4690      	mov	r8, r2
 8006d24:	9e08      	ldr	r6, [sp, #32]
 8006d26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d28:	f7ff fcc1 	bl	80066ae <_Balloc>
 8006d2c:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006d30:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d34:	4607      	mov	r7, r0
 8006d36:	b10c      	cbz	r4, 8006d3c <__d2b+0x22>
 8006d38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d3c:	9201      	str	r2, [sp, #4]
 8006d3e:	f1b8 0f00 	cmp.w	r8, #0
 8006d42:	d019      	beq.n	8006d78 <__d2b+0x5e>
 8006d44:	a802      	add	r0, sp, #8
 8006d46:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006d4a:	f7ff fd95 	bl	8006878 <__lo0bits>
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	b148      	cbz	r0, 8006d66 <__d2b+0x4c>
 8006d52:	9a01      	ldr	r2, [sp, #4]
 8006d54:	f1c0 0120 	rsb	r1, r0, #32
 8006d58:	fa02 f101 	lsl.w	r1, r2, r1
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	40c2      	lsrs	r2, r0
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	e000      	b.n	8006d68 <__d2b+0x4e>
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2102      	movne	r1, #2
 8006d70:	2101      	moveq	r1, #1
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	6139      	str	r1, [r7, #16]
 8006d76:	e007      	b.n	8006d88 <__d2b+0x6e>
 8006d78:	a801      	add	r0, sp, #4
 8006d7a:	f7ff fd7d 	bl	8006878 <__lo0bits>
 8006d7e:	9b01      	ldr	r3, [sp, #4]
 8006d80:	2101      	movs	r1, #1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	6139      	str	r1, [r7, #16]
 8006d86:	3020      	adds	r0, #32
 8006d88:	b134      	cbz	r4, 8006d98 <__d2b+0x7e>
 8006d8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d8e:	4404      	add	r4, r0
 8006d90:	6034      	str	r4, [r6, #0]
 8006d92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d96:	e009      	b.n	8006dac <__d2b+0x92>
 8006d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006da0:	6030      	str	r0, [r6, #0]
 8006da2:	6918      	ldr	r0, [r3, #16]
 8006da4:	f7ff fd48 	bl	8006838 <__hi0bits>
 8006da8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006dac:	6028      	str	r0, [r5, #0]
 8006dae:	4638      	mov	r0, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006db6 <__ratio>:
 8006db6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dba:	4688      	mov	r8, r1
 8006dbc:	4669      	mov	r1, sp
 8006dbe:	4681      	mov	r9, r0
 8006dc0:	f7ff ff5e 	bl	8006c80 <__b2d>
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	a901      	add	r1, sp, #4
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f7ff ff58 	bl	8006c80 <__b2d>
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dd8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006ddc:	4620      	mov	r0, r4
 8006dde:	1a9a      	subs	r2, r3, r2
 8006de0:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006de4:	1ac9      	subs	r1, r1, r3
 8006de6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfcc      	ite	gt
 8006dee:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8006df2:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8006df6:	4632      	mov	r2, r6
 8006df8:	463b      	mov	r3, r7
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fca0 	bl	8000740 <__aeabi_ddiv>
 8006e00:	b003      	add	sp, #12
 8006e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e06 <__copybits>:
 8006e06:	3901      	subs	r1, #1
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	1149      	asrs	r1, r1, #5
 8006e0c:	6914      	ldr	r4, [r2, #16]
 8006e0e:	3101      	adds	r1, #1
 8006e10:	f102 0314 	add.w	r3, r2, #20
 8006e14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	4602      	mov	r2, r0
 8006e20:	d204      	bcs.n	8006e2c <__copybits+0x26>
 8006e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e26:	f840 2b04 	str.w	r2, [r0], #4
 8006e2a:	e7f7      	b.n	8006e1c <__copybits+0x16>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	428a      	cmp	r2, r1
 8006e30:	d202      	bcs.n	8006e38 <__copybits+0x32>
 8006e32:	f842 3b04 	str.w	r3, [r2], #4
 8006e36:	e7fa      	b.n	8006e2e <__copybits+0x28>
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <__any_on>:
 8006e3a:	f100 0214 	add.w	r2, r0, #20
 8006e3e:	6900      	ldr	r0, [r0, #16]
 8006e40:	114b      	asrs	r3, r1, #5
 8006e42:	4298      	cmp	r0, r3
 8006e44:	b510      	push	{r4, lr}
 8006e46:	db0c      	blt.n	8006e62 <__any_on+0x28>
 8006e48:	dd0c      	ble.n	8006e64 <__any_on+0x2a>
 8006e4a:	f011 011f 	ands.w	r1, r1, #31
 8006e4e:	d009      	beq.n	8006e64 <__any_on+0x2a>
 8006e50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e54:	fa24 f001 	lsr.w	r0, r4, r1
 8006e58:	fa00 f101 	lsl.w	r1, r0, r1
 8006e5c:	428c      	cmp	r4, r1
 8006e5e:	d10c      	bne.n	8006e7a <__any_on+0x40>
 8006e60:	e000      	b.n	8006e64 <__any_on+0x2a>
 8006e62:	4603      	mov	r3, r0
 8006e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d904      	bls.n	8006e76 <__any_on+0x3c>
 8006e6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d0f9      	beq.n	8006e68 <__any_on+0x2e>
 8006e74:	e001      	b.n	8006e7a <__any_on+0x40>
 8006e76:	2000      	movs	r0, #0
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <_calloc_r>:
 8006e7e:	b538      	push	{r3, r4, r5, lr}
 8006e80:	fb02 f401 	mul.w	r4, r2, r1
 8006e84:	4621      	mov	r1, r4
 8006e86:	f000 f855 	bl	8006f34 <_malloc_r>
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b118      	cbz	r0, 8006e96 <_calloc_r+0x18>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	2100      	movs	r1, #0
 8006e92:	f7fc fa2b 	bl	80032ec <memset>
 8006e96:	4628      	mov	r0, r5
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e9c <_free_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d044      	beq.n	8006f2e <_free_r+0x92>
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f0c      	subs	r4, r1, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfb8      	it	lt
 8006eae:	18e4      	addlt	r4, r4, r3
 8006eb0:	f000 fc17 	bl	80076e2 <__malloc_lock>
 8006eb4:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <_free_r+0x94>)
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	b913      	cbnz	r3, 8006ec2 <_free_r+0x26>
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6014      	str	r4, [r2, #0]
 8006ec0:	e030      	b.n	8006f24 <_free_r+0x88>
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	d90d      	bls.n	8006ee2 <_free_r+0x46>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	18a0      	adds	r0, r4, r2
 8006eca:	4283      	cmp	r3, r0
 8006ecc:	bf01      	itttt	eq
 8006ece:	6818      	ldreq	r0, [r3, #0]
 8006ed0:	685b      	ldreq	r3, [r3, #4]
 8006ed2:	1812      	addeq	r2, r2, r0
 8006ed4:	6022      	streq	r2, [r4, #0]
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	600c      	str	r4, [r1, #0]
 8006eda:	e023      	b.n	8006f24 <_free_r+0x88>
 8006edc:	42a2      	cmp	r2, r4
 8006ede:	d803      	bhi.n	8006ee8 <_free_r+0x4c>
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	d1f9      	bne.n	8006edc <_free_r+0x40>
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	1819      	adds	r1, r3, r0
 8006eec:	42a1      	cmp	r1, r4
 8006eee:	d10b      	bne.n	8006f08 <_free_r+0x6c>
 8006ef0:	6821      	ldr	r1, [r4, #0]
 8006ef2:	4401      	add	r1, r0
 8006ef4:	1858      	adds	r0, r3, r1
 8006ef6:	4282      	cmp	r2, r0
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	d113      	bne.n	8006f24 <_free_r+0x88>
 8006efc:	6810      	ldr	r0, [r2, #0]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	4401      	add	r1, r0
 8006f02:	6019      	str	r1, [r3, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	e00d      	b.n	8006f24 <_free_r+0x88>
 8006f08:	d902      	bls.n	8006f10 <_free_r+0x74>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	e009      	b.n	8006f24 <_free_r+0x88>
 8006f10:	6821      	ldr	r1, [r4, #0]
 8006f12:	1860      	adds	r0, r4, r1
 8006f14:	4282      	cmp	r2, r0
 8006f16:	bf01      	itttt	eq
 8006f18:	6810      	ldreq	r0, [r2, #0]
 8006f1a:	6852      	ldreq	r2, [r2, #4]
 8006f1c:	1809      	addeq	r1, r1, r0
 8006f1e:	6021      	streq	r1, [r4, #0]
 8006f20:	6062      	str	r2, [r4, #4]
 8006f22:	605c      	str	r4, [r3, #4]
 8006f24:	4628      	mov	r0, r5
 8006f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2a:	f000 bbdb 	b.w	80076e4 <__malloc_unlock>
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	200002e8 	.word	0x200002e8

08006f34 <_malloc_r>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	1ccd      	adds	r5, r1, #3
 8006f38:	f025 0503 	bic.w	r5, r5, #3
 8006f3c:	3508      	adds	r5, #8
 8006f3e:	2d0c      	cmp	r5, #12
 8006f40:	bf38      	it	cc
 8006f42:	250c      	movcc	r5, #12
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	4606      	mov	r6, r0
 8006f48:	db01      	blt.n	8006f4e <_malloc_r+0x1a>
 8006f4a:	42a9      	cmp	r1, r5
 8006f4c:	d902      	bls.n	8006f54 <_malloc_r+0x20>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	e046      	b.n	8006fe2 <_malloc_r+0xae>
 8006f54:	f000 fbc5 	bl	80076e2 <__malloc_lock>
 8006f58:	4b23      	ldr	r3, [pc, #140]	; (8006fe8 <_malloc_r+0xb4>)
 8006f5a:	681c      	ldr	r4, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4621      	mov	r1, r4
 8006f60:	b1a1      	cbz	r1, 8006f8c <_malloc_r+0x58>
 8006f62:	680b      	ldr	r3, [r1, #0]
 8006f64:	1b5b      	subs	r3, r3, r5
 8006f66:	d40e      	bmi.n	8006f86 <_malloc_r+0x52>
 8006f68:	2b0b      	cmp	r3, #11
 8006f6a:	d903      	bls.n	8006f74 <_malloc_r+0x40>
 8006f6c:	600b      	str	r3, [r1, #0]
 8006f6e:	18cc      	adds	r4, r1, r3
 8006f70:	50cd      	str	r5, [r1, r3]
 8006f72:	e01e      	b.n	8006fb2 <_malloc_r+0x7e>
 8006f74:	428c      	cmp	r4, r1
 8006f76:	bf0b      	itete	eq
 8006f78:	6863      	ldreq	r3, [r4, #4]
 8006f7a:	684b      	ldrne	r3, [r1, #4]
 8006f7c:	6013      	streq	r3, [r2, #0]
 8006f7e:	6063      	strne	r3, [r4, #4]
 8006f80:	bf18      	it	ne
 8006f82:	460c      	movne	r4, r1
 8006f84:	e015      	b.n	8006fb2 <_malloc_r+0x7e>
 8006f86:	460c      	mov	r4, r1
 8006f88:	6849      	ldr	r1, [r1, #4]
 8006f8a:	e7e9      	b.n	8006f60 <_malloc_r+0x2c>
 8006f8c:	4c17      	ldr	r4, [pc, #92]	; (8006fec <_malloc_r+0xb8>)
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	b91b      	cbnz	r3, 8006f9a <_malloc_r+0x66>
 8006f92:	4630      	mov	r0, r6
 8006f94:	f000 fabe 	bl	8007514 <_sbrk_r>
 8006f98:	6020      	str	r0, [r4, #0]
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 fab9 	bl	8007514 <_sbrk_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d018      	beq.n	8006fd8 <_malloc_r+0xa4>
 8006fa6:	1cc4      	adds	r4, r0, #3
 8006fa8:	f024 0403 	bic.w	r4, r4, #3
 8006fac:	42a0      	cmp	r0, r4
 8006fae:	d10d      	bne.n	8006fcc <_malloc_r+0x98>
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f000 fb96 	bl	80076e4 <__malloc_unlock>
 8006fb8:	f104 000b 	add.w	r0, r4, #11
 8006fbc:	1d23      	adds	r3, r4, #4
 8006fbe:	f020 0007 	bic.w	r0, r0, #7
 8006fc2:	1ac3      	subs	r3, r0, r3
 8006fc4:	d00e      	beq.n	8006fe4 <_malloc_r+0xb0>
 8006fc6:	425a      	negs	r2, r3
 8006fc8:	50e2      	str	r2, [r4, r3]
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	1a21      	subs	r1, r4, r0
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 faa0 	bl	8007514 <_sbrk_r>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d1eb      	bne.n	8006fb0 <_malloc_r+0x7c>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	6033      	str	r3, [r6, #0]
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f000 fb81 	bl	80076e4 <__malloc_unlock>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200002e8 	.word	0x200002e8
 8006fec:	200002e4 	.word	0x200002e4

08006ff0 <__ssputs_r>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	688e      	ldr	r6, [r1, #8]
 8006ff6:	4682      	mov	sl, r0
 8006ff8:	429e      	cmp	r6, r3
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	4691      	mov	r9, r2
 8006ffe:	4698      	mov	r8, r3
 8007000:	d83e      	bhi.n	8007080 <__ssputs_r+0x90>
 8007002:	898a      	ldrh	r2, [r1, #12]
 8007004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007008:	d03a      	beq.n	8007080 <__ssputs_r+0x90>
 800700a:	6825      	ldr	r5, [r4, #0]
 800700c:	6909      	ldr	r1, [r1, #16]
 800700e:	2302      	movs	r3, #2
 8007010:	1a6f      	subs	r7, r5, r1
 8007012:	6965      	ldr	r5, [r4, #20]
 8007014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007018:	fb95 f5f3 	sdiv	r5, r5, r3
 800701c:	1c7b      	adds	r3, r7, #1
 800701e:	4443      	add	r3, r8
 8007020:	429d      	cmp	r5, r3
 8007022:	bf38      	it	cc
 8007024:	461d      	movcc	r5, r3
 8007026:	0553      	lsls	r3, r2, #21
 8007028:	d50f      	bpl.n	800704a <__ssputs_r+0x5a>
 800702a:	4629      	mov	r1, r5
 800702c:	f7ff ff82 	bl	8006f34 <_malloc_r>
 8007030:	4606      	mov	r6, r0
 8007032:	b198      	cbz	r0, 800705c <__ssputs_r+0x6c>
 8007034:	463a      	mov	r2, r7
 8007036:	6921      	ldr	r1, [r4, #16]
 8007038:	f7ff fb2e 	bl	8006698 <memcpy>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	e013      	b.n	8007072 <__ssputs_r+0x82>
 800704a:	462a      	mov	r2, r5
 800704c:	f000 fb4b 	bl	80076e6 <_realloc_r>
 8007050:	4606      	mov	r6, r0
 8007052:	b970      	cbnz	r0, 8007072 <__ssputs_r+0x82>
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	4650      	mov	r0, sl
 8007058:	f7ff ff20 	bl	8006e9c <_free_r>
 800705c:	230c      	movs	r3, #12
 800705e:	f8ca 3000 	str.w	r3, [sl]
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007072:	6126      	str	r6, [r4, #16]
 8007074:	443e      	add	r6, r7
 8007076:	6026      	str	r6, [r4, #0]
 8007078:	4646      	mov	r6, r8
 800707a:	6165      	str	r5, [r4, #20]
 800707c:	1bed      	subs	r5, r5, r7
 800707e:	60a5      	str	r5, [r4, #8]
 8007080:	4546      	cmp	r6, r8
 8007082:	bf28      	it	cs
 8007084:	4646      	movcs	r6, r8
 8007086:	4649      	mov	r1, r9
 8007088:	4632      	mov	r2, r6
 800708a:	6820      	ldr	r0, [r4, #0]
 800708c:	f000 fb0e 	bl	80076ac <memmove>
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	2000      	movs	r0, #0
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	60a3      	str	r3, [r4, #8]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	441e      	add	r6, r3
 800709c:	6026      	str	r6, [r4, #0]
 800709e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080070a4 <_svfiprintf_r>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b09d      	sub	sp, #116	; 0x74
 80070aa:	9303      	str	r3, [sp, #12]
 80070ac:	898b      	ldrh	r3, [r1, #12]
 80070ae:	4680      	mov	r8, r0
 80070b0:	061c      	lsls	r4, r3, #24
 80070b2:	460d      	mov	r5, r1
 80070b4:	4616      	mov	r6, r2
 80070b6:	d50d      	bpl.n	80070d4 <_svfiprintf_r+0x30>
 80070b8:	690b      	ldr	r3, [r1, #16]
 80070ba:	b95b      	cbnz	r3, 80070d4 <_svfiprintf_r+0x30>
 80070bc:	2140      	movs	r1, #64	; 0x40
 80070be:	f7ff ff39 	bl	8006f34 <_malloc_r>
 80070c2:	6028      	str	r0, [r5, #0]
 80070c4:	6128      	str	r0, [r5, #16]
 80070c6:	b918      	cbnz	r0, 80070d0 <_svfiprintf_r+0x2c>
 80070c8:	230c      	movs	r3, #12
 80070ca:	f8c8 3000 	str.w	r3, [r8]
 80070ce:	e0cd      	b.n	800726c <_svfiprintf_r+0x1c8>
 80070d0:	2340      	movs	r3, #64	; 0x40
 80070d2:	616b      	str	r3, [r5, #20]
 80070d4:	2300      	movs	r3, #0
 80070d6:	9309      	str	r3, [sp, #36]	; 0x24
 80070d8:	2320      	movs	r3, #32
 80070da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070de:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800727c <_svfiprintf_r+0x1d8>
 80070e2:	2330      	movs	r3, #48	; 0x30
 80070e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e8:	4637      	mov	r7, r6
 80070ea:	463c      	mov	r4, r7
 80070ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070f0:	b91b      	cbnz	r3, 80070fa <_svfiprintf_r+0x56>
 80070f2:	ebb7 0906 	subs.w	r9, r7, r6
 80070f6:	d010      	beq.n	800711a <_svfiprintf_r+0x76>
 80070f8:	e003      	b.n	8007102 <_svfiprintf_r+0x5e>
 80070fa:	2b25      	cmp	r3, #37	; 0x25
 80070fc:	d0f9      	beq.n	80070f2 <_svfiprintf_r+0x4e>
 80070fe:	4627      	mov	r7, r4
 8007100:	e7f3      	b.n	80070ea <_svfiprintf_r+0x46>
 8007102:	464b      	mov	r3, r9
 8007104:	4632      	mov	r2, r6
 8007106:	4629      	mov	r1, r5
 8007108:	4640      	mov	r0, r8
 800710a:	f7ff ff71 	bl	8006ff0 <__ssputs_r>
 800710e:	3001      	adds	r0, #1
 8007110:	f000 80a7 	beq.w	8007262 <_svfiprintf_r+0x1be>
 8007114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007116:	444b      	add	r3, r9
 8007118:	9309      	str	r3, [sp, #36]	; 0x24
 800711a:	783b      	ldrb	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80a0 	beq.w	8007262 <_svfiprintf_r+0x1be>
 8007122:	2300      	movs	r3, #0
 8007124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	9307      	str	r3, [sp, #28]
 800712c:	9205      	str	r2, [sp, #20]
 800712e:	9306      	str	r3, [sp, #24]
 8007130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007134:	931a      	str	r3, [sp, #104]	; 0x68
 8007136:	2601      	movs	r6, #1
 8007138:	2205      	movs	r2, #5
 800713a:	7821      	ldrb	r1, [r4, #0]
 800713c:	484e      	ldr	r0, [pc, #312]	; (8007278 <_svfiprintf_r+0x1d4>)
 800713e:	f7ff fa9d 	bl	800667c <memchr>
 8007142:	1c67      	adds	r7, r4, #1
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	b138      	cbz	r0, 8007158 <_svfiprintf_r+0xb4>
 8007148:	4a4b      	ldr	r2, [pc, #300]	; (8007278 <_svfiprintf_r+0x1d4>)
 800714a:	463c      	mov	r4, r7
 800714c:	1a80      	subs	r0, r0, r2
 800714e:	fa06 f000 	lsl.w	r0, r6, r0
 8007152:	4318      	orrs	r0, r3
 8007154:	9004      	str	r0, [sp, #16]
 8007156:	e7ef      	b.n	8007138 <_svfiprintf_r+0x94>
 8007158:	06d9      	lsls	r1, r3, #27
 800715a:	bf44      	itt	mi
 800715c:	2220      	movmi	r2, #32
 800715e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007162:	071a      	lsls	r2, r3, #28
 8007164:	bf44      	itt	mi
 8007166:	222b      	movmi	r2, #43	; 0x2b
 8007168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800716c:	7822      	ldrb	r2, [r4, #0]
 800716e:	2a2a      	cmp	r2, #42	; 0x2a
 8007170:	d003      	beq.n	800717a <_svfiprintf_r+0xd6>
 8007172:	9a07      	ldr	r2, [sp, #28]
 8007174:	2100      	movs	r1, #0
 8007176:	200a      	movs	r0, #10
 8007178:	e00b      	b.n	8007192 <_svfiprintf_r+0xee>
 800717a:	9a03      	ldr	r2, [sp, #12]
 800717c:	1d11      	adds	r1, r2, #4
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	9103      	str	r1, [sp, #12]
 8007182:	2a00      	cmp	r2, #0
 8007184:	da10      	bge.n	80071a8 <_svfiprintf_r+0x104>
 8007186:	4252      	negs	r2, r2
 8007188:	f043 0002 	orr.w	r0, r3, #2
 800718c:	9207      	str	r2, [sp, #28]
 800718e:	9004      	str	r0, [sp, #16]
 8007190:	e00b      	b.n	80071aa <_svfiprintf_r+0x106>
 8007192:	4627      	mov	r7, r4
 8007194:	783b      	ldrb	r3, [r7, #0]
 8007196:	3401      	adds	r4, #1
 8007198:	3b30      	subs	r3, #48	; 0x30
 800719a:	2b09      	cmp	r3, #9
 800719c:	d803      	bhi.n	80071a6 <_svfiprintf_r+0x102>
 800719e:	fb00 3202 	mla	r2, r0, r2, r3
 80071a2:	2101      	movs	r1, #1
 80071a4:	e7f5      	b.n	8007192 <_svfiprintf_r+0xee>
 80071a6:	b101      	cbz	r1, 80071aa <_svfiprintf_r+0x106>
 80071a8:	9207      	str	r2, [sp, #28]
 80071aa:	783b      	ldrb	r3, [r7, #0]
 80071ac:	2b2e      	cmp	r3, #46	; 0x2e
 80071ae:	d11e      	bne.n	80071ee <_svfiprintf_r+0x14a>
 80071b0:	787b      	ldrb	r3, [r7, #1]
 80071b2:	2b2a      	cmp	r3, #42	; 0x2a
 80071b4:	d10a      	bne.n	80071cc <_svfiprintf_r+0x128>
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	3702      	adds	r7, #2
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9203      	str	r2, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb8      	it	lt
 80071c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	e010      	b.n	80071ee <_svfiprintf_r+0x14a>
 80071cc:	2300      	movs	r3, #0
 80071ce:	4619      	mov	r1, r3
 80071d0:	9305      	str	r3, [sp, #20]
 80071d2:	1c78      	adds	r0, r7, #1
 80071d4:	240a      	movs	r4, #10
 80071d6:	4607      	mov	r7, r0
 80071d8:	783a      	ldrb	r2, [r7, #0]
 80071da:	3001      	adds	r0, #1
 80071dc:	3a30      	subs	r2, #48	; 0x30
 80071de:	2a09      	cmp	r2, #9
 80071e0:	d803      	bhi.n	80071ea <_svfiprintf_r+0x146>
 80071e2:	fb04 2101 	mla	r1, r4, r1, r2
 80071e6:	2301      	movs	r3, #1
 80071e8:	e7f5      	b.n	80071d6 <_svfiprintf_r+0x132>
 80071ea:	b103      	cbz	r3, 80071ee <_svfiprintf_r+0x14a>
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	2203      	movs	r2, #3
 80071f0:	7839      	ldrb	r1, [r7, #0]
 80071f2:	4822      	ldr	r0, [pc, #136]	; (800727c <_svfiprintf_r+0x1d8>)
 80071f4:	f7ff fa42 	bl	800667c <memchr>
 80071f8:	b140      	cbz	r0, 800720c <_svfiprintf_r+0x168>
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	ebcb 0000 	rsb	r0, fp, r0
 8007200:	fa03 f000 	lsl.w	r0, r3, r0
 8007204:	9b04      	ldr	r3, [sp, #16]
 8007206:	3701      	adds	r7, #1
 8007208:	4318      	orrs	r0, r3
 800720a:	9004      	str	r0, [sp, #16]
 800720c:	7839      	ldrb	r1, [r7, #0]
 800720e:	2206      	movs	r2, #6
 8007210:	481b      	ldr	r0, [pc, #108]	; (8007280 <_svfiprintf_r+0x1dc>)
 8007212:	1c7e      	adds	r6, r7, #1
 8007214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007218:	f7ff fa30 	bl	800667c <memchr>
 800721c:	b188      	cbz	r0, 8007242 <_svfiprintf_r+0x19e>
 800721e:	4b19      	ldr	r3, [pc, #100]	; (8007284 <_svfiprintf_r+0x1e0>)
 8007220:	b933      	cbnz	r3, 8007230 <_svfiprintf_r+0x18c>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	3307      	adds	r3, #7
 8007226:	f023 0307 	bic.w	r3, r3, #7
 800722a:	3308      	adds	r3, #8
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	e014      	b.n	800725a <_svfiprintf_r+0x1b6>
 8007230:	ab03      	add	r3, sp, #12
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	462a      	mov	r2, r5
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <_svfiprintf_r+0x1e4>)
 8007238:	a904      	add	r1, sp, #16
 800723a:	4640      	mov	r0, r8
 800723c:	f7fc f8f0 	bl	8003420 <_printf_float>
 8007240:	e007      	b.n	8007252 <_svfiprintf_r+0x1ae>
 8007242:	ab03      	add	r3, sp, #12
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	462a      	mov	r2, r5
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <_svfiprintf_r+0x1e4>)
 800724a:	a904      	add	r1, sp, #16
 800724c:	4640      	mov	r0, r8
 800724e:	f7fc fba1 	bl	8003994 <_printf_i>
 8007252:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007256:	4682      	mov	sl, r0
 8007258:	d003      	beq.n	8007262 <_svfiprintf_r+0x1be>
 800725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725c:	4453      	add	r3, sl
 800725e:	9309      	str	r3, [sp, #36]	; 0x24
 8007260:	e742      	b.n	80070e8 <_svfiprintf_r+0x44>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	065b      	lsls	r3, r3, #25
 8007266:	d401      	bmi.n	800726c <_svfiprintf_r+0x1c8>
 8007268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726a:	e001      	b.n	8007270 <_svfiprintf_r+0x1cc>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007270:	b01d      	add	sp, #116	; 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	bf00      	nop
 8007278:	08007d84 	.word	0x08007d84
 800727c:	08007d8a 	.word	0x08007d8a
 8007280:	08007d8e 	.word	0x08007d8e
 8007284:	08003421 	.word	0x08003421
 8007288:	08006ff1 	.word	0x08006ff1

0800728c <__sfputc_r>:
 800728c:	6893      	ldr	r3, [r2, #8]
 800728e:	b410      	push	{r4}
 8007290:	3b01      	subs	r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	6093      	str	r3, [r2, #8]
 8007296:	da08      	bge.n	80072aa <__sfputc_r+0x1e>
 8007298:	6994      	ldr	r4, [r2, #24]
 800729a:	42a3      	cmp	r3, r4
 800729c:	db02      	blt.n	80072a4 <__sfputc_r+0x18>
 800729e:	b2cb      	uxtb	r3, r1
 80072a0:	2b0a      	cmp	r3, #10
 80072a2:	d102      	bne.n	80072aa <__sfputc_r+0x1e>
 80072a4:	bc10      	pop	{r4}
 80072a6:	f7fd bddd 	b.w	8004e64 <__swbuf_r>
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	1c58      	adds	r0, r3, #1
 80072ae:	6010      	str	r0, [r2, #0]
 80072b0:	7019      	strb	r1, [r3, #0]
 80072b2:	b2c8      	uxtb	r0, r1
 80072b4:	bc10      	pop	{r4}
 80072b6:	4770      	bx	lr

080072b8 <__sfputs_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	4614      	mov	r4, r2
 80072c0:	18d5      	adds	r5, r2, r3
 80072c2:	42ac      	cmp	r4, r5
 80072c4:	d008      	beq.n	80072d8 <__sfputs_r+0x20>
 80072c6:	463a      	mov	r2, r7
 80072c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffdd 	bl	800728c <__sfputc_r>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d1f5      	bne.n	80072c2 <__sfputs_r+0xa>
 80072d6:	e000      	b.n	80072da <__sfputs_r+0x22>
 80072d8:	2000      	movs	r0, #0
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072dc <_vfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	b09d      	sub	sp, #116	; 0x74
 80072e2:	460c      	mov	r4, r1
 80072e4:	4617      	mov	r7, r2
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	4606      	mov	r6, r0
 80072ea:	b118      	cbz	r0, 80072f4 <_vfiprintf_r+0x18>
 80072ec:	6983      	ldr	r3, [r0, #24]
 80072ee:	b90b      	cbnz	r3, 80072f4 <_vfiprintf_r+0x18>
 80072f0:	f7fe fd8e 	bl	8005e10 <__sinit>
 80072f4:	4b7f      	ldr	r3, [pc, #508]	; (80074f4 <_vfiprintf_r+0x218>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d101      	bne.n	80072fe <_vfiprintf_r+0x22>
 80072fa:	6874      	ldr	r4, [r6, #4]
 80072fc:	e008      	b.n	8007310 <_vfiprintf_r+0x34>
 80072fe:	4b7e      	ldr	r3, [pc, #504]	; (80074f8 <_vfiprintf_r+0x21c>)
 8007300:	429c      	cmp	r4, r3
 8007302:	d101      	bne.n	8007308 <_vfiprintf_r+0x2c>
 8007304:	68b4      	ldr	r4, [r6, #8]
 8007306:	e003      	b.n	8007310 <_vfiprintf_r+0x34>
 8007308:	4b7c      	ldr	r3, [pc, #496]	; (80074fc <_vfiprintf_r+0x220>)
 800730a:	429c      	cmp	r4, r3
 800730c:	bf08      	it	eq
 800730e:	68f4      	ldreq	r4, [r6, #12]
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	0718      	lsls	r0, r3, #28
 8007314:	d50c      	bpl.n	8007330 <_vfiprintf_r+0x54>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	b153      	cbz	r3, 8007330 <_vfiprintf_r+0x54>
 800731a:	2300      	movs	r3, #0
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	2320      	movs	r3, #32
 8007320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007324:	2330      	movs	r3, #48	; 0x30
 8007326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800732a:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8007500 <_vfiprintf_r+0x224>
 800732e:	e044      	b.n	80073ba <_vfiprintf_r+0xde>
 8007330:	4621      	mov	r1, r4
 8007332:	4630      	mov	r0, r6
 8007334:	f7fd fdea 	bl	8004f0c <__swsetup_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0ee      	beq.n	800731a <_vfiprintf_r+0x3e>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007340:	e0d5      	b.n	80074ee <_vfiprintf_r+0x212>
 8007342:	9a03      	ldr	r2, [sp, #12]
 8007344:	1d11      	adds	r1, r2, #4
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	9103      	str	r1, [sp, #12]
 800734a:	2a00      	cmp	r2, #0
 800734c:	f280 808c 	bge.w	8007468 <_vfiprintf_r+0x18c>
 8007350:	4252      	negs	r2, r2
 8007352:	f043 0002 	orr.w	r0, r3, #2
 8007356:	9207      	str	r2, [sp, #28]
 8007358:	9004      	str	r0, [sp, #16]
 800735a:	f898 3000 	ldrb.w	r3, [r8]
 800735e:	2b2e      	cmp	r3, #46	; 0x2e
 8007360:	f000 8084 	beq.w	800746c <_vfiprintf_r+0x190>
 8007364:	2203      	movs	r2, #3
 8007366:	f898 1000 	ldrb.w	r1, [r8]
 800736a:	4865      	ldr	r0, [pc, #404]	; (8007500 <_vfiprintf_r+0x224>)
 800736c:	f7ff f986 	bl	800667c <memchr>
 8007370:	b148      	cbz	r0, 8007386 <_vfiprintf_r+0xaa>
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	ebcb 0000 	rsb	r0, fp, r0
 8007378:	fa03 f000 	lsl.w	r0, r3, r0
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	f108 0801 	add.w	r8, r8, #1
 8007382:	4318      	orrs	r0, r3
 8007384:	9004      	str	r0, [sp, #16]
 8007386:	f898 1000 	ldrb.w	r1, [r8]
 800738a:	2206      	movs	r2, #6
 800738c:	485d      	ldr	r0, [pc, #372]	; (8007504 <_vfiprintf_r+0x228>)
 800738e:	f108 0701 	add.w	r7, r8, #1
 8007392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007396:	f7ff f971 	bl	800667c <memchr>
 800739a:	2800      	cmp	r0, #0
 800739c:	f000 8095 	beq.w	80074ca <_vfiprintf_r+0x1ee>
 80073a0:	4b59      	ldr	r3, [pc, #356]	; (8007508 <_vfiprintf_r+0x22c>)
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 8088 	bne.w	80074b8 <_vfiprintf_r+0x1dc>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	3307      	adds	r3, #7
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	4453      	add	r3, sl
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	46b8      	mov	r8, r7
 80073bc:	4645      	mov	r5, r8
 80073be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073c2:	b91b      	cbnz	r3, 80073cc <_vfiprintf_r+0xf0>
 80073c4:	ebb8 0907 	subs.w	r9, r8, r7
 80073c8:	d00f      	beq.n	80073ea <_vfiprintf_r+0x10e>
 80073ca:	e003      	b.n	80073d4 <_vfiprintf_r+0xf8>
 80073cc:	2b25      	cmp	r3, #37	; 0x25
 80073ce:	d0f9      	beq.n	80073c4 <_vfiprintf_r+0xe8>
 80073d0:	46a8      	mov	r8, r5
 80073d2:	e7f3      	b.n	80073bc <_vfiprintf_r+0xe0>
 80073d4:	464b      	mov	r3, r9
 80073d6:	463a      	mov	r2, r7
 80073d8:	4621      	mov	r1, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ff6c 	bl	80072b8 <__sfputs_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d07f      	beq.n	80074e4 <_vfiprintf_r+0x208>
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	444b      	add	r3, r9
 80073e8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ea:	f898 3000 	ldrb.w	r3, [r8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d078      	beq.n	80074e4 <_vfiprintf_r+0x208>
 80073f2:	2300      	movs	r3, #0
 80073f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	9307      	str	r3, [sp, #28]
 80073fc:	9205      	str	r2, [sp, #20]
 80073fe:	9306      	str	r3, [sp, #24]
 8007400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007404:	931a      	str	r3, [sp, #104]	; 0x68
 8007406:	2701      	movs	r7, #1
 8007408:	2205      	movs	r2, #5
 800740a:	7829      	ldrb	r1, [r5, #0]
 800740c:	483f      	ldr	r0, [pc, #252]	; (800750c <_vfiprintf_r+0x230>)
 800740e:	f7ff f935 	bl	800667c <memchr>
 8007412:	f105 0801 	add.w	r8, r5, #1
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	b138      	cbz	r0, 800742a <_vfiprintf_r+0x14e>
 800741a:	4a3c      	ldr	r2, [pc, #240]	; (800750c <_vfiprintf_r+0x230>)
 800741c:	4645      	mov	r5, r8
 800741e:	1a80      	subs	r0, r0, r2
 8007420:	fa07 f000 	lsl.w	r0, r7, r0
 8007424:	4318      	orrs	r0, r3
 8007426:	9004      	str	r0, [sp, #16]
 8007428:	e7ee      	b.n	8007408 <_vfiprintf_r+0x12c>
 800742a:	06d9      	lsls	r1, r3, #27
 800742c:	bf44      	itt	mi
 800742e:	2220      	movmi	r2, #32
 8007430:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007434:	071a      	lsls	r2, r3, #28
 8007436:	bf44      	itt	mi
 8007438:	222b      	movmi	r2, #43	; 0x2b
 800743a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800743e:	782a      	ldrb	r2, [r5, #0]
 8007440:	2a2a      	cmp	r2, #42	; 0x2a
 8007442:	f43f af7e 	beq.w	8007342 <_vfiprintf_r+0x66>
 8007446:	9a07      	ldr	r2, [sp, #28]
 8007448:	2100      	movs	r1, #0
 800744a:	200a      	movs	r0, #10
 800744c:	46a8      	mov	r8, r5
 800744e:	f898 3000 	ldrb.w	r3, [r8]
 8007452:	3501      	adds	r5, #1
 8007454:	3b30      	subs	r3, #48	; 0x30
 8007456:	2b09      	cmp	r3, #9
 8007458:	d803      	bhi.n	8007462 <_vfiprintf_r+0x186>
 800745a:	fb00 3202 	mla	r2, r0, r2, r3
 800745e:	2101      	movs	r1, #1
 8007460:	e7f4      	b.n	800744c <_vfiprintf_r+0x170>
 8007462:	2900      	cmp	r1, #0
 8007464:	f43f af79 	beq.w	800735a <_vfiprintf_r+0x7e>
 8007468:	9207      	str	r2, [sp, #28]
 800746a:	e776      	b.n	800735a <_vfiprintf_r+0x7e>
 800746c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007470:	2b2a      	cmp	r3, #42	; 0x2a
 8007472:	d10b      	bne.n	800748c <_vfiprintf_r+0x1b0>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	f108 0802 	add.w	r8, r8, #2
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	9203      	str	r2, [sp, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfb8      	it	lt
 8007484:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007488:	9305      	str	r3, [sp, #20]
 800748a:	e76b      	b.n	8007364 <_vfiprintf_r+0x88>
 800748c:	2300      	movs	r3, #0
 800748e:	4619      	mov	r1, r3
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	f108 0001 	add.w	r0, r8, #1
 8007496:	250a      	movs	r5, #10
 8007498:	4680      	mov	r8, r0
 800749a:	f898 2000 	ldrb.w	r2, [r8]
 800749e:	3001      	adds	r0, #1
 80074a0:	3a30      	subs	r2, #48	; 0x30
 80074a2:	2a09      	cmp	r2, #9
 80074a4:	d803      	bhi.n	80074ae <_vfiprintf_r+0x1d2>
 80074a6:	fb05 2101 	mla	r1, r5, r1, r2
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7f4      	b.n	8007498 <_vfiprintf_r+0x1bc>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f af58 	beq.w	8007364 <_vfiprintf_r+0x88>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e755      	b.n	8007364 <_vfiprintf_r+0x88>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4622      	mov	r2, r4
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <_vfiprintf_r+0x234>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7fb ffac 	bl	8003420 <_printf_float>
 80074c8:	e007      	b.n	80074da <_vfiprintf_r+0x1fe>
 80074ca:	ab03      	add	r3, sp, #12
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4622      	mov	r2, r4
 80074d0:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <_vfiprintf_r+0x234>)
 80074d2:	a904      	add	r1, sp, #16
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7fc fa5d 	bl	8003994 <_printf_i>
 80074da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80074de:	4682      	mov	sl, r0
 80074e0:	f47f af68 	bne.w	80073b4 <_vfiprintf_r+0xd8>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	065b      	lsls	r3, r3, #25
 80074e8:	f53f af28 	bmi.w	800733c <_vfiprintf_r+0x60>
 80074ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ee:	b01d      	add	sp, #116	; 0x74
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	08007c18 	.word	0x08007c18
 80074f8:	08007c38 	.word	0x08007c38
 80074fc:	08007c58 	.word	0x08007c58
 8007500:	08007d8a 	.word	0x08007d8a
 8007504:	08007d8e 	.word	0x08007d8e
 8007508:	08003421 	.word	0x08003421
 800750c:	08007d84 	.word	0x08007d84
 8007510:	080072b9 	.word	0x080072b9

08007514 <_sbrk_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4c06      	ldr	r4, [pc, #24]	; (8007530 <_sbrk_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4605      	mov	r5, r0
 800751c:	4608      	mov	r0, r1
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	f000 f94c 	bl	80077bc <_sbrk>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_sbrk_r+0x1a>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	b103      	cbz	r3, 800752e <_sbrk_r+0x1a>
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000354 	.word	0x20000354

08007534 <__sread>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	f000 f8fa 	bl	8007734 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	bfab      	itete	ge
 8007544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007546:	89a3      	ldrhlt	r3, [r4, #12]
 8007548:	181b      	addge	r3, r3, r0
 800754a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800754e:	bfac      	ite	ge
 8007550:	6563      	strge	r3, [r4, #84]	; 0x54
 8007552:	81a3      	strhlt	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__swrite>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	461f      	mov	r7, r3
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	4605      	mov	r5, r0
 8007560:	05db      	lsls	r3, r3, #23
 8007562:	460c      	mov	r4, r1
 8007564:	4616      	mov	r6, r2
 8007566:	d505      	bpl.n	8007574 <__swrite+0x1e>
 8007568:	2302      	movs	r3, #2
 800756a:	2200      	movs	r2, #0
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 f88a 	bl	8007688 <_lseek_r>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	4632      	mov	r2, r6
 8007578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007582:	463b      	mov	r3, r7
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 b839 	b.w	8007600 <_write_r>

0800758e <__sseek>:
 800758e:	b510      	push	{r4, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 f877 	bl	8007688 <_lseek_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	bf15      	itete	ne
 80075a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075aa:	81a3      	strheq	r3, [r4, #12]
 80075ac:	bf18      	it	ne
 80075ae:	81a3      	strhne	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__sclose>:
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 b835 	b.w	8007624 <_close_r>

080075ba <strncmp>:
 80075ba:	b530      	push	{r4, r5, lr}
 80075bc:	b182      	cbz	r2, 80075e0 <strncmp+0x26>
 80075be:	1e45      	subs	r5, r0, #1
 80075c0:	3901      	subs	r1, #1
 80075c2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80075c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	d106      	bne.n	80075dc <strncmp+0x22>
 80075ce:	43ec      	mvns	r4, r5
 80075d0:	4414      	add	r4, r2
 80075d2:	42e0      	cmn	r0, r4
 80075d4:	d001      	beq.n	80075da <strncmp+0x20>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f3      	bne.n	80075c2 <strncmp+0x8>
 80075da:	461c      	mov	r4, r3
 80075dc:	1b18      	subs	r0, r3, r4
 80075de:	bd30      	pop	{r4, r5, pc}
 80075e0:	4610      	mov	r0, r2
 80075e2:	bd30      	pop	{r4, r5, pc}

080075e4 <__ascii_wctomb>:
 80075e4:	b149      	cbz	r1, 80075fa <__ascii_wctomb+0x16>
 80075e6:	2aff      	cmp	r2, #255	; 0xff
 80075e8:	bf85      	ittet	hi
 80075ea:	238a      	movhi	r3, #138	; 0x8a
 80075ec:	6003      	strhi	r3, [r0, #0]
 80075ee:	700a      	strbls	r2, [r1, #0]
 80075f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075f4:	bf98      	it	ls
 80075f6:	2001      	movls	r0, #1
 80075f8:	4770      	bx	lr
 80075fa:	4608      	mov	r0, r1
 80075fc:	4770      	bx	lr
	...

08007600 <_write_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4c07      	ldr	r4, [pc, #28]	; (8007620 <_write_r+0x20>)
 8007604:	4605      	mov	r5, r0
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	2200      	movs	r2, #0
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f7fb f94e 	bl	80028b0 <_write>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_write_r+0x1e>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	b103      	cbz	r3, 800761e <_write_r+0x1e>
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20000354 	.word	0x20000354

08007624 <_close_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4c06      	ldr	r4, [pc, #24]	; (8007640 <_close_r+0x1c>)
 8007628:	2300      	movs	r3, #0
 800762a:	4605      	mov	r5, r0
 800762c:	4608      	mov	r0, r1
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	f000 f89c 	bl	800776c <_close>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_close_r+0x1a>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b103      	cbz	r3, 800763e <_close_r+0x1a>
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000354 	.word	0x20000354

08007644 <_fstat_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4c07      	ldr	r4, [pc, #28]	; (8007664 <_fstat_r+0x20>)
 8007648:	2300      	movs	r3, #0
 800764a:	4605      	mov	r5, r0
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	f000 f893 	bl	800777c <_fstat>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d102      	bne.n	8007660 <_fstat_r+0x1c>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	b103      	cbz	r3, 8007660 <_fstat_r+0x1c>
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	bd38      	pop	{r3, r4, r5, pc}
 8007662:	bf00      	nop
 8007664:	20000354 	.word	0x20000354

08007668 <_isatty_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4c06      	ldr	r4, [pc, #24]	; (8007684 <_isatty_r+0x1c>)
 800766c:	2300      	movs	r3, #0
 800766e:	4605      	mov	r5, r0
 8007670:	4608      	mov	r0, r1
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	f000 f88a 	bl	800778c <_isatty>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_isatty_r+0x1a>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	b103      	cbz	r3, 8007682 <_isatty_r+0x1a>
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000354 	.word	0x20000354

08007688 <_lseek_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4c07      	ldr	r4, [pc, #28]	; (80076a8 <_lseek_r+0x20>)
 800768c:	4605      	mov	r5, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f000 f880 	bl	800779c <_lseek>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_lseek_r+0x1e>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_lseek_r+0x1e>
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000354 	.word	0x20000354

080076ac <memmove>:
 80076ac:	4288      	cmp	r0, r1
 80076ae:	b510      	push	{r4, lr}
 80076b0:	eb01 0302 	add.w	r3, r1, r2
 80076b4:	d801      	bhi.n	80076ba <memmove+0xe>
 80076b6:	1e42      	subs	r2, r0, #1
 80076b8:	e00b      	b.n	80076d2 <memmove+0x26>
 80076ba:	4298      	cmp	r0, r3
 80076bc:	d2fb      	bcs.n	80076b6 <memmove+0xa>
 80076be:	1881      	adds	r1, r0, r2
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	42d3      	cmn	r3, r2
 80076c4:	d004      	beq.n	80076d0 <memmove+0x24>
 80076c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076ce:	e7f8      	b.n	80076c2 <memmove+0x16>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d004      	beq.n	80076e0 <memmove+0x34>
 80076d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076de:	e7f8      	b.n	80076d2 <memmove+0x26>
 80076e0:	bd10      	pop	{r4, pc}

080076e2 <__malloc_lock>:
 80076e2:	4770      	bx	lr

080076e4 <__malloc_unlock>:
 80076e4:	4770      	bx	lr

080076e6 <_realloc_r>:
 80076e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e8:	4607      	mov	r7, r0
 80076ea:	4615      	mov	r5, r2
 80076ec:	460e      	mov	r6, r1
 80076ee:	b921      	cbnz	r1, 80076fa <_realloc_r+0x14>
 80076f0:	4611      	mov	r1, r2
 80076f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076f6:	f7ff bc1d 	b.w	8006f34 <_malloc_r>
 80076fa:	b91a      	cbnz	r2, 8007704 <_realloc_r+0x1e>
 80076fc:	f7ff fbce 	bl	8006e9c <_free_r>
 8007700:	4628      	mov	r0, r5
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	f000 f828 	bl	8007758 <_malloc_usable_size_r>
 8007708:	4285      	cmp	r5, r0
 800770a:	d90e      	bls.n	800772a <_realloc_r+0x44>
 800770c:	4629      	mov	r1, r5
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff fc10 	bl	8006f34 <_malloc_r>
 8007714:	4604      	mov	r4, r0
 8007716:	b150      	cbz	r0, 800772e <_realloc_r+0x48>
 8007718:	4631      	mov	r1, r6
 800771a:	462a      	mov	r2, r5
 800771c:	f7fe ffbc 	bl	8006698 <memcpy>
 8007720:	4631      	mov	r1, r6
 8007722:	4638      	mov	r0, r7
 8007724:	f7ff fbba 	bl	8006e9c <_free_r>
 8007728:	e001      	b.n	800772e <_realloc_r+0x48>
 800772a:	4630      	mov	r0, r6
 800772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772e:	4620      	mov	r0, r4
 8007730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007734 <_read_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4c07      	ldr	r4, [pc, #28]	; (8007754 <_read_r+0x20>)
 8007738:	4605      	mov	r5, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 f832 	bl	80077ac <_read>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_read_r+0x1e>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	b103      	cbz	r3, 8007752 <_read_r+0x1e>
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000354 	.word	0x20000354

08007758 <_malloc_usable_size_r>:
 8007758:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800775c:	2800      	cmp	r0, #0
 800775e:	bfbe      	ittt	lt
 8007760:	1809      	addlt	r1, r1, r0
 8007762:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007766:	18c0      	addlt	r0, r0, r3
 8007768:	3804      	subs	r0, #4
 800776a:	4770      	bx	lr

0800776c <_close>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <_close+0xc>)
 800776e:	2258      	movs	r2, #88	; 0x58
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007776:	4770      	bx	lr
 8007778:	20000354 	.word	0x20000354

0800777c <_fstat>:
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <_fstat+0xc>)
 800777e:	2258      	movs	r2, #88	; 0x58
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007786:	4770      	bx	lr
 8007788:	20000354 	.word	0x20000354

0800778c <_isatty>:
 800778c:	4b02      	ldr	r3, [pc, #8]	; (8007798 <_isatty+0xc>)
 800778e:	2258      	movs	r2, #88	; 0x58
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	2000      	movs	r0, #0
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000354 	.word	0x20000354

0800779c <_lseek>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <_lseek+0xc>)
 800779e:	2258      	movs	r2, #88	; 0x58
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a6:	4770      	bx	lr
 80077a8:	20000354 	.word	0x20000354

080077ac <_read>:
 80077ac:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <_read+0xc>)
 80077ae:	2258      	movs	r2, #88	; 0x58
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b6:	4770      	bx	lr
 80077b8:	20000354 	.word	0x20000354

080077bc <_sbrk>:
 80077bc:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <_sbrk+0x14>)
 80077be:	4905      	ldr	r1, [pc, #20]	; (80077d4 <_sbrk+0x18>)
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bf08      	it	eq
 80077c6:	460b      	moveq	r3, r1
 80077c8:	4418      	add	r0, r3
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	4770      	bx	lr
 80077d0:	200002ec 	.word	0x200002ec
 80077d4:	20000358 	.word	0x20000358

080077d8 <_init>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr

080077e4 <_fini>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	bf00      	nop
 80077e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ea:	bc08      	pop	{r3}
 80077ec:	469e      	mov	lr, r3
 80077ee:	4770      	bx	lr
